195216
((3) 0 () 145 ((q quote #%kernel) (q lib "racket/port.rkt") (q lib "racket/control.rkt") (q lib "racket/private/base.rkt") (q lib "racket/file.rkt") (q lib "racket/private/class-internal.rkt") (q lib "racket/private/more-scheme.rkt") (q lib "racket/unsafe/ops.rkt") (q lib "racket/private/list.rkt") (q lib "racket/place.rkt") (q lib "racket/contract/private/guts.rkt") (q lib "racket/extflonum.rkt") (q lib "racket/match.rkt") (q lib "racket/list.rkt") (q lib "racket/contract.rkt") (q lib "racket/fixnum.rkt") (q lib "racket/contract/private/misc.rkt") (q lib "racket/sandbox.rkt") (q lib "racket/bool.rkt") (q lib "racket/sequence.rkt") (q lib "racket/set.rkt") (q lib "racket/require-transform.rkt") (q lib "racket/linklet.rkt") (q lib "racket/runtime-path.rkt") (q lib "racket/contract/base.rkt") (q lib "racket/unit.rkt") (q lib "racket/udp.rkt") (q 482823 . 23) (q lib "racket/string.rkt") (q lib "racket/dict.rkt") (q lib "racket/flonum.rkt") (q lib "racket/promise.rkt") (q lib "racket/trace.rkt") (q lib "racket/vector.rkt") (q lib "racket/future.rkt") (q lib "racket/function.rkt") (q lib "racket/pretty.rkt") (q lib "racket/private/letstx-scheme.rkt") (q lib "racket/private/stxcase-scheme.rkt") (q 310459 . 5) (q lib "racket/date.rkt") (q 191673 . 3) (q lib "racket/generator.rkt") (q lib "racket/syntax.rkt") (q lib "racket/provide-transform.rkt") (q lib "racket/private/misc.rkt") (q 257788 . 4) (q lib "racket/trait.rkt") (q lib "racket/contract/collapsible.rkt") (q 241829 . 9) (q 258419 . 4) (q lib "racket/stream.rkt") (q lib "racket/path.rkt") (q lib "racket/contract/region.rkt") (q lib "racket/splicing.rkt") (q 261332 . 5) (q lib "racket/generic.rkt") (q lib "racket/math.rkt") (q 241671 . 5) (q lib "racket/format.rkt") (q lib "racket/struct-info.rkt") (q lib "racket/fasl.rkt") (q lib "racket/system.rkt") (q 260142 . 5) (q lib "racket/tcp.rkt") (q 312271 . 8) (q 258758 . 5) (q lib "racket/class.rkt") (q 309936 . 17) (q lib "racket/async-channel.rkt") (q 162570 . 4) (q lib "racket/private/map.rkt") (q lib "racket/contract/private/blame.rkt") (q lib "racket/provide-syntax.rkt") (q lib "racket/contract/private/base.rkt") (q lib "racket/contract/private/provide.rkt") (q lib "racket/contract/combinator.rkt") (q lib "racket/phase+space.rkt") (q 258239 . 5) (q 428957 . 6) (q 261486 . 4) (q lib "racket/private/serialize.rkt") (q 428591 . 5) (q 261212 . 4) (q lib "racket/mutability.rkt") (q lib "racket/serialize.rkt") (q lib "racket/require-syntax.rkt") (q 242428 . 5) (q lib "racket/contract/private/prop.rkt") (q lib "racket/engine.rkt") (q lib "racket/contract/parametric.rkt") (q 260373 . 7) (q 259418 . 4) (q 258582 . 5) (q 483483 . 5) (q lib "racket/unit-exptime.rkt") (q lib "racket/private/qqstx.rkt") (q lib "racket/keyword-transform.rkt") (q 349231 . 29) (q 260940 . 4) (q 260592 . 4) (q 259066 . 5) (q 257916 . 4) (q 257493 . 6) (q lib "racket/include.rkt") (q 226717 . 4) (q 261961 . 9) (q 259257 . 5) (q 261615 . 4) (q 259983 . 4) (q 259694 . 4) (q 171195 . 3) (q 259826 . 4) (q lib "racket/contract/private/vector.rkt") (q lib "racket/cmdline.rkt") (q lib "racket/logging.rkt") (q lib "racket/contract/private/box.rkt") (q lib "racket/unsafe/undefined.rkt") (q lib "racket/require.rkt") (q 242581 . 5) (q 260718 . 5) (q 258065 . 5) (q 257683 . 4) (q 259551 . 4) (q lib "racket/stxparam.rkt") (q 258919 . 4) (q lib "racket/contract/private/opt.rkt") (q lib "racket/bytes.rkt") (q 430163 . 6) (q lib "racket/provide.rkt") (q 419459 . 40) (q lib "racket/enter.rkt") (q lib "racket/os.rkt") (q lib "racket/random.rkt") (q 261078 . 4) (q lib "racket/contract/private/struct-dc.rkt") (q 242809 . 4) (q lib "racket/struct.rkt") (q lib "racket/stxparam-exptime.rkt") (q lib "racket/hash.rkt") (q lib "racket/contract/private/ds.rkt") (q 421974 . 5) (q lib "racket/lazy-require.rkt") (q lib "racket/performance-hint.rkt") (q lib "racket/contract/private/hash.rkt")) () (h ! (equal) ((c def c (c (? . 24) q predicate/c)) q (213967 . 2)) ((c def c (c (? . 0) q environment-variables-names)) q (487161 . 4)) ((c def c (c (? . 31) q promise-forced?)) q (263658 . 3)) ((c def c (c (? . 3) q syntax-serialize)) q (316473 . 12)) ((c def c (c (? . 7) q unsafe-extflceiling)) q (514688 . 3)) ((c def c (c (? . 0) q make-hashalw)) q (116414 . 4)) ((c def c (c (? . 44) q make-provide-pre-transformer)) q (311853 . 5)) ((c def c (c (? . 0) q struct:date)) c (? . 27)) ((c def c (c (? . 1) q with-input-from-string)) q (338004 . 4)) ((c def c (c (? . 0) q call-with-continuation-prompt)) q (264608 . 10)) ((c def c (c (? . 0) q stencil-vector-ref)) q (113866 . 4)) ((c def c (c (? . 4) q other-permission-bits)) q (461714 . 2)) ((c def c (c (? . 1) q make-pipe-with-specials)) q (341258 . 7)) ((c form c (c (? . 2) q shift)) q (268069 . 2)) ((c def c (c (? . 0) q struct:exn:fail:filesystem:missing-module)) c (? . 91)) ((c def c (c (? . 0) q struct-accessor-procedure?)) q (173513 . 3)) ((c def c (c (? . 0) q current-load-extension)) q (389010 . 15)) ((c form c (c (? . 2) q control0)) q (268263 . 2)) ((c def c (c (? . 26) q udp-bind!)) q (464139 . 9)) ((c def c (c (? . 15) q most-positive-fixnum)) q (42274 . 2)) ((c form c (c (? . 20) q for/mutable-seteq)) q (150538 . 2)) ((c form c (c (? . 3) q define-struct/derived)) q (166476 . 3)) ((c def c (c (? . 21) q import?)) c (? . 68)) ((c def c (c (? . 6) q hash-ref!)) q (119675 . 5)) ((c form c (c (? . 17) q with-deep-time-limit)) q (430111 . 2)) ((c def c (c (? . 5) q make-exn:fail:object)) c (? . 41)) ((c def c (c (? . 0) q nack-guard-evt)) q (274999 . 3)) ((c def c (c (? . 0) q current-input-port)) q (321718 . 4)) ((c def c (c (? . 0) q make-struct-field-accessor)) q (167879 . 12)) ((c def c (c (? . 10) q contract-late-neg-projection)) q (238067 . 4)) ((c def c (c (? . 13) q sixth)) q (99840 . 3)) ((c def c (c (? . 0) q bytes>?)) q (66391 . 4)) ((c def c (c (? . 0) q current-module-path-for-load)) q (395179 . 11)) ((c def c (c (? . 36) q pretty-print-columns)) q (372057 . 5)) ((c def c (c (? . 0) q module-path?)) q (394134 . 3)) ((c def c (c (? . 81) q serialized=?)) q (378269 . 4)) ((c def c (c (? . 4) q put-preferences)) q (458825 . 9)) ((c def c (c (? . 0) q hash-iterate-pair)) q (123118 . 4)) ((c def c (c (? . 0) q make-custodian-box)) q (416632 . 4)) ((c def c (c (? . 11) q extflonum-available?)) q (42422 . 2)) ((c def c (c (? . 1) q dup-output-port)) q (343871 . 4)) ((c def c (c (? . 51) q stream-empty?)) q (135945 . 3)) ((c def c (c (? . 5) q is-a?)) q (190438 . 4)) ((c def c (c (? . 64) q tcp-connect/enable-break)) q (462553 . 10)) ((c def c (c (? . 0) q peek-char)) q (357713 . 4)) ((c def c (c (? . 9) q place-dead-evt)) q (282887 . 3)) ((c form c (c (? . 25) q prefix)) q (194661 . 2)) ((c def c (c (? . 0) q make-continuation-prompt-tag)) q (265170 . 4)) ((c form c (c (? . 6) q log-info)) q (480966 . 3)) ((c def c (c (? . 0) q procedure-arity-mask)) q (159939 . 3)) ((c form c (c (? . 6) q do)) q (19020 . 7)) ((c def c (c (? . 0) q will-try-execute)) q (492136 . 4)) ((c def c (c (? . 8) q build-list)) q (93304 . 4)) ((c def c (c (? . 0) q semaphore?)) q (276231 . 3)) ((c def c (c (? . 14) q contract-random-generate-env?)) q (244827 . 3)) ((c def c (c (? . 1) q port->bytes)) q (336325 . 4)) ((c def c (c (? . 0) q hash-set)) q (118908 . 5)) ((c def c (c (? . 4) q preferences-lock-file-mode)) q (459160 . 2)) ((c def c (c (? . 0) q unquoted-printing-string-value)) q (255694 . 3)) ((c def c (c (? . 4) q group-execute-bit)) q (461677 . 2)) ((c def c (c (? . 30) q flround)) q (35411 . 3)) ((c def c (c (? . 6) q hash-has-key?)) q (119794 . 4)) ((c def c (c (? . 0) q bytes-length)) q (64720 . 3)) ((c def c (c (? . 0) q char-grapheme-break-property)) q (73664 . 3)) ((c def c (c (? . 7) q unsafe-char=?)) q (497742 . 4)) ((c def c (c (? . 22) q linklet-body-reserved-symbol?)) q (434908 . 3)) ((c def c (c (? . 0) q impersonate-struct)) q (402005 . 17)) ((c def c (c (? . 0) q struct-type-make-predicate)) q (418533 . 3)) ((c def c (c (? . 8) q assv)) q (96566 . 4)) ((c def c (c (? . 67) q dynamic-object/c)) q (186418 . 9)) ((c def c (c (? . 9) q place-wait)) q (282824 . 3)) ((c def c (c (? . 3) q make-exn:break)) c (? . 55)) ((c def c (c (? . 7) q unsafe-string-length)) q (500502 . 3)) ((c def c (c (? . 90) q new-âˆ€/c)) q (214142 . 3)) ((c def c (c (? . 0) q syntax-rearm)) q (315445 . 5)) ((c def c (c (? . 0) q memq)) q (95982 . 4)) ((c def c (c (? . 10) q contract-custom-write-property-proc)) q (239079 . 7)) ((c def c (c (? . 0) q car)) q (93010 . 3)) ((c def c (c (? . 0) q bytes=?)) q (66201 . 4)) ((c def c (c (? . 18) q false?)) q (21815 . 3)) ((c form c (c (? . 3) q for*/lists)) q (16715 . 3)) ((c def c (c (? . 62) q system)) q (474422 . 4)) ((c def c (c (? . 19) q sequence-length)) q (134345 . 3)) ((c form c (c (? . 38) q syntax)) q (286036 . 22)) ((c def c (c (? . 0) q struct:exn:break:hang-up)) c (? . 80)) ((c def c (c (? . 0) q namespace-variable-value)) q (382753 . 9)) ((c def c (c (? . 0) q make-ephemeron-hash)) q (117433 . 4)) ((c def c (c (? . 11) q extfl-)) q (42552 . 4)) ((c form c (c (? . 5) q send)) q (181754 . 3)) ((c form c (c (? . 12) q match-define)) q (246576 . 2)) ((c def c (c (? . 3) q in-mutable-hash-pairs)) q (128733 . 3)) ((c def c (c (? . 0) q char-upcase)) q (73937 . 3)) ((c form c (c (? . 12) q match-letrec-values)) q (246508 . 2)) ((c def c (c (? . 13) q takef)) q (101507 . 4)) ((c def c (c (? . 14) q contract-random-generate-fail?)) q (244751 . 3)) ((c def c (c (? . 7) q unsafe-fxpopcount)) q (493768 . 3)) ((c def c (c (? . 0) q string>?)) q (49461 . 4)) ((c def c (c (? . 6) q current-parameterization)) q (280411 . 2)) ((c def c (c (? . 0) q string-grapheme-count)) q (51709 . 6)) ((c def c (c (? . 3) q procedure-reduce-keyword-arity-mask)) q (161936 . 14)) ((c def c (c (? . 15) q fxmin)) q (40428 . 4)) ((c def c (c (? . 0) q raise-arity-mask-error)) q (253580 . 5)) ((c def c (c (? . 13) q check-duplicates)) q (103662 . 9)) ((c def c (c (? . 11) q extflvector-ref)) q (45171 . 4)) ((c form c (c (? . 3) q for*/hash)) q (16888 . 2)) ((c def c (c (? . 3) q exn:fail:filesystem:errno)) c (? . 63)) ((c def c (c (? . 1) q peek-bytes-avail!-evt)) c (? . 98)) ((c def c (c (? . 0) q port-read-handler)) q (366368 . 10)) ((c def c (c (? . 0) q hash?)) q (115233 . 3)) ((c def c (c (? . 0) q remainder)) q (24474 . 4)) ((c form c (c (? . 5) q public)) q (178788 . 2)) ((c def c (c (? . 16) q continuation-mark-key/c)) q (207162 . 3)) ((c def c (c (? . 0) q security-guard?)) q (414605 . 3)) ((c def c (c (? . 29) q dict-ref!)) q (140767 . 5)) ((c def c (c (? . 0) q string-ci>?)) q (49942 . 4)) ((c form c (c (? . 23) q define-runtime-paths)) q (450228 . 2)) ((c form c (c (? . 54) q splicing-letrec)) q (313894 . 2)) ((c def c (c (? . 0) q arity-at-least?)) c (? . 70)) ((c def c (c (? . 16) q string-len/c)) q (202454 . 3)) ((c def c (c (? . 5) q object?)) q (189710 . 3)) ((c def c (c (? . 0) q struct:exn:fail:filesystem:version)) c (? . 109)) ((c def c (c (? . 7) q unsafe-list-ref)) q (498698 . 4)) ((c def c (c (? . 17) q sandbox-make-inspector)) q (427055 . 4)) ((c def c (c (? . 1) q display-lines)) q (337166 . 7)) ((c def c (c (? . 33) q vector-append)) q (110331 . 3)) ((c def c (c (? . 0) q acos)) q (26631 . 3)) ((c def c (c (? . 0) q system-language+country)) q (488002 . 2)) ((c def c (c (? . 0) q read)) q (362742 . 3)) ((c def c (c (? . 0) q keyword?)) q (92431 . 3)) ((c form c (c (? . 18) q implies)) q (21916 . 2)) ((c def c (c (? . 19) q sequence-tail)) q (134525 . 4)) ((c form c (c (? . 6) q parameterize*)) q (279935 . 3)) ((c def c (c (? . 0) q mcar)) q (107203 . 3)) ((c def c (c (? . 40) q date->julian/scaliger)) q (485727 . 3)) ((c def c (c (? . 0) q vector*-ref)) q (108246 . 4)) ((c def c (c (? . 20) q list->mutable-setalw)) q (149334 . 4)) ((c def c (c (? . 0) q continuation-mark-set->list*)) q (269627 . 10)) ((c def c (c (? . 21) q current-require-module-path)) q (310642 . 4)) ((c def c (c (? . 56) q struct:exn:fail:support)) c (? . 111)) ((c def c (c (? . 0) q variable-reference->phase)) q (387362 . 3)) ((c form c (c (? . 86) q define-require-syntax)) q (13855 . 3)) ((c def c (c (? . 0) q file-position)) q (322628 . 6)) ((c def c (c (? . 15) q fxior)) q (39114 . 3)) ((c def c (c (? . 11) q extfl/)) q (42718 . 4)) ((c def c (c (? . 71) q andmap)) q (93977 . 4)) ((c def c (c (? . 22) q instance-describe-variable!)) q (436431 . 7)) ((c def c (c (? . 0) q bound-identifier=?)) q (294081 . 6)) ((c def c (c (? . 0) q bytes-utf-8-index)) q (69107 . 12)) ((c def c (c (? . 0) q link-exists?)) q (446002 . 3)) ((c def c (c (? . 35) q negate)) q (163941 . 3)) ((c def c (c (? . 7) q unsafe-extfl->fx)) q (515608 . 3)) ((c def c (c (? . 0) q delete-directory)) q (449480 . 3)) ((c def c (c (? . 0) q eval)) q (387927 . 6)) ((c def c (c (? . 15) q fx+)) q (38586 . 3)) ((c def c (c (? . 0) q read-bytes-avail!*)) q (352838 . 10)) ((c form c (c (? . 23) q define-runtime-path-list)) q (450294 . 2)) ((c def c (c (? . 21) q import-source?)) c (? . 39)) ((c def c (c (? . 47) q trait-sum)) q (184417 . 3)) ((c def c (c (? . 13) q indexes-of)) q (100898 . 6)) ((c def c (c (? . 24) q listof)) q (203932 . 3)) ((c def c (c (? . 10) q contract-first-order-passes?)) q (237237 . 4)) ((c def c (c (? . 4) q file->lines)) q (451199 . 8)) ((c def c (c (? . 0) q syntax-taint)) q (315587 . 3)) ((c def c (c (? . 0) q free-identifier=?)) q (294289 . 10)) ((c def c (c (? . 59) q ~.s)) q (63119 . 25)) ((c def c (c (? . 8) q remv*)) q (95078 . 4)) ((c form c (c (? . 0) q #%top)) q (10952 . 2)) ((c def c (c (? . 20) q set-eqv?)) q (147427 . 3)) ((c def c (c (? . 0) q syntax-local-phase-level)) q (306818 . 2)) ((c def c (c (? . 34) q fsemaphore?)) q (281330 . 3)) ((c def c (c (? . 4) q make-parent-directory*)) q (455586 . 3)) ((c def c (c (? . 0) q path->bytes)) q (439203 . 3)) ((c def c (c (? . 3) q in-input-port-chars)) q (126832 . 3)) ((c def c (c (? . 0) q syntax-property-symbol-keys)) q (314749 . 3)) ((c def c (c (? . 60) q struct-auto-info?)) q (175076 . 3)) ((c def c (c (? . 45) q bytes-environment-variable-name?)) q (486302 . 3)) ((c def c (c (? . 3) q stop-after)) q (132753 . 4)) ((c def c (c (? . 0) q string->immutable-string)) q (47502 . 3)) ((c form c (c (? . 25) q provide-signature-elements)) q (198870 . 2)) ((c def c (c (? . 0) q imag-part)) q (27023 . 3)) ((c def c (c (? . 0) q string->bytes/locale)) q (67700 . 6)) ((c def c (c (? . 16) q char-in)) q (202334 . 4)) ((c def c (c (? . 0) q stencil-vector-set!)) q (113985 . 5)) ((c def c (c (? . 26) q udp-send)) q (465125 . 6)) ((c def c (c (? . 0) q make-readtable)) q (375942 . 11)) ((c def c (c (? . 13) q third)) q (99689 . 3)) ((c def c (c (? . 1) q make-limited-input-port)) q (340991 . 7)) ((c form c (c (? . 5) q class-field-accessor)) q (183025 . 2)) ((c def c (c (? . 24) q symbols)) q (202658 . 3)) ((c def c (c (? . 0) q round)) q (25102 . 3)) ((c def c (c (? . 3) q apply)) q (158631 . 6)) ((c def c (c (? . 72) q blame-contract)) q (225854 . 3)) ((c def c (c (? . 77) q phase+space-phase)) q (320692 . 3)) ((c def c (c (? . 0) q char?)) q (71447 . 3)) ((c def c (c (? . 73) q syntax-local-provide-introduce)) q (14134 . 3)) ((c def c (c (? . 0) q date-minute)) c (? . 27)) ((c def c (c (? . 6) q current-break-parameterization)) q (271879 . 2)) ((c def c (c (? . 0) q identifier-prune-to-source-module)) q (293446 . 3)) ((c form c (c (? . 5) q inner)) q (180797 . 3)) ((c form c (c (? . 5) q super-instantiate)) q (181593 . 2)) ((c def c (c (? . 0) q srcloc?)) c (? . 106)) ((c def c (c (? . 7) q unsafe-flround)) q (495959 . 3)) ((c def c (c (? . 0) q find-compiled-file-roots)) q (390922 . 2)) ((c def c (c (? . 24) q list/c)) q (204569 . 3)) ((c def c (c (? . 3) q in-parallel)) q (132429 . 3)) ((c def c (c (? . 28) q string-normalize-spaces)) q (52473 . 11)) ((c def c (c (? . 1) q eof-evt)) q (348254 . 3)) ((c def c (c (? . 14) q contract-random-generate)) q (244079 . 5)) ((c def c (c (? . 0) q random-seed)) q (28611 . 3)) ((c def c (c (? . 28) q string-trim)) q (53440 . 11)) ((c form c (c (? . 25) q init-depend)) q (194845 . 2)) ((c def c (c (? . 7) q unsafe-fl<=)) q (495619 . 4)) ((c def c (c (? . 0) q module-path-index-submodule)) q (396148 . 4)) ((c def c (c (? . 0) q make-interned-syntax-introducer)) q (308283 . 4)) ((c def c (c (? . 29) q dict-iterate-key)) q (140212 . 4)) ((c def c (c (? . 3) q make-base-empty-namespace)) q (381915 . 2)) ((c def c (c (? . 32) q current-trace-print-args)) q (522742 . 14)) ((c def c (c (? . 0) q char-ci>?)) q (72585 . 4)) ((c def c (c (? . 3) q procedure-reduce-keyword-arity)) q (161331 . 14)) ((c def c (c (? . 0) q rename-transformer?)) q (299409 . 3)) ((c def c (c (? . 0) q peek-bytes)) q (353912 . 5)) ((c def c (c (? . 0) q error-message-adjuster-key)) q (263460 . 2)) ((c def c (c (? . 20) q set-union)) q (153623 . 4)) ((c def c (c (? . 7) q unsafe-string-set!)) q (500721 . 5)) ((c form c (c (? . 15) q for*/fxvector)) q (41819 . 9)) ((c def c (c (? . 116) q box-immutable/c)) q (203866 . 3)) ((c form c (c (? . 5) q absent)) q (185695 . 2)) ((c def c (c (? . 43) q format-symbol)) q (318669 . 5)) ((c def c (c (? . 0) q dynamic-wind)) q (266881 . 7)) ((c def c (c (? . 0) q peek-char-or-special)) q (358073 . 10)) ((c def c (c (? . 30) q flfloor)) q (35465 . 3)) ((c def c (c (? . 11) q extflabs)) q (42801 . 3)) ((c def c (c (? . 57) q sqr)) q (33410 . 3)) ((c def c (c (? . 0) q unquoted-printing-string?)) q (255534 . 3)) ((c def c (c (? . 0) q port-print-handler)) q (370321 . 7)) ((c def c (c (? . 0) q make-output-port)) q (333300 . 59)) ((c def c (c (? . 0) q string-fill!)) q (48608 . 4)) ((c def c (c (? . 0) q complex?)) q (22675 . 3)) ((c def c (c (? . 7) q unsafe-fltan)) q (496388 . 3)) ((c def c (c (? . 13) q drop)) q (101306 . 4)) ((c form c (c (? . 20) q for*/weak-seteq)) q (151224 . 2)) ((c def c (c (? . 0) q syntax-local-lift-module)) q (306154 . 3)) ((c def c (c (? . 0) q keyword<?)) q (92627 . 4)) ((c def c (c (? . 16) q none/c)) q (201425 . 2)) ((c def c (c (? . 0) q equal-hash-code)) q (20689 . 3)) ((c form c (c (? . 31) q delay)) q (263559 . 2)) ((c form c (c (? . 37) q let/ec)) q (266426 . 2)) ((c def c (c (? . 19) q sequence-add-between)) q (135430 . 4)) ((c form c (c (? . 32) q untrace)) q (522450 . 2)) ((c def c (c (? . 0) q cddr)) q (97090 . 3)) ((c def c (c (? . 33) q vector-argmax)) q (111675 . 4)) ((c def c (c (? . 30) q fl<=)) q (35099 . 4)) ((c form c (c (? . 2) q shift0-at)) q (268480 . 2)) ((c def c (c (? . 34) q fsemaphore-post)) q (281387 . 3)) ((c def c (c (? . 20) q list->weak-set)) q (149665 . 4)) ((c def c (c (? . 20) q list->weak-setalw)) q (149766 . 4)) ((c def c (c (? . 35) q normalize-arity)) q (164519 . 4)) ((c def c (c (? . 0) q namespace?)) q (381810 . 3)) ((c form c (c (? . 96) q unsyntax-splicing)) q (287151 . 2)) ((c def c (c (? . 7) q unsafe-fltruncate)) q (496144 . 3)) ((c def c (c (? . 26) q udp-addresses)) q (469993 . 7)) ((c form c (c (? . 20) q for*/setalw)) q (150430 . 2)) ((c def c (c (? . 5) q member-name-key=?)) q (181131 . 4)) ((c def c (c (? . 4) q set-group-id-bit)) q (461358 . 2)) ((c def c (c (? . 0) q identifier-label-binding)) q (296992 . 12)) ((c def c (c (? . 7) q unsafe-extflvector-ref)) q (515751 . 4)) ((c def c (c (? . 0) q vector->immutable-vector)) q (108900 . 3)) ((c form c (c (? . 31) q lazy)) q (263586 . 2)) ((c def c (c (? . 4) q make-temporary-directory*)) q (456891 . 8)) ((c def c (c (? . 5) q dynamic-set-field!)) q (182864 . 5)) ((c form c (c (? . 31) q delay/thread)) q (263980 . 5)) ((c def c (c (? . 1) q convert-stream)) q (350565 . 9)) ((c def c (c (? . 36) q tentative-pretty-print-port-transfer)) q (375576 . 5)) ((c def c (c (? . 0) q real-part)) q (26969 . 3)) ((c def c (c (? . 0) q cdaadr)) q (98710 . 3)) ((c form c (c (? . 3) q for-meta)) q (7001 . 2)) ((c def c (c (? . 0) q port-progress-evt)) q (359011 . 4)) ((c form c (c (? . 37) q letrec-syntax)) q (12302 . 2)) ((c def c (c (? . 38) q syntax-pattern-variable?)) q (289101 . 3)) ((c def c (c (? . 0) q read-accept-lang)) q (365715 . 4)) ((c def c (c (? . 16) q false/c)) q (202522 . 2)) ((c def c (c (? . 48) q collapsible-leaf/c-proj-list)) c (? . 49)) ((c def c (c (? . 12) q prop:legacy-match-expander)) q (246893 . 2)) ((c def c (c (? . 0) q current-compile-realm)) q (393069 . 4)) ((c def c (c (? . 0) q keyword->string)) q (92485 . 3)) ((c def c (c (? . 0) q readtable-mapping)) q (376333 . 9)) ((c def c (c (? . 0) q hasheqv)) q (116139 . 5)) ((c def c (c (? . 7) q unsafe-flreal-part)) q (497108 . 5)) ((c def c (c (? . 0) q make-empty-namespace)) q (381866 . 2)) ((c def c (c (? . 0) q local-expand)) q (299730 . 11)) ((c def c (c (? . 0) q cddddr)) q (99310 . 3)) ((c def c (c (? . 20) q set-intersect!)) q (153930 . 4)) ((c def c (c (? . 21) q struct:import-source)) c (? . 39)) ((c def c (c (? . 14) q contract-random-generate-fail)) q (244680 . 2)) ((c def c (c (? . 3) q make-exn:break:terminate)) c (? . 108)) ((c def c (c (? . 0) q write-bytes-avail/enable-break)) q (361431 . 10)) ((c def c (c (? . 0) q make-shared-bytes)) q (66031 . 4)) ((c def c (c (? . 0) q struct:exn:fail:contract)) c (? . 46)) ((c def c (c (? . 20) q subset?)) q (154557 . 4)) ((c def c (c (? . 52) q path-has-extension?)) q (443730 . 4)) ((c def c (c (? . 20) q set-intersect)) q (153823 . 4)) ((c def c (c (? . 17) q sandbox-namespace-specs)) q (424203 . 6)) ((c def c (c (? . 0) q exn:fail:syntax?)) c (? . 66)) ((c def c (c (? . 3) q exn:fail:contract:continuation)) c (? . 50)) ((c def c (c (? . 40) q julian/scaliger->string)) q (485806 . 3)) ((c def c (c (? . 11) q extfl<=)) q (43105 . 4)) ((c def c (c (? . 0) q error-print-width)) q (256455 . 4)) ((c def c (c (? . 3) q hash-keys)) q (121601 . 4)) ((c def c (c (? . 24) q property/c)) q (207733 . 5)) ((c def c (c (? . 3) q prop:sequence)) q (133914 . 2)) ((c def c (c (? . 76) q skip-projection-wrapper?)) q (224360 . 5)) ((c def c (c (? . 0) q hash-remove!)) q (120641 . 4)) ((c def c (c (? . 6) q hash-update!)) q (119882 . 11)) ((c def c (c (? . 28) q string-prefix?)) q (54000 . 4)) ((c def c (c (? . 0) q continuation-mark-set->iterator)) q (270080 . 11)) ((c form c (c (? . 75) q define-module-boundary-contract)) q (217079 . 20)) ((c def c (c (? . 3) q in-weak-hash-keys)) q (130139 . 3)) ((c def c (c (? . 0) q set-box*!)) q (114948 . 4)) ((c form c (c (? . 37) q let*-values)) q (12117 . 2)) ((c def c (c (? . 30) q fl->exact-integer)) q (36291 . 3)) ((c def c (c (? . 0) q date*?)) c (? . 94)) ((c def c (c (? . 26) q udp-receive!*)) q (467382 . 12)) ((c def c (c (? . 22) q make-instance)) q (435044 . 12)) ((c def c (c (? . 5) q method-in-interface?)) q (190801 . 4)) ((c def c (c (? . 0) q semaphore-peek-evt)) q (276677 . 3)) ((c def c (c (? . 0) q read-curly-brace-as-paren)) q (364153 . 4)) ((c def c (c (? . 0) q make-hashalw-placeholder)) q (106984 . 3)) ((c def c (c (? . 5) q exn:fail:object)) c (? . 41)) ((c def c (c (? . 7) q unsafe-extfltruncate)) q (514760 . 3)) ((c def c (c (? . 11) q extflcos)) q (43757 . 3)) ((c def c (c (? . 7) q unsafe-cons-list)) q (498598 . 4)) ((c def c (c (? . 13) q cons?)) q (99432 . 3)) ((c def c (c (? . 0) q current-library-collection-links)) q (520112 . 11)) ((c def c (c (? . 28) q string-suffix?)) q (54093 . 4)) ((c form c (c (? . 6) q define-logger)) q (479570 . 7)) ((c form c (c (? . 23) q define-runtime-path)) q (450094 . 5)) ((c def c (c (? . 0) q current-compiled-file-roots)) q (390746 . 4)) ((c def c (c (? . 22) q linklet-directory?)) q (434175 . 3)) ((c def c (c (? . 0) q make-set!-transformer)) q (299129 . 3)) ((c def c (c (? . 0) q ephemeron-value)) q (491598 . 5)) ((c def c (c (? . 15) q fxvector-set!)) q (41191 . 5)) ((c form c (c (? . 3) q define-sequence-syntax)) q (18333 . 8)) ((c def c (c (? . 11) q ->extfl)) q (44335 . 3)) ((c def c (c (? . 0) q print-boolean-long-form)) q (368655 . 4)) ((c def c (c (? . 0) q length)) q (93439 . 3)) ((c def c (c (? . 0) q syntax-local-lift-expression)) q (305881 . 3)) ((c def c (c (? . 4) q other-execute-bit)) q (461824 . 2)) ((c def c (c (? . 0) q prefab-key?)) q (174116 . 3)) ((c def c (c (? . 4) q user-permission-bits)) q (461424 . 2)) ((c def c (c (? . 42) q sequence->repeated-generator)) q (138786 . 3)) ((c def c (c (? . 10) q has-contract?)) q (237880 . 3)) ((c def c (c (? . 7) q unsafe-extfl>=)) q (514275 . 4)) ((c def c (c (? . 0) q eq-hash-code)) q (21220 . 3)) ((c def c (c (? . 0) q eqv?)) q (20261 . 4)) ((c form c (c (? . 3) q provide)) q (5573 . 24)) ((c def c (c (? . 7) q unsafe-assert-unreachable)) q (517617 . 2)) ((c def c (c (? . 0) q procedure-arity-includes?)) q (160022 . 5)) ((c def c (c (? . 29) q dict-values)) q (142282 . 3)) ((c def c (c (? . 4) q file-type-bits)) q (461007 . 2)) ((c form c (c (? . 42) q in-generator)) q (138550 . 5)) ((c form c (c (? . 3) q lib)) q (5210 . 2)) ((c def c (c (? . 0) q exn:fail:contract:variable-id)) c (? . 93)) ((c form c (c (? . 3) q submod)) q (5390 . 4)) ((c def c (c (? . 20) q set-empty?)) q (152911 . 3)) ((c form c (c (? . 25) q define-unit/contract)) q (199388 . 15)) ((c def c (c (? . 12) q prop:match-expander)) q (246841 . 2)) ((c form c (c (? . 0) q set!)) q (14402 . 2)) ((c def c (c (? . 0) q make-weak-hasheq)) q (117290 . 4)) ((c def c (c (? . 0) q call-with-composable-continuation)) q (265853 . 6)) ((c def c (c (? . 43) q syntax-local-eval)) q (320088 . 7)) ((c def c (c (? . 44) q pre-expand-export)) q (311299 . 4)) ((c def c (c (? . 7) q unsafe-fxpopcount32)) q (493861 . 3)) ((c def c (c (? . 0) q current-readtable)) q (365811 . 4)) ((c def c (c (? . 0) q caddar)) q (98410 . 3)) ((c form c (c (? . 2) q reset)) q (268042 . 2)) ((c def c (c (? . 0) q expand-to-top-form)) q (316186 . 4)) ((c def c (c (? . 1) q input-port-append)) q (338200 . 7)) ((c def c (c (? . 0) q quotient)) q (24395 . 4)) ((c def c (c (? . 15) q fxpopcount16)) q (39615 . 3)) ((c def c (c (? . 0) q namespace-symbol->identifier)) q (382398 . 3)) ((c def c (c (? . 0) q load-extension)) q (389561 . 3)) ((c form c (c (? . 37) q let-syntaxes)) q (12362 . 2)) ((c def c (c (? . 7) q unsafe-bytes->immutable-bytes!)) q (501662 . 4)) ((c def c (c (? . 0) q cadar)) q (97318 . 3)) ((c def c (c (? . 14) q contract-random-generate-get-current-environment)) q (245041 . 3)) ((c form c (c (? . 43) q define/with-syntax)) q (318883 . 4)) ((c def c (c (? . 15) q fxrshift)) q (39356 . 4)) ((c def c (c (? . 0) q dynamic-require)) q (398783 . 7)) ((c def c (c (? . 0) q use-compiled-file-check)) q (390995 . 4)) ((c def c (c (? . 45) q port?)) q (321402 . 3)) ((c def c (c (? . 0) q single-flonum?)) q (23315 . 3)) ((c def c (c (? . 0) q exn:fail:contract?)) c (? . 46)) ((c def c (c (? . 0) q delete-file)) q (446248 . 3)) ((c def c (c (? . 36) q pretty-display)) q (371612 . 5)) ((c def c (c (? . 0) q thread-send)) q (273798 . 6)) ((c def c (c (? . 0) q hash-for-each)) q (122061 . 5)) ((c def c (c (? . 0) q procedure-specialize)) q (163436 . 3)) ((c def c (c (? . 20) q set->list)) q (154748 . 3)) ((c def c (c (? . 17) q set-eval-handler)) q (428439 . 4)) ((c form c (c (? . 0) q #%variable-reference)) q (10973 . 4)) ((c form c (c (? . 12) q match-lambda*)) q (246146 . 2)) ((c def c (c (? . 0) q caaadr)) q (97910 . 3)) ((c def c (c (? . 11) q fx->extfl)) q (44671 . 3)) ((c def c (c (? . 17) q evaluator-alive?)) q (427876 . 3)) ((c def c (c (? . 0) q abs)) q (24832 . 3)) ((c form c (c (? . 47) q trait-exclude-field)) q (184518 . 2)) ((c def c (c (? . 4) q user-execute-bit)) q (461531 . 2)) ((c def c (c (? . 0) q list?)) q (93123 . 3)) ((c form c (c (? . 24) q flat-murec-contract)) q (207401 . 2)) ((c def c (c (? . 7) q unsafe-fxmodulo)) q (493209 . 4)) ((c def c (c (? . 3) q exn:fail:contract:non-fixnum-result)) c (? . 78)) ((c def c (c (? . 0) q syntax-transforming?)) q (307654 . 2)) ((c form c (c (? . 3) q for-space)) q (7169 . 2)) ((c def c (c (? . 15) q fixnum-for-every-system?)) q (40692 . 3)) ((c form c (c (? . 24) q ->)) q (208039 . 12)) ((c def c (c (? . 19) q in-slice)) q (135782 . 4)) ((c def c (c (? . 0) q syntax-position)) q (289528 . 3)) ((c def c (c (? . 0) q string-locale-ci<?)) q (51136 . 4)) ((c def c (c (? . 30) q fltan)) q (35791 . 3)) ((c form c (c (? . 53) q define-struct/contract)) q (216656 . 6)) ((c def c (c (? . 48) q collapsible-leaf/c?)) c (? . 49)) ((c def c (c (? . 0) q chaperone-continuation-mark-key)) q (413710 . 13)) ((c form c (c (? . 144) q hash/dc)) q (206637 . 7)) ((c def c (c (? . 0) q make-file-or-directory-link)) q (448700 . 4)) ((c def c (c (? . 0) q pipe-content-length)) q (330912 . 3)) ((c def c (c (? . 3) q make-exn:fail:contract:continuation)) c (? . 50)) ((c def c (c (? . 37) q call/ec)) q (266220 . 3)) ((c def c (c (? . 17) q get-uncovered-expressions)) q (429192 . 7)) ((c form c (c (? . 51) q stream-cons)) q (136185 . 5)) ((c def c (c (? . 7) q unsafe-box*-cas!)) q (499457 . 5)) ((c def c (c (? . 0) q regexp-max-lookbehind)) q (76159 . 3)) ((c def c (c (? . 0) q syntax-disarm)) q (315329 . 4)) ((c def c (c (? . 0) q angle)) q (27160 . 3)) ((c form c (c (? . 37) q when)) q (14326 . 2)) ((c def c (c (? . 8) q compose)) q (158777 . 3)) ((c def c (c (? . 3) q regexp-replace*)) q (91066 . 15)) ((c def c (c (? . 0) q read-bytes-avail!/enable-break)) q (353240 . 10)) ((c def c (c (? . 0) q close-output-port)) q (321520 . 3)) ((c def c (c (? . 0) q vector*-length)) q (108129 . 3)) ((c def c (c (? . 0) q error-message->adjusted-string)) q (262712 . 9)) ((c def c (c (? . 0) q syntax-local-apply-transformer)) q (302247 . 11)) ((c def c (c (? . 0) q current-thread)) q (272729 . 2)) ((c def c (c (? . 0) q inspector?)) q (417156 . 3)) ((c def c (c (? . 0) q flonum?)) q (23202 . 3)) ((c form c (c (? . 3) q for*/or)) q (17215 . 2)) ((c def c (c (? . 20) q list->weak-seteqv)) q (149877 . 4)) ((c form c (c (? . 12) q ==)) q (247448 . 3)) ((c def c (c (? . 84) q immutable-string?)) q (22075 . 3)) ((c form c (c (? . 3) q #%plain-app)) q (11162 . 3)) ((c def c (c (? . 15) q fxnot)) q (39228 . 3)) ((c def c (c (? . 114) q parse-command-line)) q (490487 . 15)) ((c def c (c (? . 0) q struct:exn:fail:contract:arity)) c (? . 102)) ((c def c (c (? . 44) q export-orig-stx)) c (? . 65)) ((c def c (c (? . 4) q display-to-file)) q (451922 . 11)) ((c def c (c (? . 0) q print-syntax-width)) q (368983 . 5)) ((c def c (c (? . 52) q simple-form-path)) q (444940 . 3)) ((c def c (c (? . 0) q make-ephemeron-hasheq)) q (117906 . 4)) ((c form c (c (? . 0) q #%datum)) q (10888 . 2)) ((c def c (c (? . 20) q set=?)) q (154467 . 4)) ((c form c (c (? . 53) q struct/contract)) q (216331 . 6)) ((c def c (c (? . 0) q magnitude)) q (27077 . 3)) ((c def c (c (? . 0) q current-inexact-monotonic-milliseconds)) q (482646 . 2)) ((c def c (c (? . 0) q find-system-path)) q (445356 . 3)) ((c def c (c (? . 0) q hasheq)) q (116007 . 5)) ((c def c (c (? . 0) q >)) q (25886 . 4)) ((c def c (c (? . 20) q set-subtract)) q (154031 . 4)) ((c def c (c (? . 17) q call-with-custodian-shutdown)) c (? . 82)) ((c def c (c (? . 0) q peek-bytes-avail!*)) q (355753 . 14)) ((c def c (c (? . 10) q contract-projection)) q (238189 . 3)) ((c def c (c (? . 0) q make-directory)) q (449342 . 4)) ((c def c (c (? . 35) q arity=?)) q (164654 . 4)) ((c def c (c (? . 0) q syntax-tainted?)) q (315033 . 3)) ((c form c (c (? . 54) q splicing-letrec-values)) q (313944 . 2)) ((c def c (c (? . 8) q remw)) q (94805 . 4)) ((c form c (c (? . 3) q all-defined-out)) q (6482 . 2)) ((c def c (c (? . 6) q call-with-break-parameterization)) q (271951 . 5)) ((c form c (c (? . 6) q parameterize)) q (279824 . 5)) ((c def c (c (? . 0) q struct->vector)) q (173156 . 4)) ((c def c (c (? . 69) q async-channel-get)) q (277705 . 3)) ((c def c (c (? . 15) q fx>)) q (40195 . 4)) ((c def c (c (? . 0) q raise-arity-error)) q (252714 . 9)) ((c def c (c (? . 0) q exn:break?)) c (? . 55)) ((c def c (c (? . 22) q correlated-span)) q (437328 . 3)) ((c def c (c (? . 0) q continuation-mark-key?)) q (271411 . 3)) ((c def c (c (? . 6) q call/cc)) q (265665 . 5)) ((c def c (c (? . 15) q fxlshift)) q (39280 . 4)) ((c def c (c (? . 0) q prop:custom-print-quotable)) q (377061 . 2)) ((c def c (c (? . 20) q set-copy)) q (153311 . 3)) ((c form c (c (? . 25) q invoke-unit/infer)) q (196948 . 5)) ((c def c (c (? . 7) q unsafe-flsin)) q (496270 . 3)) ((c def c (c (? . 0) q pseudo-random-generator->vector)) q (29010 . 4)) ((c def c (c (? . 16) q >=/c)) q (201997 . 3)) ((c def c (c (? . 13) q remf)) q (106119 . 4)) ((c def c (c (? . 0) q prop:impersonator-of)) q (407315 . 2)) ((c def c (c (? . 0) q hash)) q (115731 . 5)) ((c def c (c (? . 17) q get-error-output)) c (? . 79)) ((c def c (c (? . 0) q error-contract->adjusted-string)) q (263071 . 5)) ((c def c (c (? . 3) q with-input-from-file)) q (328230 . 7)) ((c def c (c (? . 0) q vector-cas!)) q (108563 . 6)) ((c form c (c (? . 20) q for*/weak-seteqv)) q (151280 . 2)) ((c form c (c (? . 56) q redirect-generics)) q (171814 . 4)) ((c def c (c (? . 5) q class-unseal)) q (192327 . 5)) ((c form c (c (? . 3) q for*/vector)) q (16808 . 2)) ((c def c (c (? . 11) q extfl->floating-point-bytes)) q (46840 . 10)) ((c def c (c (? . 95) q unit-static-init-dependencies)) q (200548 . 7)) ((c def c (c (? . 16) q procedure-arity-includes/c)) q (206209 . 3)) ((c def c (c (? . 17) q sandbox-input)) q (422464 . 12)) ((c def c (c (? . 3) q exn:fail:syntax:missing-module)) c (? . 101)) ((c def c (c (? . 0) q compile-enforce-module-constants)) q (392380 . 4)) ((c def c (c (? . 0) q read-byte)) q (351050 . 3)) ((c def c (c (? . 3) q make-exn:fail:out-of-memory)) c (? . 99)) ((c def c (c (? . 29) q dict-empty?)) q (141904 . 3)) ((c def c (c (? . 0) q print-as-expression)) q (368881 . 4)) ((c def c (c (? . 0) q read-syntax-accept-graph)) q (364903 . 4)) ((c def c (c (? . 17) q put-input)) q (428740 . 6)) ((c def c (c (? . 3) q in-hash-keys)) q (127437 . 6)) ((c form c (c (? . 3) q for)) q (14464 . 18)) ((c def c (c (? . 0) q exn:fail:read?)) c (? . 107)) ((c def c (c (? . 0) q syntax-local-make-delta-introducer)) q (307404 . 3)) ((c def c (c (? . 16) q rename-contract)) q (239329 . 4)) ((c def c (c (? . 38) q generate-temporaries)) q (293126 . 3)) ((c def c (c (? . 0) q struct:exn:fail:contract:divide-by-zero)) c (? . 121)) ((c def c (c (? . 57) q cosh)) q (33661 . 3)) ((c def c (c (? . 97) q syntax-procedure-alias-property)) q (312635 . 8)) ((c def c (c (? . 0) q datum-intern-literal)) q (292940 . 3)) ((c def c (c (? . 7) q unsafe-stencil-vector-update)) q (503713 . 9)) ((c def c (c (? . 48) q collapsible-ho/c)) c (? . 58)) ((c def c (c (? . 0) q current-security-guard)) q (415334 . 4)) ((c def c (c (? . 14) q raise-contract-error)) q (243526 . 13)) ((c form c (c (? . 12) q match-letrec)) q (246454 . 2)) ((c def c (c (? . 0) q set-port-next-location!)) q (323384 . 9)) ((c def c (c (? . 0) q chaperone?)) q (400881 . 3)) ((c form c (c (? . 5) q super-new)) q (181665 . 2)) ((c def c (c (? . 0) q continuation-prompt-available?)) q (266540 . 5)) ((c form c (c (? . 5) q this%)) q (178566 . 2)) ((c def c (c (? . 51) q stream/c)) q (138223 . 3)) ((c def c (c (? . 0) q append)) q (93712 . 6)) ((c def c (c (? . 132) q gethostname)) q (491209 . 2)) ((c def c (c (? . 0) q ceiling)) q (25268 . 3)) ((c def c (c (? . 20) q set-for-each)) q (154920 . 4)) ((c def c (c (? . 0) q unquoted-printing-string)) q (255605 . 3)) ((c def c (c (? . 11) q extflacos)) q (43941 . 3)) ((c form c (c (? . 74) q contract-first-order-try-less-hard)) q (239481 . 2)) ((c def c (c (? . 0) q >=)) q (25957 . 4)) ((q form ((lib "racket/block.rkt") block)) q (19407 . 2)) ((c def c (c (? . 7) q unsafe-ephemeron-hash-iterate-pair)) q (512594 . 5)) ((q def ((lib "racket/symbol.rkt") symbol->immutable-string)) q (74949 . 3)) ((c def c (c (? . 7) q unsafe-extfltan)) q (514969 . 3)) ((c def c (c (? . 43) q internal-definition-context-apply)) q (319893 . 5)) ((c form c (c (? . 51) q stream)) q (136513 . 5)) ((c form c (c (? . 23) q define-runtime-module-path)) q (450478 . 2)) ((c def c (c (? . 0) q environment-variables-copy)) q (487311 . 3)) ((c def c (c (? . 3) q namespace-anchor?)) q (382054 . 3)) ((c form c (c (? . 0) q #%declare)) q (1921 . 8)) ((c def c (c (? . 13) q split-common-prefix)) q (102789 . 5)) ((c def c (c (? . 4) q display-lines-to-file)) q (452840 . 13)) ((c def c (c (? . 0) q string=?)) q (49178 . 4)) ((c def c (c (? . 57) q tanh)) q (33712 . 3)) ((c form c (c (? . 32) q trace-let)) q (522394 . 2)) ((c def c (c (? . 1) q read-line-evt)) q (348889 . 5)) ((c def c (c (? . 20) q set-first)) q (153058 . 3)) ((c def c (c (? . 13) q list-update)) q (100286 . 5)) ((c form c (c (? . 37) q else)) q (13068 . 2)) ((c def c (c (? . 52) q string->some-system-path)) q (445103 . 4)) ((c def c (c (? . 51) q stream-count)) q (137735 . 4)) ((c def c (c (? . 48) q collapsible-ho/c-latest-ctc)) c (? . 58)) ((c def c (c (? . 0) q use-user-specific-search-paths)) q (520778 . 4)) ((c def c (c (? . 45) q path-add-suffix)) q (443132 . 4)) ((q def ((lib "racket/keyword.rkt") keyword->immutable-string)) q (92744 . 3)) ((c def c (c (? . 3) q in-lines)) q (126906 . 5)) ((c def c (c (? . 48) q collapsible-wrapper-property)) c (? . 136)) ((c def c (c (? . 15) q fx<=)) q (40272 . 4)) ((c def c (c (? . 9) q place-channel-put)) q (283176 . 4)) ((c def c (c (? . 20) q set->stream)) q (153246 . 3)) ((c def c (c (? . 40) q julian/scalinger->string)) q (485983 . 3)) ((c form c (c (? . 38) q syntax-case)) q (284438 . 31)) ((c def c (c (? . 7) q unsafe-extflatan)) q (515175 . 3)) ((c def c (c (? . 10) q collapsible-contract-continuation-mark-key)) q (240124 . 3)) ((c def c (c (? . 40) q date-display-format)) q (484288 . 18)) ((c def c (c (? . 0) q syntax-property)) q (314218 . 9)) ((c def c (c (? . 16) q real-in)) q (202133 . 4)) ((c def c (c (? . 1) q merge-input)) q (341659 . 5)) ((c def c (c (? . 59) q ~.a)) q (60627 . 25)) ((c def c (c (? . 52) q shrink-path-wrt)) q (445235 . 4)) ((c def c (c (? . 0) q thread?)) q (272677 . 3)) ((c def c (c (? . 21) q prop:require-transformer)) q (309813 . 2)) ((c def c (c (? . 60) q prop:struct-info)) q (174973 . 2)) ((c form c (c (? . 25) q unit/new-import-export)) q (197710 . 6)) ((c def c (c (? . 0) q regexp-replace)) q (90430 . 15)) ((c form c (c (? . 3) q rename-in)) q (4727 . 2)) ((c def c (c (? . 7) q unsafe-u16vector-set!)) q (502873 . 5)) ((c def c (c (? . 20) q in-weak-set)) q (151528 . 3)) ((c def c (c (? . 0) q cddadr)) q (99110 . 3)) ((c def c (c (? . 20) q set-map)) q (154809 . 4)) ((c def c (c (? . 0) q exp)) q (26294 . 3)) ((c def c (c (? . 0) q string-normalize-nfkc)) q (50650 . 3)) ((c form c (c (? . 24) q flat-rec-contract)) q (207345 . 2)) ((c form c (c (? . 3) q for*/product)) q (17340 . 2)) ((c def c (c (? . 3) q collection-file-path)) q (518814 . 16)) ((c def c (c (? . 20) q proper-subset?)) q (154649 . 4)) ((c def c (c (? . 7) q unsafe-flexp)) q (496686 . 3)) ((c def c (c (? . 0) q subprocess?)) q (473554 . 3)) ((c def c (c (? . 0) q thread-rewind-receive)) q (274113 . 3)) ((c form c (c (? . 29) q gen:dict)) q (139284 . 2)) ((c form c (c (? . 20) q for*/weak-set)) q (151170 . 2)) ((c def c (c (? . 113) q vector-immutable/c)) q (203469 . 3)) ((c def c (c (? . 61) q s-exp->fasl)) q (380227 . 14)) ((c def c (c (? . 0) q subprocess-pid)) q (473458 . 3)) ((c def c (c (? . 20) q list->seteq)) q (149138 . 3)) ((c def c (c (? . 7) q unsafe-flacos)) q (496507 . 3)) ((c def c (c (? . 3) q in-vector)) q (125910 . 6)) ((c def c (c (? . 7) q unsafe-cdr)) q (498277 . 3)) ((c def c (c (? . 0) q module->exports)) q (400015 . 7)) ((c form c (c (? . 3) q rename-out)) q (6547 . 2)) ((c form c (c (? . 5) q augment-final*)) q (179681 . 2)) ((c def c (c (? . 61) q fasl->s-exp)) q (380825 . 9)) ((c def c (c (? . 11) q extflceiling)) q (43565 . 3)) ((c def c (c (? . 0) q port-display-handler)) q (370100 . 6)) ((c def c (c (? . 0) q regexp-match?)) q (80713 . 13)) ((c def c (c (? . 0) q file-stream-buffer-mode)) q (322419 . 6)) ((c form c (c (? . 51) q stream*)) q (136616 . 2)) ((c def c (c (? . 0) q box?)) q (114540 . 3)) ((c form c (c (? . 2) q cupto)) q (268838 . 2)) ((c def c (c (? . 0) q impersonate-vector)) q (402759 . 15)) ((c def c (c (? . 17) q call-with-deep-time-limit)) q (429987 . 4)) ((c def c (c (? . 62) q process/ports)) q (477073 . 11)) ((c def c (c (? . 0) q symbol<?)) q (74851 . 4)) ((c def c (c (? . 0) q bytes->string/latin-1)) q (67092 . 9)) ((c def c (c (? . 0) q prop:liberal-define-context)) q (309326 . 2)) ((c def c (c (? . 3) q make-exn:fail:filesystem:errno)) c (? . 63)) ((c def c (c (? . 26) q udp-send-ready-evt)) q (468683 . 3)) ((c def c (c (? . 0) q symbol-unreadable?)) q (74413 . 3)) ((c def c (c (? . 11) q extfl<)) q (42943 . 4)) ((c form c (c (? . 5) q new)) q (181440 . 2)) ((c def c (c (? . 5) q interface?)) q (189815 . 3)) ((c def c (c (? . 0) q prop:output-port)) q (331059 . 2)) ((c def c (c (? . 3) q in-immutable-hash-keys)) q (129229 . 3)) ((c form c (c (? . 3) q for/product)) q (15765 . 2)) ((c def c (c (? . 17) q kill-evaluator)) q (427969 . 3)) ((c def c (c (? . 5) q externalizable<%>)) q (189600 . 2)) ((c def c (c (? . 0) q subprocess-group-enabled)) q (473789 . 4)) ((c def c (c (? . 0) q fprintf)) q (367525 . 5)) ((c def c (c (? . 36) q pretty-print-.-symbol-without-bars)) q (372542 . 4)) ((c def c (c (? . 15) q fx>=)) q (40350 . 4)) ((c form c (c (? . 38) q ...)) q (289061 . 2)) ((c form c (c (? . 25) q define-compound-unit/infer)) q (196650 . 5)) ((c def c (c (? . 42) q sequence->generator)) q (138716 . 3)) ((c def c (c (? . 20) q set-clear!)) q (153561 . 3)) ((c def c (c (? . 0) q cdaddr)) q (98910 . 3)) ((c def c (c (? . 0) q make-string)) q (47326 . 4)) ((c def c (c (? . 64) q tcp-accept)) q (462933 . 3)) ((c def c (c (? . 0) q mpair?)) q (107083 . 3)) ((c def c (c (? . 7) q unsafe-extflvector-length)) q (515674 . 3)) ((c def c (c (? . 29) q dict-update)) q (141272 . 8)) ((c def c (c (? . 0) q equal-always-hash-code)) q (20944 . 3)) ((c def c (c (? . 7) q unsafe-extfl<=)) q (514186 . 4)) ((c def c (c (? . 45) q rationalize)) q (25579 . 4)) ((c def c (c (? . 28) q string-join)) q (52027 . 11)) ((c def c (c (? . 0) q namespace-base-phase)) q (382481 . 3)) ((c def c (c (? . 117) q chaperone-struct-unsafe-undefined)) q (517993 . 3)) ((c form c (c (? . 2) q set)) q (268800 . 2)) ((c def c (c (? . 5) q make-generic)) q (183296 . 4)) ((c def c (c (? . 0) q current-print)) q (391752 . 4)) ((c def c (c (? . 0) q port-commit-peeked)) q (359241 . 6)) ((c def c (c (? . 22) q instance-data)) q (435569 . 3)) ((c form c (c (? . 3) q struct)) q (164979 . 33)) ((c def c (c (? . 48) q struct:collapsible-count-property)) c (? . 119)) ((c def c (c (? . 44) q export-protect?)) c (? . 65)) ((c def c (c (? . 3) q hash-values)) q (121715 . 4)) ((c def c (c (? . 13) q group-by)) q (105875 . 5)) ((c def c (c (? . 17) q make-module-evaluator)) c (? . 130)) ((c def c (c (? . 0) q expand-once)) q (315913 . 4)) ((c def c (c (? . 0) q exn:fail:syntax-exprs)) c (? . 66)) ((c def c (c (? . 8) q remove)) q (94550 . 5)) ((c def c (c (? . 0) q handle-evt?)) q (275504 . 3)) ((c def c (c (? . 13) q dropf)) q (101589 . 4)) ((c def c (c (? . 3) q make-exn:fail:read:eof)) c (? . 92)) ((c def c (c (? . 33) q vector-argmin)) q (111575 . 4)) ((c form c (c (? . 31) q delay/strict)) q (263914 . 2)) ((c def c (c (? . 0) q read-syntax/recursive)) q (363261 . 11)) ((c form c (c (? . 37) q quasiquote)) q (19246 . 2)) ((c def c (c (? . 0) q filesystem-change-evt-cancel)) q (450002 . 3)) ((c def c (c (? . 0) q module-path-index-resolve)) q (395712 . 7)) ((c form c (c (? . 35) q thunk*)) q (163913 . 2)) ((c def c (c (? . 1) q port->string)) q (336187 . 4)) ((c def c (c (? . 0) q make-bytes)) q (64419 . 4)) ((c form c (c (? . 2) q prompt-at)) q (267941 . 2)) ((c def c (c (? . 52) q normalize-path)) q (444592 . 5)) ((c form c (c (? . 12) q match-let)) q (246220 . 2)) ((c def c (c (? . 51) q stream-take)) q (137076 . 4)) ((c form c (c (? . 6) q with-handlers)) q (256046 . 3)) ((c def c (c (? . 7) q unsafe-flrandom)) q (497622 . 3)) ((c def c (c (? . 0) q namespace-attach-module-declaration)) q (385120 . 7)) ((c def c (c (? . 0) q raise-arguments-error*)) q (250413 . 12)) ((c def c (c (? . 0) q raise-mismatch-error)) q (252479 . 8)) ((c form c (c (? . 25) q invoke-unit)) q (194901 . 3)) ((c form c (c (? . 25) q tag)) q (194800 . 3)) ((c def c (c (? . 20) q set-union!)) q (153726 . 4)) ((c def c (c (? . 9) q dynamic-place*)) q (282198 . 14)) ((c def c (c (? . 3) q open-input-file)) q (323866 . 7)) ((c form c (c (? . 67) q class/c)) q (184706 . 28)) ((c def c (c (? . 11) q extflsin)) q (43696 . 3)) ((c def c (c (? . 24) q failure-result/c)) q (239702 . 2)) ((c def c (c (? . 45) q displayln)) q (367239 . 4)) ((c form c (c (? . 45) q define-syntax-rule)) q (289006 . 2)) ((c def c (c (? . 20) q generic-set?)) q (151592 . 3)) ((c def c (c (? . 10) q get/build-late-neg-projection)) q (239857 . 4)) ((c def c (c (? . 7) q unsafe-ephemeron-hash-iterate-key)) q (511192 . 5)) ((c def c (c (? . 21) q import)) c (? . 68)) ((c def c (c (? . 0) q byte-regexp)) q (75584 . 6)) ((c form c (c (? . 2) q control-at)) q (267989 . 2)) ((c def c (c (? . 69) q async-channel-put-evt)) q (277947 . 4)) ((c def c (c (? . 26) q udp-bound?)) q (468533 . 3)) ((c def c (c (? . 1) q transplant-input-port)) q (345035 . 19)) ((c def c (c (? . 3) q arity-at-least)) c (? . 70)) ((c def c (c (? . 3) q exn:fail)) c (? . 122)) ((c form c (c (? . 25) q define-signature)) q (193514 . 25)) ((c def c (c (? . 0) q char-lower-case?)) q (72844 . 3)) ((c form c (c (? . 32) q trace)) q (522162 . 2)) ((c form c (c (? . 3) q for*/list)) q (16651 . 2)) ((c form c (c (? . 25) q define-unit/new-import-export)) q (197891 . 6)) ((c form c (c (? . 3) q for/last)) q (16069 . 2)) ((c form c (c (? . 140) q contract-struct)) q (214312 . 2)) ((c def c (c (? . 0) q prop:custom-write)) q (376820 . 2)) ((c form c (c (? . 5) q class/derived)) q (180595 . 5)) ((c def c (c (? . 0) q special-comment-value)) q (376712 . 3)) ((c def c (c (? . 0) q semaphore-wait/enable-break)) q (276596 . 3)) ((c def c (c (? . 33) q vector-sort!)) q (112684 . 13)) ((c form c (c (? . 37) q let*)) q (11955 . 2)) ((c form c (c (? . 5) q rename-super)) q (179316 . 2)) ((c def c (c (? . 44) q make-export)) c (? . 65)) ((c def c (c (? . 0) q vector-copy!)) q (109106 . 11)) ((c def c (c (? . 13) q inclusive-range)) q (104846 . 5)) ((c def c (c (? . 0) q struct-type?)) q (173307 . 3)) ((c form c (c (? . 25) q define-signature-form)) q (198344 . 4)) ((c def c (c (? . 71) q for-each)) q (94150 . 4)) ((c form c (c (? . 3) q planet)) q (5267 . 5)) ((c def c (c (? . 15) q fx-/wraparound)) q (39790 . 4)) ((c def c (c (? . 8) q compose1)) q (158848 . 3)) ((c def c (c (? . 0) q <)) q (25743 . 4)) ((c def c (c (? . 0) q set-phantom-bytes!)) q (492690 . 4)) ((c form c (c (? . 0) q define-syntaxes)) q (13679 . 2)) ((c def c (c (? . 0) q bitwise-not)) q (27441 . 3)) ((c form c (c (? . 38) q with-syntax)) q (285972 . 3)) ((c def c (c (? . 72) q blame-replace-negative)) q (226203 . 4)) ((c def c (c (? . 45) q channel-get)) q (275880 . 3)) ((c def c (c (? . 26) q udp-multicast-ttl)) q (471562 . 3)) ((c def c (c (? . 3) q in-value)) q (132169 . 3)) ((c def c (c (? . 0) q bytes-utf-8-length)) q (68522 . 7)) ((c def c (c (? . 21) q struct:import)) c (? . 68)) ((c def c (c (? . 11) q extfltruncate)) q (43630 . 3)) ((c def c (c (? . 0) q variable-reference?)) q (386578 . 3)) ((c def c (c (? . 0) q number->string)) q (30230 . 4)) ((c def c (c (? . 15) q fxand)) q (39057 . 3)) ((c def c (c (? . 0) q hash-ref)) q (119201 . 7)) ((c def c (c (? . 17) q call-with-trusted-sandbox-configuration)) q (422144 . 3)) ((c form c (c (? . 73) q define-provide-syntax)) q (14035 . 3)) ((c def c (c (? . 0) q custodian?)) q (415463 . 3)) ((c form c (c (? . 20) q for*/seteq)) q (150327 . 2)) ((c form c (c (? . 142) q lazy-require-syntax)) q (19961 . 5)) ((c def c (c (? . 52) q filename-extension)) q (443880 . 3)) ((c def c (c (? . 0) q syntax-original?)) q (289715 . 3)) ((c form c (c (? . 74) q current-contract-region)) q (217048 . 2)) ((q def ((lib "racket/private/stx.rkt") identifier?)) q (289224 . 3)) ((c def c (c (? . 0) q impersonate-hash)) q (404378 . 22)) ((c def c (c (? . 10) q coerce-contract/f)) q (224284 . 3)) ((c def c (c (? . 11) q extfl->exact-integer)) q (44399 . 3)) ((c def c (c (? . 14) q struct-type-property/c)) q (214540 . 3)) ((c def c (c (? . 1) q call-with-input-bytes)) q (337889 . 4)) ((c def c (c (? . 0) q syntax-local-lift-context)) q (306105 . 2)) ((c def c (c (? . 0) q regexp-match-positions/end)) q (86734 . 16)) ((c def c (c (? . 0) q char-title-case?)) q (72980 . 3)) ((c form c (c (? . 3) q define-namespace-anchor)) q (382017 . 2)) ((c def c (c (? . 0) q peek-byte)) q (357893 . 4)) ((c def c (c (? . 0) q identifier-remove-from-definition-context)) q (304717 . 7)) ((c def c (c (? . 0) q exn:fail:filesystem:errno?)) c (? . 63)) ((c def c (c (? . 29) q dict-iterate-next)) q (140123 . 4)) ((c def c (c (? . 0) q path->directory-path)) q (441542 . 3)) ((c def c (c (? . 30) q flasin)) q (35843 . 3)) ((c def c (c (? . 7) q unsafe-extfl=)) q (513922 . 4)) ((c def c (c (? . 0) q make-reader-graph)) q (106282 . 3)) ((c def c (c (? . 24) q or/c)) q (201457 . 3)) ((c def c (c (? . 51) q stream-andmap)) q (137320 . 4)) ((c def c (c (? . 0) q bytes-copy!)) q (65289 . 11)) ((c def c (c (? . 0) q read-line)) q (351158 . 5)) ((c def c (c (? . 15) q fx=)) q (40041 . 4)) ((c def c (c (? . 0) q string-ci>=?)) q (50039 . 4)) ((c form c (c (? . 54) q splicing-syntax-parameterize)) q (314182 . 2)) ((c def c (c (? . 48) q collapsible-property?)) c (? . 87)) ((q form ((lib "racket/local.rkt") local)) q (12665 . 2)) ((c def c (c (? . 15) q fxlshift/wraparound)) q (39954 . 4)) ((c def c (c (? . 57) q nonnegative-integer?)) q (34434 . 3)) ((c def c (c (? . 0) q print-reader-abbreviations)) q (368765 . 4)) ((c def c (c (? . 40) q date->seconds)) q (484955 . 4)) ((c def c (c (? . 0) q string-ref)) q (47681 . 4)) ((c def c (c (? . 51) q stream-tail)) q (136978 . 4)) ((c def c (c (? . 13) q append-map)) q (104968 . 4)) ((c form c (c (? . 10) q with-contract-continuation-mark)) q (224487 . 3)) ((c def c (c (? . 0) q read-syntax)) q (362822 . 4)) ((c def c (c (? . 62) q system*/exit-code)) q (475400 . 15)) ((c def c (c (? . 0) q hash-iterate-key+value)) q (123407 . 4)) ((c def c (c (? . 0) q syntax-bound-symbols)) q (298651 . 8)) ((c def c (c (? . 0) q continuation-mark-set->context)) q (271547 . 5)) ((c def c (c (? . 3) q in-immutable-hash-values)) q (129460 . 3)) ((c def c (c (? . 3) q random)) q (28019 . 13)) ((c def c (c (? . 0) q namespace-require/copy)) q (384108 . 5)) ((c form c (c (? . 25) q struct/ctc)) q (198514 . 10)) ((c def c (c (? . 44) q expand-export)) q (311163 . 4)) ((c def c (c (? . 0) q current-read-interaction)) q (391593 . 4)) ((c form c (c (? . 24) q recontract-out)) q (215571 . 2)) ((c def c (c (? . 0) q port-closed-evt)) q (321655 . 3)) ((c def c (c (? . 0) q port-writes-special?)) q (362665 . 3)) ((c def c (c (? . 7) q unsafe-immutable-hash-iterate-pair)) q (508578 . 5)) ((c def c (c (? . 0) q primitive-result-arity)) q (163634 . 3)) ((c def c (c (? . 0) q identifier-template-binding)) q (296558 . 12)) ((c def c (c (? . 22) q correlated-column)) q (437119 . 3)) ((c form c (c (? . 0) q module*)) q (1695 . 3)) ((c def c (c (? . 5) q object-interface)) q (190362 . 3)) ((c def c (c (? . 0) q subprocess-status)) q (473194 . 4)) ((c def c (c (? . 26) q udp-send-to*)) q (465360 . 13)) ((c def c (c (? . 0) q custom-print-quotable-accessor)) q (377175 . 2)) ((c def c (c (? . 4) q character-device-type-bits)) q (461243 . 2)) ((c def c (c (? . 0) q chaperone-of?)) q (401022 . 4)) ((c form c (c (? . 75) q provide/contract)) q (215604 . 2)) ((c def c (c (? . 0) q newline)) q (360012 . 3)) ((c def c (c (? . 0) q variable-reference->module-declaration-inspector)) q (387588 . 4)) ((c def c (c (? . 13) q in-permutations)) q (105595 . 3)) ((c def c (c (? . 0) q char-whitespace?)) q (73313 . 3)) ((c def c (c (? . 0) q struct-constructor-procedure?)) q (173365 . 3)) ((c def c (c (? . 19) q in-syntax)) q (135720 . 3)) ((c def c (c (? . 21) q import-local-id)) c (? . 68)) ((c def c (c (? . 0) q log-level-evt)) q (480679 . 3)) ((c def c (c (? . 7) q unsafe-set-immutable-cdr!)) q (499034 . 4)) ((c form c (c (? . 12) q define-match-expander)) q (246745 . 3)) ((c def c (c (? . 76) q make-chaperone-contract)) q (219800 . 32)) ((c def c (c (? . 57) q nonpositive-integer?)) q (34368 . 3)) ((c form c (c (? . 20) q for*/mutable-setalw)) q (150890 . 2)) ((c def c (c (? . 69) q chaperone-async-channel)) q (278595 . 13)) ((c form c (c (? . 24) q ->i)) q (209073 . 60)) ((c def c (c (? . 0) q environment-variables?)) q (486081 . 3)) ((c def c (c (? . 77) q phase+space-shift?)) q (320836 . 3)) ((c def c (c (? . 29) q dict-can-functional-set?)) q (139214 . 3)) ((c def c (c (? . 30) q fl/)) q (34740 . 4)) ((c form c (c (? . 5) q augment*)) q (179611 . 2)) ((c form c (c (? . 54) q splicing-letrec-syntax)) q (314001 . 2)) ((c def c (c (? . 26) q udp-send*)) q (465813 . 6)) ((c form c (c (? . 12) q match-lambda)) q (246111 . 2)) ((c def c (c (? . 17) q sandbox-make-environment-variables)) q (427601 . 5)) ((c def c (c (? . 3) q in-hash-pairs)) q (127759 . 6)) ((c def c (c (? . 0) q procedure-extract-target)) q (162834 . 3)) ((c form c (c (? . 3) q for*/fold/derived)) q (17920 . 4)) ((c def c (c (? . 0) q prop:authentic)) q (407368 . 2)) ((c def c (c (? . 0) q string-copy)) q (48114 . 3)) ((c form c (c (? . 24) q case->)) q (212559 . 9)) ((c def c (c (? . 4) q user-write-bit)) q (461497 . 2)) ((c form c (c (? . 38) q syntax/loc)) q (287184 . 14)) ((c def c (c (? . 5) q field-names)) q (191235 . 3)) ((c def c (c (? . 30) q make-shared-flvector)) q (38461 . 4)) ((c def c (c (? . 0) q procedure-arity?)) q (159877 . 3)) ((c def c (c (? . 0) q date-time-zone-offset)) c (? . 27)) ((c def c (c (? . 0) q path-convention-type)) q (440079 . 3)) ((c def c (c (? . 35) q arity-includes?)) q (164748 . 4)) ((c def c (c (? . 0) q bytes?)) q (64367 . 3)) ((c def c (c (? . 0) q struct:exn:fail:read:non-char)) c (? . 123)) ((c form c (c (? . 5) q mixin)) q (183422 . 3)) ((c def c (c (? . 0) q make-hasheq)) q (116707 . 4)) ((c def c (c (? . 57) q infinite?)) q (34187 . 3)) ((c def c (c (? . 0) q struct:exn:fail:contract:non-fixnum-result)) c (? . 78)) ((c form c (c (? . 43) q with-disappeared-uses)) q (319423 . 4)) ((c def c (c (? . 3) q syntax-local-certifier)) q (307502 . 5)) ((c form c (c (? . 5) q define/augment-final)) q (180423 . 3)) ((c def c (c (? . 13) q filter-map)) q (104397 . 4)) ((c def c (c (? . 7) q unsafe-weak-hash-iterate-value)) q (509650 . 4)) ((c def c (c (? . 17) q get-output)) c (? . 79)) ((c def c (c (? . 0) q equal-secondary-hash-code)) q (20874 . 3)) ((c def c (c (? . 36) q pretty-print-remap-stylable)) q (373527 . 5)) ((c def c (c (? . 0) q namespace-call-with-registry-lock)) q (385814 . 5)) ((c form c (c (? . 0) q begin-for-syntax)) q (14289 . 2)) ((c def c (c (? . 15) q fx-)) q (38641 . 4)) ((c def c (c (? . 4) q file->list)) q (450992 . 5)) ((c def c (c (? . 7) q unsafe-extfl/)) q (513764 . 4)) ((c def c (c (? . 0) q exact?)) q (23696 . 3)) ((c def c (c (? . 13) q drop-right)) q (101865 . 4)) ((c def c (c (? . 8) q assq)) q (96673 . 4)) ((c def c (c (? . 40) q date*->seconds)) q (485074 . 4)) ((c def c (c (? . 7) q unsafe-weak-hash-iterate-first)) q (509026 . 3)) ((c def c (c (? . 0) q file-or-directory-identity)) q (447808 . 5)) ((c def c (c (? . 67) q is-a?/c)) q (189053 . 3)) ((c def c (c (? . 6) q hash-update)) q (120310 . 9)) ((c form c (c (? . 6) q log-error)) q (480818 . 3)) ((c def c (c (? . 0) q hash-weak?)) q (115602 . 3)) ((c def c (c (? . 0) q string-locale-upcase)) q (51344 . 3)) ((c def c (c (? . 0) q bytes->path-element)) q (439502 . 8)) ((c def c (c (? . 3) q make-exn:break:hang-up)) c (? . 80)) ((c def c (c (? . 0) q current-memory-use)) q (492349 . 3)) ((c def c (c (? . 60) q struct-info?)) q (174612 . 3)) ((c def c (c (? . 0) q get-output-bytes)) q (330263 . 9)) ((c def c (c (? . 0) q thread-resume)) q (273041 . 4)) ((c def c (c (? . 0) q open-output-string)) q (330152 . 3)) ((c def c (c (? . 0) q min)) q (24932 . 3)) ((c def c (c (? . 0) q port-next-location)) q (323203 . 6)) ((c def c (c (? . 0) q compile-syntax)) q (392132 . 3)) ((c def c (c (? . 81) q deserialize-module-guard)) q (378350 . 7)) ((c def c (c (? . 0) q exn:fail:user?)) c (? . 83)) ((c def c (c (? . 0) q dump-memory-stats)) q (492476 . 3)) ((c def c (c (? . 0) q even?)) q (23589 . 3)) ((c def c (c (? . 9) q prop:place-location)) q (283538 . 2)) ((c def c (c (? . 3) q in-inclusive-range)) q (125572 . 5)) ((c def c (c (? . 3) q regexp-try-match)) q (78105 . 14)) ((c def c (c (? . 62) q process)) q (476080 . 9)) ((c form c (c (? . 5) q public*)) q (179388 . 2)) ((c form c (c (? . 124) q syntax-parameterize)) q (313593 . 2)) ((c def c (c (? . 0) q bytes-append)) q (65823 . 3)) ((c def c (c (? . 0) q vector-immutable)) q (107662 . 4)) ((c form c (c (? . 29) q define-custom-hash-types)) q (142905 . 12)) ((c def c (c (? . 24) q unsupplied-arg?)) q (214044 . 3)) ((c form c (c (? . 3) q #%app)) q (11097 . 2)) ((c def c (c (? . 0) q syntax-binding-set)) q (291225 . 2)) ((c def c (c (? . 7) q unsafe-fx-/wraparound)) q (494154 . 4)) ((c def c (c (? . 18) q false)) q (21633 . 2)) ((c def c (c (? . 0) q hash-iterate-next)) q (122460 . 5)) ((c def c (c (? . 7) q unsafe-vector-length)) q (499568 . 3)) ((c def c (c (? . 11) q extflasin)) q (43879 . 3)) ((c def c (c (? . 3) q exn:fail:network)) c (? . 100)) ((c def c (c (? . 11) q extflsqrt)) q (44187 . 3)) ((c def c (c (? . 22) q instance-variable-value)) q (435737 . 7)) ((c def c (c (? . 17) q call-with-killing-threads)) c (? . 82)) ((c def c (c (? . 0) q make-vector)) q (107496 . 4)) ((c def c (c (? . 0) q bytes-fill!)) q (65713 . 4)) ((c def c (c (? . 7) q unsafe-fx-)) q (492893 . 4)) ((c def c (c (? . 0) q uncaught-exception-handler)) q (255907 . 4)) ((c def c (c (? . 13) q argmax)) q (105768 . 4)) ((c def c (c (? . 13) q indexes-where)) q (101078 . 4)) ((c def c (c (? . 0) q impersonator-property?)) q (414382 . 3)) ((c def c (c (? . 0) q print-box)) q (368375 . 4)) ((c def c (c (? . 8) q assf)) q (96780 . 4)) ((c def c (c (? . 0) q byte?)) q (64669 . 3)) ((c def c (c (? . 7) q unsafe-fxquotient)) q (493038 . 4)) ((c form c (c (? . 12) q failure-cont)) q (246723 . 2)) ((c def c (c (? . 0) q memv)) q (95878 . 4)) ((c def c (c (? . 16) q <=/c)) q (201941 . 3)) ((c def c (c (? . 0) q set!-transformer-procedure)) q (299232 . 4)) ((c def c (c (? . 3) q in-weak-hash-pairs)) q (130583 . 3)) ((c def c (c (? . 0) q exn-message)) c (? . 103)) ((q def ((lib "racket/interaction-info.rkt") current-interaction-info)) q (521203 . 5)) ((c def c (c (? . 3) q in-bytes)) q (126382 . 6)) ((c def c (c (? . 139) q hash-union)) q (123863 . 12)) ((c def c (c (? . 45) q find-executable-path)) q (445666 . 7)) ((c def c (c (? . 0) q namespace-require/constant)) q (384330 . 5)) ((c def c (c (? . 22) q hash->linklet-directory)) q (434239 . 3)) ((c def c (c (? . 17) q sandbox-make-code-inspector)) q (427184 . 4)) ((c def c (c (? . 24) q *list/c)) q (204636 . 4)) ((c def c (c (? . 89) q engine)) q (283970 . 3)) ((c def c (c (? . 14) q make-proj-contract)) q (242944 . 15)) ((c form c (c (? . 47) q trait-exclude)) q (184479 . 2)) ((c def c (c (? . 0) q exact-integer?)) q (22889 . 3)) ((c def c (c (? . 0) q system-library-subpath)) q (488051 . 3)) ((c def c (c (? . 7) q unsafe-weak-hash-iterate-key)) q (509272 . 4)) ((c def c (c (? . 0) q read-square-bracket-as-paren)) q (364033 . 4)) ((c def c (c (? . 0) q call-with-continuation-barrier)) q (266457 . 3)) ((c def c (c (? . 0) q path->complete-path)) q (441322 . 5)) ((c def c (c (? . 51) q stream-ref)) q (136885 . 4)) ((c def c (c (? . 0) q read-string!)) q (351899 . 7)) ((c def c (c (? . 0) q open-output-bytes)) q (330042 . 3)) ((c def c (c (? . 52) q find-relative-path)) q (443998 . 12)) ((c def c (c (? . 34) q futures-enabled?)) q (280833 . 2)) ((c def c (c (? . 0) q shared-bytes)) q (66140 . 3)) ((c def c (c (? . 0) q environment-variables-ref)) q (486542 . 5)) ((c def c (c (? . 52) q path-only)) q (444816 . 3)) ((c def c (c (? . 21) q require-transformer?)) q (309870 . 3)) ((c form c (c (? . 6) q with-handlers*)) q (256118 . 3)) ((c def c (c (? . 8) q remv)) q (94735 . 4)) ((c def c (c (? . 0) q use-compiled-file-paths)) q (390557 . 5)) ((c def c (c (? . 0) q free-template-identifier=?)) q (294824 . 4)) ((c def c (c (? . 0) q char-ci>=?)) q (72680 . 4)) ((c form c (c (? . 5) q define/augride)) q (180343 . 3)) ((c def c (c (? . 0) q banner)) q (488222 . 2)) ((c def c (c (? . 0) q make-thread-cell)) q (279125 . 4)) ((c form c (c (? . 5) q inherit)) q (179193 . 2)) ((c def c (c (? . 0) q current-module-declare-name)) q (394793 . 5)) ((c def c (c (? . 10) q has-blame?)) q (238011 . 3)) ((c def c (c (? . 0) q prop:checked-procedure)) q (162979 . 2)) ((c def c (c (? . 0) q syntax-column)) q (289433 . 3)) ((c def c (c (? . 35) q const*)) q (163825 . 3)) ((c form c (c (? . 12) q match/derived)) q (247315 . 2)) ((c def c (c (? . 13) q make-list)) q (100194 . 4)) ((c def c (c (? . 3) q make-exn:fail:user)) c (? . 83)) ((c def c (c (? . 0) q vector->pseudo-random-generator)) q (29144 . 4)) ((c def c (c (? . 0) q struct:exn:fail:filesystem:errno)) c (? . 63)) ((c def c (c (? . 0) q make-parameter)) q (279647 . 5)) ((c def c (c (? . 88) q contract-property?)) q (236554 . 3)) ((c def c (c (? . 0) q exn:fail:contract:continuation?)) c (? . 50)) ((c def c (c (? . 3) q in-range)) q (125408 . 7)) ((c def c (c (? . 2) q call/comp)) q (267436 . 5)) ((c def c (c (? . 0) q impersonate-box)) q (403897 . 12)) ((c def c (c (? . 0) q char-ci<=?)) q (72489 . 4)) ((c def c (c (? . 0) q impersonator-ephemeron)) q (401104 . 3)) ((c def c (c (? . 0) q floor)) q (25185 . 3)) ((c def c (c (? . 28) q string-replace)) q (52930 . 6)) ((c def c (c (? . 0) q break-thread)) q (273235 . 4)) ((c def c (c (? . 84) q mutable-vector?)) q (22260 . 3)) ((c def c (c (? . 30) q fl<)) q (34945 . 4)) ((c def c (c (? . 3) q hash-set*)) q (119049 . 5)) ((c def c (c (? . 3) q in-port)) q (126618 . 4)) ((c def c (c (? . 0) q equal-hash-code/recur)) q (20749 . 4)) ((c def c (c (? . 0) q write-byte)) q (359895 . 4)) ((c form c (c (? . 54) q splicing-let-syntax)) q (313974 . 2)) ((c def c (c (? . 0) q read-accept-reader)) q (365615 . 4)) ((c def c (c (? . 0) q logger?)) q (478913 . 3)) ((c def c (c (? . 0) q write-string)) q (360101 . 7)) ((c def c (c (? . 0) q tan)) q (26530 . 3)) ((c def c (c (? . 81) q make-deserialize-info)) q (379539 . 4)) ((c def c (c (? . 0) q raise-type-error)) q (252194 . 10)) ((c form c (c (? . 10) q contract-pos/neg-doubling)) q (224608 . 2)) ((c def c (c (? . 4) q symbolic-link-type-bits)) q (461077 . 2)) ((c form c (c (? . 47) q trait)) q (183505 . 18)) ((c form c (c (? . 85) q serializable-struct)) q (378632 . 3)) ((c form c (c (? . 5) q define-member-name)) q (180936 . 2)) ((c def c (c (? . 7) q unsafe-fxvector-set!)) q (501925 . 5)) ((c def c (c (? . 0) q bytes->string/locale)) q (66734 . 9)) ((c form c (c (? . 85) q serializable-struct/versions)) q (378896 . 7)) ((c def c (c (? . 0) q caaar)) q (97154 . 3)) ((c def c (c (? . 4) q call-with-atomic-output-file)) q (457193 . 12)) ((c form c (c (? . 5) q member-name-key)) q (180978 . 2)) ((c def c (c (? . 4) q file->string)) q (450567 . 4)) ((c def c (c (? . 7) q unsafe-fx*)) q (492976 . 3)) ((c def c (c (? . 0) q single-flonum-available?)) q (23375 . 2)) ((c def c (c (? . 11) q extfl=)) q (42862 . 4)) ((c def c (c (? . 3) q procedure-rename)) q (158920 . 5)) ((c def c (c (? . 0) q void)) q (164901 . 3)) ((c form c (c (? . 3) q for/foldr/derived)) q (18054 . 4)) ((c form c (c (? . 5) q augride)) q (179060 . 2)) ((c def c (c (? . 0) q eqv-hash-code)) q (21277 . 3)) ((c def c (c (? . 48) q collapsible-leaf/c-contract-list)) c (? . 49)) ((c def c (c (? . 3) q with-output-to-file)) q (328502 . 18)) ((c form c (c (? . 3) q for/hasheq)) q (15383 . 2)) ((c def c (c (? . 3) q in-hash)) q (127288 . 6)) ((c def c (c (? . 1) q dup-input-port)) q (343762 . 4)) ((c def c (c (? . 0) q char->integer)) q (71498 . 3)) ((c form c (c (? . 37) q let)) q (11856 . 3)) ((c def c (c (? . 16) q </c)) q (201831 . 3)) ((c def c (c (? . 0) q plumber-flush-handle?)) q (419111 . 3)) ((c def c (c (? . 115) q with-logging-to-port)) q (482083 . 12)) ((c form c (c (? . 5) q class*)) q (175819 . 59)) ((c def c (c (? . 7) q unsafe-extflround)) q (514548 . 3)) ((c def c (c (? . 3) q in-values-sequence)) q (132500 . 3)) ((c def c (c (? . 0) q vector->values)) q (109538 . 5)) ((c def c (c (? . 0) q char-blank?)) q (73381 . 3)) ((c def c (c (? . 8) q assw)) q (96459 . 4)) ((c def c (c (? . 0) q current-process-milliseconds)) q (483737 . 3)) ((c def c (c (? . 7) q unsafe-flvector-ref)) q (502105 . 4)) ((c def c (c (? . 29) q dict-remove)) q (139931 . 4)) ((c def c (c (? . 36) q pretty-print-current-style-table)) q (373013 . 4)) ((c def c (c (? . 0) q make-weak-box)) q (491285 . 3)) ((c form c (c (? . 0) q define-values)) q (13564 . 2)) ((c def c (c (? . 0) q hash-copy)) q (123775 . 3)) ((c form c (c (? . 5) q private*)) q (179722 . 2)) ((c def c (c (? . 0) q port-try-file-lock?)) q (329412 . 4)) ((c def c (c (? . 86) q syntax-local-require-introduce)) q (13954 . 3)) ((c def c (c (? . 7) q unsafe-flceiling)) q (496081 . 3)) ((c def c (c (? . 0) q struct:arity-at-least)) c (? . 70)) ((c def c (c (? . 0) q set-box!)) q (114762 . 4)) ((c def c (c (? . 0) q vector->list)) q (108778 . 3)) ((c form c (c (? . 24) q ->*)) q (208307 . 26)) ((c def c (c (? . 7) q unsafe-struct*-cas!)) q (504564 . 6)) ((c def c (c (? . 0) q namespace-require/expansion-time)) q (384560 . 6)) ((c def c (c (? . 34) q future?)) q (280928 . 3)) ((c def c (c (? . 32) q current-trace-notify)) q (522476 . 4)) ((c def c (c (? . 30) q flsingle)) q (35632 . 3)) ((c form c (c (? . 5) q define/public-final)) q (179915 . 3)) ((c form c (c (? . 24) q contract-out)) q (214639 . 23)) ((c def c (c (? . 48) q collapsible-property-neg-party)) c (? . 87)) ((c def c (c (? . 88) q prop:contract)) q (227039 . 2)) ((c def c (c (? . 3) q in-mutable-hash-keys)) q (128183 . 3)) ((c def c (c (? . 11) q extflvector?)) q (44820 . 3)) ((c def c (c (? . 2) q abort/cc)) q (267345 . 4)) ((c def c (c (? . 0) q module-compiled-name)) q (396591 . 9)) ((c def c (c (? . 0) q list)) q (93174 . 3)) ((c def c (c (? . 3) q in-ephemeron-hash-values)) q (131278 . 3)) ((c def c (c (? . 0) q bytes-copy)) q (65228 . 3)) ((c def c (c (? . 11) q extflonum?)) q (42366 . 3)) ((c def c (c (? . 45) q channel-put)) q (275998 . 4)) ((c def c (c (? . 0) q phantom-bytes?)) q (492539 . 3)) ((c def c (c (? . 16) q flat-contract-predicate)) q (207645 . 3)) ((c form c (c (? . 24) q ->d)) q (211336 . 34)) ((c def c (c (? . 0) q hash-equal-always?)) q (115347 . 3)) ((c def c (c (? . 0) q char-numeric?)) q (73048 . 3)) ((c form c (c (? . 3) q struct/derived)) q (166313 . 5)) ((c def c (c (? . 11) q extfl->exact)) q (44535 . 3)) ((c form c (c (? . 42) q generator)) q (138338 . 6)) ((c def c (c (? . 0) q current-inspector)) q (417623 . 4)) ((c def c (c (? . 0) q make-special-comment)) q (376576 . 3)) ((c form c (c (? . 3) q only-in)) q (4587 . 2)) ((c form c (c (? . 67) q object/c)) q (186038 . 11)) ((c def c (c (? . 0) q exn:fail:contract:non-fixnum-result?)) c (? . 78)) ((c def c (c (? . 0) q thread-group?)) q (416976 . 3)) ((c def c (c (? . 0) q variable-reference->module-source)) q (387215 . 4)) ((c form c (c (? . 23) q runtime-require)) q (450440 . 2)) ((c form c (c (? . 0) q if)) q (12758 . 2)) ((c def c (c (? . 89) q engine-run)) q (284109 . 4)) ((c def c (c (? . 0) q char-punctuation?)) q (73179 . 3)) ((c def c (c (? . 0) q port-file-unlock)) q (329542 . 3)) ((c def c (c (? . 0) q peek-string)) q (353690 . 5)) ((c def c (c (? . 0) q string->keyword)) q (92560 . 3)) ((c def c (c (? . 7) q unsafe-fl<)) q (495451 . 4)) ((c def c (c (? . 1) q combine-output)) q (341546 . 4)) ((c def c (c (? . 0) q poll-guard-evt)) q (275093 . 3)) ((c def c (c (? . 0) q make-rectangular)) q (26791 . 4)) ((c form c (c (? . 25) q extends)) q (194886 . 2)) ((c form c (c (? . 51) q stream-lazy)) q (136376 . 3)) ((c form c (c (? . 6) q log-fatal)) q (480746 . 3)) ((c def c (c (? . 8) q reverse)) q (93837 . 3)) ((c def c (c (? . 0) q integer?)) q (22835 . 3)) ((c def c (c (? . 22) q linklet-bundle->hash)) q (434753 . 4)) ((c def c (c (? . 13) q add-between)) q (102948 . 13)) ((c def c (c (? . 13) q first)) q (99535 . 3)) ((c def c (c (? . 0) q denominator)) q (25498 . 3)) ((c def c (c (? . 20) q impersonate-hash-set)) q (155086 . 21)) ((c def c (c (? . 0) q file-position*)) q (322828 . 3)) ((c def c (c (? . 0) q symbol->string)) q (74483 . 3)) ((c def c (c (? . 43) q current-recorded-disappeared-uses)) q (319229 . 5)) ((c form c (c (? . 25) q export)) q (194729 . 2)) ((c def c (c (? . 0) q struct:exn:fail:contract:continuation)) c (? . 50)) ((c form c (c (? . 0) q unquote)) q (19273 . 2)) ((c def c (c (? . 0) q void?)) q (164850 . 3)) ((c def c (c (? . 0) q regexp-match)) q (76280 . 17)) ((c def c (c (? . 36) q pretty-print-size-hook)) q (374336 . 9)) ((c def c (c (? . 0) q special-comment?)) q (376650 . 3)) ((c form c (c (? . 90) q parametric->/c)) q (214105 . 2)) ((c def c (c (? . 1) q regexp-match-evt)) q (350428 . 4)) ((c form c (c (? . 5) q augment)) q (179023 . 2)) ((c def c (c (? . 0) q variable-reference->module-base-phase)) q (387475 . 3)) ((c def c (c (? . 3) q in-mutable-hash-values)) q (128456 . 3)) ((c def c (c (? . 13) q list-prefix?)) q (102353 . 5)) ((c def c (c (? . 3) q regexp-match-exact?)) q (81301 . 4)) ((c def c (c (? . 33) q vector-memv)) q (111879 . 4)) ((c def c (c (? . 0) q regexp-match-peek-immediate)) q (83061 . 15)) ((c def c (c (? . 0) q exn:fail:filesystem:missing-module?)) c (? . 91)) ((c def c (c (? . 44) q prop:provide-transformer)) q (312017 . 2)) ((c def c (c (? . 4) q socket-type-bits)) q (461041 . 2)) ((c def c (c (? . 44) q provide-transformer?)) q (312135 . 3)) ((c def c (c (? . 72) q blame-context)) q (225661 . 3)) ((c def c (c (? . 20) q set?)) q (147534 . 3)) ((c def c (c (? . 34) q fsemaphore-try-wait?)) q (281531 . 3)) ((c def c (c (? . 0) q syntax-local-get-shadower)) q (307209 . 5)) ((c def c (c (? . 3) q procedure->method)) q (159136 . 3)) ((c def c (c (? . 0) q make-struct-type-property)) q (169130 . 19)) ((c def c (c (? . 84) q immutable-box?)) q (22442 . 3)) ((c form c (c (? . 9) q place/context)) q (283874 . 2)) ((c form c (c (? . 3) q struct-out)) q (6692 . 2)) ((c def c (c (? . 0) q expt)) q (26222 . 4)) ((c def c (c (? . 0) q syntax-source)) q (289281 . 3)) ((c form c (c (? . 5) q define-serializable-class*)) q (189335 . 4)) ((c def c (c (? . 0) q string-append-immutable)) q (48795 . 3)) ((c form c (c (? . 3) q :do-in)) q (18596 . 9)) ((c def c (c (? . 30) q flimag-part)) q (36767 . 5)) ((c def c (c (? . 0) q prop:exn:missing-module)) q (262401 . 2)) ((c def c (c (? . 0) q make-pipe)) q (330708 . 6)) ((c def c (c (? . 30) q flceiling)) q (35519 . 3)) ((c def c (c (? . 15) q fx+/wraparound)) q (39708 . 4)) ((c def c (c (? . 67) q mixin-contract)) q (188920 . 2)) ((c def c (c (? . 22) q correlated-property)) q (438464 . 8)) ((c def c (c (? . 3) q syntax-deserialize)) q (317096 . 7)) ((c def c (c (? . 3) q exn:fail:read:eof)) c (? . 92)) ((c def c (c (? . 1) q make-input-port/read-to-peek)) q (338451 . 50)) ((c def c (c (? . 0) q rational?)) q (22780 . 3)) ((c form c (c (? . 37) q cond)) q (12803 . 7)) ((c def c (c (? . 45) q println)) q (367357 . 5)) ((c def c (c (? . 1) q call-with-input-string)) q (337774 . 4)) ((c def c (c (? . 0) q struct:exn:fail:contract:variable)) c (? . 93)) ((c def c (c (? . 0) q expand-syntax)) q (315788 . 4)) ((c def c (c (? . 24) q and/c)) q (201611 . 3)) ((c def c (c (? . 20) q set-count)) q (152976 . 3)) ((c def c (c (? . 0) q prop:object-name)) q (418672 . 2)) ((c def c (c (? . 0) q date-year)) c (? . 27)) ((c def c (c (? . 51) q stream-for-each)) q (137521 . 4)) ((c def c (c (? . 60) q prop:struct-auto-info)) q (175022 . 2)) ((c def c (c (? . 34) q future)) q (280722 . 3)) ((c form c (c (? . 37) q letrec)) q (12004 . 2)) ((c def c (c (? . 0) q file-size)) q (447951 . 3)) ((c def c (c (? . 0) q cadadr)) q (98310 . 3)) ((c def c (c (? . 0) q struct-type-property-accessor-procedure?)) q (170016 . 3)) ((c def c (c (? . 44) q export)) c (? . 65)) ((c def c (c (? . 0) q cdaaar)) q (98610 . 3)) ((c def c (c (? . 0) q module->namespace)) q (385988 . 6)) ((c def c (c (? . 3) q raise-syntax-error)) q (254828 . 18)) ((c def c (c (? . 12) q match-equality-test)) q (247160 . 4)) ((c def c (c (? . 34) q current-future)) q (280876 . 2)) ((c def c (c (? . 7) q unsafe-struct*-ref)) q (504342 . 4)) ((c def c (c (? . 0) q substring)) q (47935 . 5)) ((c def c (c (? . 3) q date*)) c (? . 94)) ((c def c (c (? . 19) q sequence-ormap)) q (134892 . 4)) ((c def c (c (? . 3) q exn:fail:unsupported)) c (? . 134)) ((c form c (c (? . 85) q define-serializable-struct)) q (378753 . 3)) ((c def c (c (? . 9) q place-message-allowed?)) q (283470 . 3)) ((c def c (c (? . 13) q take-common-prefix)) q (102494 . 5)) ((c def c (c (? . 127) q bytes-append*)) q (71249 . 4)) ((c def c (c (? . 0) q set-mcdr!)) q (107371 . 4)) ((c def c (c (? . 0) q impersonator-property-accessor-procedure?)) q (414450 . 3)) ((c def c (c (? . 0) q string-length)) q (47598 . 3)) ((c def c (c (? . 0) q exn:fail:filesystem:exists?)) c (? . 112)) ((c def c (c (? . 7) q unsafe-fxmin)) q (494848 . 4)) ((c def c (c (? . 0) q pseudo-random-generator-vector?)) q (29473 . 3)) ((c def c (c (? . 44) q export-local-id)) c (? . 65)) ((c def c (c (? . 13) q empty)) q (99410 . 2)) ((c def c (c (? . 7) q unsafe-stencil-vector-length)) q (503307 . 4)) ((c def c (c (? . 95) q signature-members)) q (200190 . 8)) ((c def c (c (? . 3) q impersonate-procedure*)) q (401622 . 11)) ((c def c (c (? . 3) q in-string)) q (126146 . 6)) ((c def c (c (? . 0) q terminal-port?)) q (322112 . 3)) ((c def c (c (? . 1) q reencode-input-port)) q (342401 . 16)) ((c def c (c (? . 30) q flvector-set!)) q (37501 . 5)) ((c def c (c (? . 7) q unsafe-make-srcloc)) q (513052 . 11)) ((c def c (c (? . 7) q unsafe-mutable-hash-iterate-first)) q (504729 . 3)) ((c def c (c (? . 0) q module-cache-clear!)) q (400779 . 2)) ((c def c (c (? . 0) q prop:sealed)) q (169086 . 2)) ((c def c (c (? . 0) q current-get-interaction-input-port)) q (391311 . 4)) ((c def c (c (? . 0) q char-downcase)) q (73997 . 3)) ((c def c (c (? . 0) q current-write-relative-directory)) q (369375 . 11)) ((c def c (c (? . 0) q wrap-evt)) q (274711 . 4)) ((c def c (c (? . 0) q make-impersonator-property)) q (414220 . 6)) ((c def c (c (? . 77) q phase+space-space)) q (320764 . 3)) ((c def c (c (? . 21) q import-req-mode)) c (? . 68)) ((c form c (c (? . 104) q include/reader)) q (317606 . 2)) ((c def c (c (? . 44) q prop:provide-pre-transformer)) q (312074 . 2)) ((c def c (c (? . 7) q unsafe-mcdr)) q (498385 . 3)) ((c def c (c (? . 0) q make-derived-parameter)) q (280010 . 7)) ((c def c (c (? . 57) q nan?)) q (34137 . 3)) ((c def c (c (? . 15) q fxquotient)) q (38772 . 4)) ((c def c (c (? . 20) q set-weak?)) q (147642 . 3)) ((c def c (c (? . 26) q udp-send-to)) q (464681 . 13)) ((c def c (c (? . 30) q flexpt)) q (36159 . 4)) ((c def c (c (? . 17) q default-language-readers)) q (427779 . 3)) ((c def c (c (? . 0) q *)) q (24229 . 3)) ((c form c (c (? . 96) q unsyntax)) q (287127 . 2)) ((c def c (c (? . 33) q vector-filter-not)) q (111359 . 4)) ((c def c (c (? . 0) q directory-exists?)) q (449266 . 3)) ((c def c (c (? . 0) q set!-transformer?)) q (299066 . 3)) ((c def c (c (? . 0) q numerator)) q (25439 . 3)) ((c def c (c (? . 0) q current-directory)) q (448953 . 4)) ((c def c (c (? . 0) q parameterization?)) q (280659 . 3)) ((c def c (c (? . 0) q internal-definition-context-introduce)) q (304282 . 7)) ((c def c (c (? . 0) q /)) q (24282 . 6)) ((c def c (c (? . 13) q flatten)) q (103612 . 3)) ((c form c (c (? . 25) q except)) q (194585 . 2)) ((c def c (c (? . 0) q identifier-prune-lexical-context)) q (293234 . 5)) ((c def c (c (? . 13) q remove-duplicates)) q (104095 . 7)) ((c form c (c (? . 3) q for/sum)) q (15703 . 2)) ((c def c (c (? . 0) q file-or-directory-permissions)) q (447260 . 11)) ((c def c (c (? . 29) q dict-count)) q (141967 . 3)) ((c def c (c (? . 60) q prop:struct-field-info)) q (175270 . 2)) ((c def c (c (? . 0) q pregexp)) q (75425 . 6)) ((c def c (c (? . 0) q exn:fail:network:errno-errno)) c (? . 120)) ((c def c (c (? . 8) q build-string)) q (49037 . 4)) ((c def c (c (? . 84) q immutable-bytes?)) q (22198 . 3)) ((c def c (c (? . 52) q some-system-path->string)) q (445012 . 3)) ((c def c (c (? . 1) q with-output-to-bytes)) q (337700 . 3)) ((c def c (c (? . 13) q partition)) q (104599 . 4)) ((c form c (c (? . 38) q _)) q (289072 . 2)) ((c def c (c (? . 0) q current-milliseconds)) q (483684 . 2)) ((c def c (c (? . 0) q impersonator-of?)) q (400937 . 4)) ((c def c (c (? . 30) q flsin)) q (35687 . 3)) ((c def c (c (? . 0) q struct-info)) q (417730 . 3)) ((c def c (c (? . 13) q dropf-right)) q (102166 . 4)) ((c form c (c (? . 3) q for*/first)) q (17407 . 2)) ((c form c (c (? . 5) q inherit/super)) q (179230 . 2)) ((c def c (c (? . 7) q unsafe-immutable-hash-iterate-next)) q (507021 . 5)) ((c def c (c (? . 3) q call-with-output-file)) q (326050 . 18)) ((c def c (c (? . 43) q record-disappeared-uses)) q (319635 . 4)) ((c def c (c (? . 7) q unsafe-extflfloor)) q (514618 . 3)) ((c def c (c (? . 0) q syntax-arm)) q (315100 . 5)) ((c form c (c (? . 129) q matching-identifiers-out)) q (10763 . 2)) ((c form c (c (? . 38) q ~@)) q (287007 . 2)) ((c def c (c (? . 7) q unsafe-char<?)) q (497825 . 4)) ((c def c (c (? . 21) q import-source-mod-path-stx)) c (? . 39)) ((c def c (c (? . 7) q unsafe-bytes-ref)) q (501036 . 4)) ((c def c (c (? . 22) q instance-unset-variable!)) q (436319 . 4)) ((c def c (c (? . 0) q system-big-endian?)) q (33179 . 2)) ((c def c (c (? . 97) q syntax-procedure-converted-arguments-property)) q (312975 . 8)) ((c def c (c (? . 3) q open-input-output-file)) q (324907 . 16)) ((c form c (c (? . 3) q for/hash)) q (15320 . 2)) ((c def c (c (? . 72) q raise-blame-error)) q (224703 . 14)) ((c def c (c (? . 0) q syntax-local-context)) q (306716 . 3)) ((c def c (c (? . 0) q make-immutable-hasheqv)) q (118353 . 4)) ((c def c (c (? . 0) q error-print-context-length)) q (256612 . 4)) ((c def c (c (? . 9) q dynamic-place)) q (281858 . 9)) ((c def c (c (? . 0) q box)) q (114590 . 3)) ((c form c (c (? . 20) q for*/mutable-seteq)) q (150771 . 2)) ((c form c (c (? . 5) q override*)) q (179497 . 2)) ((c def c (c (? . 60) q struct-field-info-list)) q (175389 . 3)) ((c def c (c (? . 20) q set-remove)) q (152741 . 4)) ((c def c (c (? . 1) q peek-bytes-evt)) c (? . 98)) ((c def c (c (? . 0) q procedure-result-arity)) q (160988 . 3)) ((c def c (c (? . 0) q file-stream-port?)) q (322049 . 3)) ((c def c (c (? . 0) q sleep)) q (273357 . 3)) ((c def c (c (? . 22) q correlated-e)) q (437431 . 3)) ((c def c (c (? . 1) q call-with-output-string)) q (337434 . 3)) ((c def c (c (? . 67) q instanceof/c)) q (186329 . 3)) ((c def c (c (? . 0) q read-accept-infix-dot)) q (365319 . 4)) ((c form c (c (? . 25) q unit-from-context)) q (197611 . 2)) ((c def c (c (? . 4) q directory-type-bits)) q (461204 . 2)) ((c def c (c (? . 0) q make-immutable-hasheq)) q (118496 . 4)) ((c def c (c (? . 7) q unsafe-mcar)) q (498330 . 3)) ((c def c (c (? . 72) q current-blame-format)) q (226872 . 4)) ((c form c (c (? . 6) q time)) q (484126 . 2)) ((c def c (c (? . 0) q internal-definition-context-add-scopes)) q (303092 . 5)) ((c def c (c (? . 11) q extfl->inexact)) q (44730 . 3)) ((c def c (c (? . 0) q thread-cell?)) q (279067 . 3)) ((c def c (c (? . 3) q double-flonum?)) q (23255 . 3)) ((c def c (c (? . 57) q exact-floor)) q (33830 . 3)) ((c def c (c (? . 10) q coerce-flat-contracts)) q (224168 . 4)) ((c def c (c (? . 52) q file-name-from-path)) q (443478 . 3)) ((c form c (c (? . 5) q init)) q (178612 . 2)) ((c def c (c (? . 9) q place-channel)) q (283114 . 2)) ((c def c (c (? . 33) q vector-copy)) q (111080 . 5)) ((c def c (c (? . 1) q read-bytes-avail!-evt)) q (348536 . 4)) ((c def c (c (? . 0) q current-compile-target-machine)) q (392770 . 5)) ((c def c (c (? . 0) q exn:fail:out-of-memory?)) c (? . 99)) ((c def c (c (? . 0) q struct:exn:fail:network)) c (? . 100)) ((c def c (c (? . 21) q import-orig-mode)) c (? . 68)) ((c def c (c (? . 45) q guard-evt)) q (274920 . 3)) ((c def c (c (? . 0) q symbol?)) q (74292 . 3)) ((c def c (c (? . 0) q plumber-flush-all)) q (419036 . 3)) ((c def c (c (? . 3) q make-exn:fail:contract)) c (? . 46)) ((c def c (c (? . 7) q unsafe-vector-ref)) q (499635 . 4)) ((c def c (c (? . 0) q hash-clear!)) q (120880 . 3)) ((c def c (c (? . 16) q printable/c)) q (202555 . 2)) ((c def c (c (? . 69) q impersonate-async-channel)) q (278108 . 13)) ((c def c (c (? . 0) q module-compiled-realm)) q (398657 . 3)) ((c def c (c (? . 0) q syntax-bound-phases)) q (298970 . 3)) ((c def c (c (? . 5) q class-seal)) q (191775 . 15)) ((c def c (c (? . 0) q bytes<?)) q (66296 . 4)) ((c def c (c (? . 15) q fl->fx)) q (40637 . 3)) ((c form c (c (? . 5) q inspect)) q (178579 . 2)) ((c def c (c (? . 36) q pretty-print-handler)) q (371994 . 3)) ((c def c (c (? . 0) q thread-receive-evt)) q (274072 . 2)) ((c def c (c (? . 20) q list->set)) q (148856 . 3)) ((c def c (c (? . 0) q error-syntax->string-handler)) q (257185 . 9)) ((c def c (c (? . 0) q struct:exn:fail:syntax:missing-module)) c (? . 101)) ((c def c (c (? . 0) q chaperone-struct-type)) q (411569 . 15)) ((c def c (c (? . 13) q argmin)) q (105661 . 4)) ((c def c (c (? . 20) q list->mutable-set)) q (149227 . 4)) ((c def c (c (? . 5) q generate-member-key)) q (181015 . 2)) ((c def c (c (? . 0) q error-print-source-location)) q (256767 . 4)) ((c def c (c (? . 0) q sync/timeout)) q (274284 . 4)) ((c def c (c (? . 40) q find-seconds)) q (485185 . 15)) ((c def c (c (? . 0) q compile-context-preservation-enabled)) q (392634 . 4)) ((c form c (c (? . 5) q overment)) q (178941 . 2)) ((c def c (c (? . 72) q exn:fail:contract:blame)) c (? . 105)) ((c def c (c (? . 0) q raise-arity-error*)) q (253080 . 13)) ((c def c (c (? . 0) q syntax-transforming-with-lifts?)) q (307701 . 2)) ((c def c (c (? . 0) q hash-clear)) q (120970 . 3)) ((c def c (c (? . 0) q chaperone-channel)) q (412422 . 12)) ((c form c (c (? . 0) q let-values)) q (12055 . 2)) ((c def c (c (? . 0) q impersonate-vector*)) q (403316 . 15)) ((c def c (c (? . 20) q in-immutable-set)) q (151394 . 3)) ((c def c (c (? . 36) q pretty-printing)) q (375172 . 4)) ((c def c (c (? . 0) q vector-length)) q (107790 . 3)) ((c def c (c (? . 7) q unsafe-fx>=)) q (494763 . 4)) ((c def c (c (? . 0) q log-max-level)) q (480331 . 4)) ((c def c (c (? . 13) q eighth)) q (99942 . 3)) ((c def c (c (? . 45) q path-string?)) q (438814 . 3)) ((c def c (c (? . 0) q version)) q (488168 . 2)) ((c def c (c (? . 13) q in-combinations)) q (105368 . 6)) ((c def c (c (? . 20) q seteq)) q (147963 . 3)) ((c def c (c (? . 0) q vector?)) q (107443 . 3)) ((c def c (c (? . 8) q remove*)) q (94875 . 5)) ((c def c (c (? . 0) q struct:exn:break)) c (? . 55)) ((c def c (c (? . 3) q exn:fail:contract)) c (? . 46)) ((c form c (c (? . 38) q quote-syntax/prune)) q (288823 . 2)) ((c def c (c (? . 13) q index-where)) q (100765 . 4)) ((c def c (c (? . 77) q phase+space+)) q (320900 . 4)) ((c def c (c (? . 17) q sandbox-run-submodules)) q (426910 . 4)) ((c def c (c (? . 7) q unsafe-char>?)) q (497908 . 4)) ((c def c (c (? . 7) q unsafe-vector*-length)) q (499825 . 3)) ((c def c (c (? . 0) q dynamic-require-for-syntax)) q (399079 . 7)) ((c def c (c (? . 67) q subclass?/c)) q (189229 . 3)) ((c def c (c (? . 0) q variable-reference->resolved-module-path)) q (386949 . 4)) ((c def c (c (? . 43) q current-syntax-context)) q (318958 . 4)) ((c def c (c (? . 0) q subbytes)) q (65051 . 5)) ((c form c (c (? . 20) q for*/mutable-seteqv)) q (150830 . 2)) ((c def c (c (? . 1) q port->list)) q (336038 . 4)) ((c def c (c (? . 0) q make-weak-hasheqv)) q (117145 . 4)) ((c def c (c (? . 3) q sequence->stream)) q (133960 . 3)) ((c def c (c (? . 0) q exn:fail:contract:arity?)) c (? . 102)) ((c def c (c (? . 22) q linklet?)) q (430690 . 3)) ((c def c (c (? . 17) q sandbox-error-output)) q (423321 . 14)) ((c def c (c (? . 13) q range)) q (104692 . 7)) ((c def c (c (? . 8) q foldr)) q (94354 . 5)) ((c def c (c (? . 5) q object-method-arity-includes?)) q (190992 . 7)) ((c def c (c (? . 0) q set-mcar!)) q (107299 . 4)) ((c form c (c (? . 5) q define-local-member-name)) q (180893 . 2)) ((c form c (c (? . 20) q for*/seteqv)) q (150378 . 2)) ((c form c (c (? . 5) q override-final*)) q (179569 . 2)) ((c form c (c (? . 56) q define-generics)) q (170310 . 22)) ((c def c (c (? . 3) q regexp-quote)) q (75931 . 7)) ((c def c (c (? . 67) q implementation?/c)) q (189139 . 3)) ((c form c (c (? . 143) q define-inline)) q (19530 . 14)) ((c def c (c (? . 0) q exn:break:hang-up?)) c (? . 80)) ((c def c (c (? . 36) q pretty-print-show-inexactness)) q (372674 . 4)) ((c def c (c (? . 13) q rest)) q (99587 . 3)) ((c def c (c (? . 15) q fxvector-ref)) q (41082 . 4)) ((c def c (c (? . 3) q real->decimal-string)) q (31088 . 4)) ((c def c (c (? . 0) q bytes-open-converter)) q (69539 . 5)) ((c def c (c (? . 0) q =)) q (25668 . 4)) ((c def c (c (? . 0) q assert-unreachable)) q (272523 . 2)) ((c form c (c (? . 25) q define-values-for-export)) q (194460 . 2)) ((c def c (c (? . 21) q make-require-transformer)) q (309574 . 5)) ((c def c (c (? . 0) q string-foldcase)) q (50346 . 3)) ((c def c (c (? . 0) q make-inspector)) q (417212 . 3)) ((c def c (c (? . 20) q set-symmetric-difference!)) q (154355 . 4)) ((c def c (c (? . 0) q inexact->exact)) q (23806 . 3)) ((c def c (c (? . 0) q prop:exn:srclocs)) q (261748 . 2)) ((c def c (c (? . 19) q sequence-ref)) q (134428 . 4)) ((c form c (c (? . 20) q for/seteqv)) q (150176 . 2)) ((c def c (c (? . 0) q struct:exn)) c (? . 103)) ((c def c (c (? . 0) q real?)) q (22729 . 3)) ((c def c (c (? . 16) q =/c)) q (201776 . 3)) ((c def c (c (? . 17) q gui?)) q (429731 . 2)) ((c def c (c (? . 30) q flvector-copy)) q (37632 . 5)) ((c form c (c (? . 31) q delay/name)) q (263811 . 2)) ((c def c (c (? . 0) q filesystem-change-evt)) q (449826 . 5)) ((c form c (c (? . 104) q include-at/relative-to/reader)) q (317654 . 2)) ((c def c (c (? . 38) q syntax-protect)) q (315264 . 3)) ((c form c (c (? . 2) q shift-at)) q (268147 . 2)) ((c def c (c (? . 0) q file-exists?)) q (445931 . 3)) ((c form c (c (? . 5) q class-field-mutator)) q (183077 . 2)) ((c form c (c (? . 54) q splicing-letrec-syntaxes)) q (314060 . 2)) ((c def c (c (? . 57) q exact-truncate)) q (33966 . 3)) ((c def c (c (? . 33) q vector-count)) q (111457 . 4)) ((c def c (c (? . 51) q in-stream)) q (136660 . 3)) ((c def c (c (? . 0) q hash-keys-subset?)) q (121963 . 4)) ((c def c (c (? . 40) q current-date)) q (484152 . 2)) ((c def c (c (? . 43) q wrong-syntax)) q (319101 . 5)) ((c def c (c (? . 0) q struct:exn:fail:filesystem)) c (? . 110)) ((c def c (c (? . 0) q date-month)) c (? . 27)) ((c def c (c (? . 0) q current-force-delete-permissions)) q (448811 . 5)) ((c def c (c (? . 0) q module-compiled-cross-phase-persistent?)) q (398511 . 4)) ((c form c (c (? . 51) q for*/stream)) q (138086 . 2)) ((c def c (c (? . 1) q peek-string-evt)) c (? . 98)) ((c def c (c (? . 45) q path-add-extension)) q (442755 . 5)) ((c def c (c (? . 69) q async-channel/c)) q (278042 . 3)) ((c def c (c (? . 0) q continuation-marks)) q (268882 . 5)) ((c def c (c (? . 0) q lcm)) q (25043 . 3)) ((c form c (c (? . 126) q define-opt/c)) q (238972 . 2)) ((c def c (c (? . 77) q phase+space-shift+)) q (321013 . 4)) ((c def c (c (? . 64) q tcp-connect)) q (462200 . 9)) ((c def c (c (? . 22) q correlated?)) q (436892 . 3)) ((c def c (c (? . 0) q filesystem-change-evt?)) q (449758 . 3)) ((c def c (c (? . 0) q +)) q (24063 . 3)) ((c def c (c (? . 88) q build-contract-property)) q (233427 . 50)) ((c def c (c (? . 0) q thread-suspend-evt)) q (273732 . 3)) ((c def c (c (? . 26) q udp-multicast-loopback?)) q (471371 . 3)) ((c def c (c (? . 7) q unsafe-flvector-length)) q (502034 . 3)) ((c def c (c (? . 72) q blame-update)) q (226364 . 5)) ((c def c (c (? . 0) q subprocess-kill)) q (473353 . 4)) ((c def c (c (? . 0) q stencil-vector-update)) q (114125 . 9)) ((c def c (c (? . 29) q in-dict-values)) q (142526 . 3)) ((c def c (c (? . 0) q print-graph)) q (368201 . 4)) ((c def c (c (? . 7) q unsafe-fl*)) q (495163 . 3)) ((c def c (c (? . 0) q syntax-property-preserved?)) q (314619 . 4)) ((c form c (c (? . 38) q syntax-rules)) q (288855 . 3)) ((c def c (c (? . 38) q check-duplicate-identifier)) q (295051 . 3)) ((c def c (c (? . 57) q pi)) q (33224 . 2)) ((c def c (c (? . 0) q string-grapheme-span)) q (51500 . 5)) ((c def c (c (? . 3) q procedure-realm)) q (159065 . 3)) ((c def c (c (? . 0) q add1)) q (24730 . 3)) ((c def c (c (? . 5) q interface-extension?)) q (190705 . 4)) ((c def c (c (? . 0) q procedure-closure-contents-eq?)) q (159212 . 5)) ((c form c (c (? . 5) q send+)) q (182498 . 5)) ((c def c (c (? . 4) q file->value)) q (450853 . 4)) ((c form c (c (? . 0) q unquote-splicing)) q (19288 . 2)) ((c def c (c (? . 0) q cdar)) q (97026 . 3)) ((c form c (c (? . 20) q for*/set)) q (150278 . 2)) ((c def c (c (? . 26) q udp-multicast-interface)) q (470949 . 3)) ((c def c (c (? . 10) q contract-continuation-mark-key)) q (239015 . 2)) ((c def c (c (? . 4) q group-permission-bits)) q (461567 . 2)) ((c def c (c (? . 0) q print)) q (366957 . 5)) ((c def c (c (? . 0) q char<?)) q (71929 . 4)) ((c form c (c (? . 56) q chaperone-generics)) q (171708 . 4)) ((c def c (c (? . 7) q unsafe-list-tail)) q (498822 . 4)) ((c def c (c (? . 0) q read-accept-bar-quote)) q (364699 . 4)) ((c def c (c (? . 72) q struct:exn:fail:contract:blame)) c (? . 105)) ((c def c (c (? . 7) q unsafe-impersonate-procedure)) q (515967 . 11)) ((c def c (c (? . 0) q make-polar)) q (26871 . 4)) ((c def c (c (? . 11) q extflvector-length)) q (45078 . 3)) ((c def c (c (? . 0) q current-evt-pseudo-random-generator)) q (275605 . 5)) ((c def c (c (? . 0) q cadddr)) q (98510 . 3)) ((c def c (c (? . 7) q unsafe-fl-)) q (495080 . 4)) ((c def c (c (? . 0) q eq?)) q (20334 . 4)) ((c def c (c (? . 20) q set-rest)) q (153149 . 3)) ((c def c (c (? . 10) q chaperone-contract?)) q (237486 . 3)) ((c def c (c (? . 0) q raise-result-error)) q (249241 . 13)) ((c form c (c (? . 3) q for/lists)) q (15831 . 7)) ((c def c (c (? . 0) q compiled-expression?)) q (392314 . 3)) ((c def c (c (? . 0) q sha1-bytes)) q (381215 . 5)) ((c form c (c (? . 3) q #%plain-module-begin)) q (1880 . 2)) ((c def c (c (? . 0) q struct:srcloc)) c (? . 106)) ((c def c (c (? . 5) q object-info)) q (191313 . 3)) ((c def c (c (? . 0) q load/use-compiled)) q (390272 . 3)) ((c def c (c (? . 0) q prefab-key->struct-type)) q (173977 . 4)) ((c def c (c (? . 0) q path-element->bytes)) q (439906 . 3)) ((c def c (c (? . 69) q make-async-channel)) q (277588 . 3)) ((c def c (c (? . 0) q raise-arity-mask-error*)) q (253737 . 9)) ((c def c (c (? . 72) q blame-swap)) q (226025 . 3)) ((c def c (c (? . 7) q unsafe-fx<=)) q (494678 . 4)) ((c form c (c (? . 20) q for/set)) q (150078 . 2)) ((c def c (c (? . 3) q make-exn:fail:read)) c (? . 107)) ((c def c (c (? . 0) q raise-result-error*)) q (249627 . 16)) ((c def c (c (? . 0) q hash-iterate-first)) q (122359 . 4)) ((c def c (c (? . 0) q peek-byte-or-special)) q (358496 . 12)) ((c def c (c (? . 57) q pi.f)) q (33245 . 2)) ((c def c (c (? . 20) q mutable-setalw)) q (148149 . 4)) ((c form c (c (? . 5) q this)) q (178554 . 2)) ((c def c (c (? . 35) q curry)) q (164174 . 6)) ((c def c (c (? . 7) q unsafe-extflsqrt)) q (515380 . 3)) ((c def c (c (? . 19) q sequence-andmap)) q (134787 . 4)) ((c def c (c (? . 0) q expand-user-path)) q (441848 . 3)) ((c def c (c (? . 0) q char<=?)) q (72021 . 4)) ((c def c (c (? . 57) q exact-round)) q (33763 . 3)) ((c form c (c (? . 20) q for/seteq)) q (150126 . 2)) ((c def c (c (? . 20) q in-set)) q (155024 . 3)) ((c def c (c (? . 7) q unsafe-fxvector-ref)) q (501836 . 4)) ((c def c (c (? . 0) q path-for-some-system?)) q (438872 . 3)) ((c def c (c (? . 0) q write-bytes-avail*)) q (361047 . 10)) ((c def c (c (? . 0) q vector->pseudo-random-generator!)) q (29268 . 5)) ((c def c (c (? . 17) q sandbox-eval-handlers)) q (426591 . 7)) ((c def c (c (? . 0) q chaperone-prompt-tag)) q (412930 . 18)) ((c def c (c (? . 0) q hash-strong?)) q (115538 . 3)) ((c def c (c (? . 11) q extfl>)) q (43024 . 4)) ((c form c (c (? . 5) q init-rest)) q (178753 . 3)) ((c def c (c (? . 29) q prop:dict)) q (139300 . 2)) ((c def c (c (? . 0) q progress-evt?)) q (359631 . 6)) ((c form c (c (? . 3) q for*/fold)) q (17536 . 3)) ((c def c (c (? . 0) q regexp-match/end)) q (85806 . 20)) ((c def c (c (? . 0) q sin)) q (26430 . 3)) ((c form c (c (? . 5) q get-field)) q (182686 . 2)) ((c def c (c (? . 0) q char-upper-case?)) q (72912 . 3)) ((c def c (c (? . 0) q exact-positive-integer?)) q (23021 . 3)) ((c def c (c (? . 0) q write-special-avail*)) q (361968 . 4)) ((c form c (c (? . 17) q with-limits)) q (429936 . 2)) ((c def c (c (? . 0) q syntax-source-module)) q (289783 . 5)) ((c def c (c (? . 5) q dynamic-send)) q (182108 . 9)) ((c def c (c (? . 0) q eval-jit-enabled)) q (393180 . 4)) ((c def c (c (? . 12) q syntax-local-match-introduce)) q (247081 . 3)) ((c def c (c (? . 0) q continuation?)) q (266752 . 3)) ((c def c (c (? . 16) q >/c)) q (201886 . 3)) ((c def c (c (? . 0) q pair?)) q (92842 . 3)) ((c def c (c (? . 0) q struct:exn:break:terminate)) c (? . 108)) ((c def c (c (? . 1) q special-filter-input-port)) q (347803 . 8)) ((c def c (c (? . 0) q hash-ephemeron?)) q (115664 . 3)) ((c def c (c (? . 0) q make-logger)) q (478966 . 10)) ((c def c (c (? . 0) q unbox*)) q (114865 . 3)) ((c def c (c (? . 0) q struct-type-sealed?)) q (418108 . 3)) ((c form c (c (? . 3) q struct-field-index)) q (166113 . 2)) ((c def c (c (? . 29) q dict-can-remove-keys?)) q (139147 . 3)) ((c form c (c (? . 135) q struct/c)) q (204816 . 2)) ((c def c (c (? . 14) q contract-random-generate/choose)) q (244542 . 4)) ((c def c (c (? . 0) q exn:fail:filesystem:version?)) c (? . 109)) ((c def c (c (? . 17) q sandbox-output)) q (422863 . 14)) ((c form c (c (? . 25) q rename)) q (194620 . 2)) ((c def c (c (? . 72) q blame-original?)) q (226080 . 3)) ((c def c (c (? . 7) q unsafe-flexpt)) q (496805 . 4)) ((c def c (c (? . 0) q read-accept-box)) q (364501 . 4)) ((c def c (c (? . 0) q read-decimal-as-inexact)) q (365015 . 4)) ((c def c (c (? . 0) q open-input-bytes)) q (329774 . 4)) ((c def c (c (? . 30) q ->fl)) q (36233 . 3)) ((c form c (c (? . 2) q prompt)) q (267880 . 2)) ((c form c (c (? . 3) q for*/sum)) q (17277 . 2)) ((c def c (c (? . 7) q unsafe-flsingle)) q (496208 . 3)) ((c def c (c (? . 5) q class?)) q (189763 . 3)) ((c def c (c (? . 3) q make-exn:fail:contract:variable)) c (? . 93)) ((c def c (c (? . 20) q list->setalw)) q (148946 . 4)) ((c def c (c (? . 5) q printable<%>)) q (189643 . 2)) ((c def c (c (? . 30) q fl=)) q (34868 . 4)) ((c def c (c (? . 0) q current-inexact-milliseconds)) q (482594 . 2)) ((c def c (c (? . 5) q class-info)) q (191402 . 10)) ((c def c (c (? . 48) q collapsible-property)) c (? . 87)) ((c def c (c (? . 51) q stream-rest)) q (136094 . 3)) ((c def c (c (? . 29) q make-custom-hash)) q (144725 . 14)) ((c def c (c (? . 0) q stencil-vector-length)) q (113740 . 4)) ((c form c (c (? . 20) q define-custom-set-types)) q (156977 . 12)) ((c def c (c (? . 0) q impersonate-continuation-mark-key)) q (406794 . 13)) ((c def c (c (? . 0) q floating-point-bytes->real)) q (32268 . 9)) ((c def c (c (? . 0) q input-port?)) q (321287 . 3)) ((c def c (c (? . 45) q path-replace-suffix)) q (442969 . 4)) ((c def c (c (? . 17) q sandbox-network-guard)) q (425532 . 13)) ((c def c (c (? . 20) q in-mutable-set)) q (151458 . 3)) ((c def c (c (? . 0) q checked-procedure-check-and-extract)) q (163034 . 11)) ((c def c (c (? . 0) q always-evt)) q (275310 . 2)) ((c def c (c (? . 4) q pathlist-closure)) q (454678 . 8)) ((c form c (c (? . 56) q define/generic)) q (171265 . 2)) ((c def c (c (? . 4) q make-directory*)) q (455515 . 3)) ((q def ((lib "racket/syntax-srcloc.rkt") syntax-srcloc)) q (294005 . 3)) ((c def c (c (? . 0) q string-copy!)) q (48176 . 11)) ((c def c (c (? . 3) q exn:fail:contract:arity)) c (? . 102)) ((c def c (c (? . 11) q extfl*)) q (42635 . 4)) ((c def c (c (? . 0) q stencil-vector-mask)) q (113605 . 4)) ((c def c (c (? . 5) q dynamic-get-field)) q (182719 . 4)) ((c def c (c (? . 0) q print-unreadable)) q (368105 . 4)) ((c form c (c (? . 0) q quote)) q (10866 . 2)) ((c def c (c (? . 0) q exn:fail:filesystem?)) c (? . 110)) ((c def c (c (? . 7) q unsafe-mutable-hash-iterate-key)) q (505027 . 4)) ((c def c (c (? . 0) q custodian-limit-memory)) q (416358 . 7)) ((c def c (c (? . 0) q call-in-nested-thread)) q (272848 . 4)) ((c def c (c (? . 34) q touch)) q (280785 . 3)) ((c def c (c (? . 20) q seteqv)) q (147877 . 3)) ((c def c (c (? . 60) q extract-struct-info)) q (174839 . 3)) ((c def c (c (? . 7) q unsafe-mutable-hash-iterate-key+value)) q (505952 . 5)) ((c def c (c (? . 15) q fxxor)) q (39171 . 3)) ((c def c (c (? . 22) q linklet-import-variables)) q (433977 . 3)) ((c def c (c (? . 76) q build-chaperone-contract-property)) q (230147 . 51)) ((c def c (c (? . 15) q in-fxvector)) q (41513 . 6)) ((c def c (c (? . 5) q exn:fail:object?)) c (? . 41)) ((c form c (c (? . 2) q reset-at)) q (268100 . 2)) ((c def c (c (? . 7) q unsafe-weak-hash-iterate-pair)) q (510498 . 4)) ((c def c (c (? . 3) q in-input-port-bytes)) q (126758 . 3)) ((c def c (c (? . 29) q in-dict-pairs)) q (142593 . 3)) ((c def c (c (? . 29) q dict-iterate-first)) q (140056 . 3)) ((c def c (c (? . 0) q split-path)) q (442214 . 5)) ((c def c (c (? . 17) q sandbox-init-hook)) q (422236 . 4)) ((c def c (c (? . 0) q <=)) q (25814 . 4)) ((c form c (c (? . 25) q define-unit)) q (195639 . 7)) ((c def c (c (? . 0) q current-continuation-marks)) q (269106 . 5)) ((c def c (c (? . 56) q exn:fail:support)) c (? . 111)) ((c form c (c (? . 5) q send*)) q (182381 . 5)) ((c def c (c (? . 7) q unsafe-fx<)) q (494510 . 4)) ((c def c (c (? . 0) q display)) q (366841 . 4)) ((c form c (c (? . 118) q filtered-in)) q (10539 . 2)) ((c def c (c (? . 30) q flabs)) q (34816 . 3)) ((c def c (c (? . 33) q vector-set*!)) q (109942 . 5)) ((c def c (c (? . 0) q current-error-port)) q (321938 . 4)) ((c def c (c (? . 0) q make-weak-hashalw)) q (116991 . 4)) ((c def c (c (? . 11) q floating-point-bytes->extfl)) q (46430 . 9)) ((c def c (c (? . 76) q make-flat-contract)) q (221716 . 32)) ((c def c (c (? . 9) q place-channel?)) q (281798 . 3)) ((c def c (c (? . 21) q import-source-mode)) c (? . 39)) ((c def c (c (? . 0) q syntax-local-lift-require)) q (306316 . 7)) ((c def c (c (? . 7) q unsafe-flimag-part)) q (497305 . 5)) ((c def c (c (? . 20) q weak-seteqv)) q (148666 . 3)) ((c def c (c (? . 3) q memw)) q (95774 . 4)) ((c form c (c (? . 5) q send/keyword-apply)) q (181920 . 4)) ((c def c (c (? . 48) q struct:collapsible-ho/c)) c (? . 58)) ((c def c (c (? . 0) q syntax-local-module-exports)) q (306875 . 5)) ((c form c (c (? . 0) q #%require)) q (7214 . 41)) ((c form c (c (? . 6) q parameterize-break)) q (271825 . 2)) ((c def c (c (? . 0) q custodian-shutdown-all)) q (415667 . 3)) ((c def c (c (? . 84) q immutable-hash?)) q (22561 . 3)) ((c def c (c (? . 11) q extflmax)) q (43354 . 4)) ((c def c (c (? . 1) q peeking-input-port)) q (341983 . 10)) ((c form c (c (? . 5) q define/override)) q (180005 . 3)) ((c def c (c (? . 48) q collapsible-contract?)) q (240323 . 3)) ((c def c (c (? . 0) q write-bytes-avail)) q (360661 . 9)) ((c def c (c (? . 13) q split-at)) q (101401 . 4)) ((c def c (c (? . 42) q yield)) q (138459 . 3)) ((c def c (c (? . 0) q exn:srclocs-accessor)) q (261855 . 4)) ((c def c (c (? . 34) q processor-count)) q (281053 . 2)) ((c def c (c (? . 8) q filter)) q (94467 . 4)) ((c def c (c (? . 7) q unsafe-weak-hash-iterate-next)) q (509138 . 4)) ((c def c (c (? . 56) q raise-support-error)) q (171105 . 4)) ((c def c (c (? . 57) q positive-integer?)) q (34242 . 3)) ((c form c (c (? . 31) q delay/idle)) q (264089 . 8)) ((c def c (c (? . 0) q system-idle-evt)) q (275361 . 2)) ((c def c (c (? . 0) q positive?)) q (23479 . 3)) ((c def c (c (? . 0) q read-single-flonum)) q (365125 . 4)) ((c def c (c (? . 20) q list->seteqv)) q (149047 . 3)) ((c def c (c (? . 0) q build-path/convention-type)) q (440556 . 9)) ((c def c (c (? . 21) q convert-relative-module-path)) q (310823 . 6)) ((c def c (c (? . 15) q make-fxvector)) q (40879 . 4)) ((c form c (c (? . 3) q require)) q (2182 . 56)) ((c def c (c (? . 30) q fl>=)) q (35177 . 4)) ((c def c (c (? . 24) q cons/c)) q (204177 . 4)) ((c def c (c (? . 0) q syntax-binding-set->syntax)) q (291281 . 5)) ((c def c (c (? . 3) q make-exn:fail:filesystem:exists)) c (? . 112)) ((c def c (c (? . 0) q integer-sqrt)) q (26080 . 3)) ((c form c (c (? . 0) q begin0)) q (14261 . 2)) ((c form c (c (? . 20) q for*/mutable-set)) q (150714 . 2)) ((c def c (c (? . 0) q load)) q (388824 . 3)) ((c def c (c (? . 0) q arithmetic-shift)) q (27839 . 4)) ((c def c (c (? . 0) q print-vector-length)) q (368457 . 4)) ((c def c (c (? . 0) q make-rename-transformer)) q (299474 . 3)) ((c def c (c (? . 0) q vector)) q (107606 . 3)) ((c def c (c (? . 0) q hash-count)) q (122216 . 3)) ((c def c (c (? . 0) q exn:break-continuation)) c (? . 55)) ((c def c (c (? . 0) q real->double-flonum)) q (23999 . 3)) ((c def c (c (? . 0) q raise-argument-error*)) q (248746 . 16)) ((c def c (c (? . 3) q in-directory)) q (131764 . 5)) ((c def c (c (? . 0) q port-closed?)) q (321591 . 3)) ((c def c (c (? . 0) q internal-definition-context-splice-binding-identifier)) q (303297 . 7)) ((c def c (c (? . 0) q custodian-box-value)) q (416792 . 3)) ((c def c (c (? . 21) q syntax-local-require-certifier)) q (311039 . 4)) ((c form c (c (? . 47) q trait-rename-field)) q (184654 . 2)) ((q form ((lib "racket/shared.rkt") shared)) q (12711 . 2)) ((c def c (c (? . 0) q custodian-box?)) q (416732 . 3)) ((c def c (c (? . 0) q read-accept-quasiquote)) q (365507 . 4)) ((c def c (c (? . 0) q exact-nonnegative-integer?)) q (22949 . 3)) ((c def c (c (? . 18) q xor)) q (21947 . 4)) ((c def c (c (? . 3) q make-keyword-procedure)) q (161087 . 5)) ((c def c (c (? . 0) q resolved-module-path-name)) q (393795 . 8)) ((c def c (c (? . 45) q load-relative)) q (388882 . 3)) ((c def c (c (? . 21) q import-src-sym)) c (? . 68)) ((c def c (c (? . 0) q exact->inexact)) q (23866 . 3)) ((c form c (c (? . 3) q for*)) q (16592 . 2)) ((q def ((lib "racket/undefined.rkt") undefined)) q (164953 . 2)) ((c def c (c (? . 113) q vector-immutableof)) q (203097 . 3)) ((c def c (c (? . 0) q make-will-executor)) q (491811 . 2)) ((c def c (c (? . 33) q vector-map)) q (110106 . 4)) ((c def c (c (? . 30) q fllog)) q (36002 . 3)) ((c form c (c (? . 12) q define/match)) q (245544 . 18)) ((c form c (c (? . 25) q unit/c)) q (198921 . 16)) ((c form c (c (? . 67) q case->m)) q (185829 . 2)) ((c def c (c (? . 0) q mcdr)) q (107251 . 3)) ((c def c (c (? . 45) q channel-try-get)) q (275937 . 3)) ((c def c (c (? . 0) q char>?)) q (72114 . 4)) ((c def c (c (? . 7) q unsafe-ephemeron-hash-iterate-next)) q (511002 . 5)) ((c def c (c (? . 31) q promise/name?)) q (263843 . 3)) ((c def c (c (? . 7) q unsafe-s16vector-ref)) q (502513 . 4)) ((c def c (c (? . 0) q procedure-impersonator*?)) q (401174 . 3)) ((c def c (c (? . 20) q list->weak-seteq)) q (149979 . 3)) ((c def c (c (? . 64) q tcp-listen)) q (461861 . 9)) ((c def c (c (? . 26) q udp-connect!)) q (464438 . 7)) ((c def c (c (? . 45) q path-list-string->path-list)) q (445423 . 6)) ((c def c (c (? . 17) q sandbox-propagate-exceptions)) q (424069 . 4)) ((c def c (c (? . 44) q export?)) c (? . 65)) ((c def c (c (? . 20) q set-remove!)) q (152829 . 4)) ((c form c (c (? . 114) q command-line)) q (488800 . 43)) ((c form c (c (? . 3) q #%top-interaction)) q (19372 . 2)) ((c def c (c (? . 30) q make-flvector)) q (37187 . 4)) ((c def c (c (? . 115) q log-level/c)) q (481340 . 3)) ((c def c (c (? . 0) q procedure-arity)) q (159796 . 3)) ((c def c (c (? . 48) q collapsible-property-ref)) c (? . 87)) ((c def c (c (? . 3) q regexp-match-peek-positions*)) q (84771 . 17)) ((c def c (c (? . 0) q kill-thread)) q (273175 . 3)) ((c def c (c (? . 3) q sequence-generate*)) q (134117 . 5)) ((c def c (c (? . 3) q in-values*-sequence)) q (132573 . 3)) ((c def c (c (? . 29) q make-weak-custom-hash)) q (145438 . 14)) ((c form c (c (? . 3) q for/foldr)) q (16303 . 9)) ((c def c (c (? . 64) q tcp-accept-ready?)) q (463136 . 3)) ((c def c (c (? . 13) q filter-not)) q (105061 . 4)) ((c def c (c (? . 0) q shell-execute)) q (474095 . 11)) ((c def c (c (? . 0) q print-hash-table)) q (368559 . 4)) ((c def c (c (? . 0) q make-immutable-hashalw)) q (118201 . 4)) ((c def c (c (? . 13) q tenth)) q (100043 . 3)) ((c def c (c (? . 0) q bytes-utf-8-ref)) q (68801 . 7)) ((c def c (c (? . 0) q exn:fail:syntax:missing-module?)) c (? . 101)) ((c def c (c (? . 0) q read-accept-graph)) q (364805 . 4)) ((c def c (c (? . 57) q radians->degrees)) q (33351 . 3)) ((c def c (c (? . 133) q random-ref)) q (29631 . 5)) ((c def c (c (? . 0) q max)) q (24880 . 3)) ((c form c (c (? . 25) q define-unit-from-context)) q (197655 . 2)) ((c def c (c (? . 0) q syntax-local-lift-module-end-declaration)) q (306227 . 3)) ((c def c (c (? . 0) q string-normalize-nfkd)) q (50495 . 3)) ((c def c (c (? . 1) q open-output-nowhere)) q (341847 . 4)) ((c form c (c (? . 5) q define/augment)) q (180263 . 3)) ((c def c (c (? . 3) q make-base-namespace)) q (381969 . 2)) ((c def c (c (? . 0) q string-locale-ci=?)) q (51032 . 4)) ((c def c (c (? . 72) q blame-swapped?)) q (226142 . 3)) ((c def c (c (? . 7) q unsafe-stencil-vector)) q (503003 . 4)) ((c def c (c (? . 4) q regular-file-type-bits)) q (461120 . 2)) ((c def c (c (? . 13) q takef-right)) q (102078 . 4)) ((c def c (c (? . 13) q permutations)) q (105536 . 3)) ((c def c (c (? . 0) q string-utf-8-length)) q (68308 . 5)) ((c def c (c (? . 22) q instance-variable-names)) q (435643 . 3)) ((c def c (c (? . 7) q unsafe-fl>)) q (495535 . 4)) ((c def c (c (? . 14) q contract-proc)) q (243901 . 6)) ((c def c (c (? . 0) q bytes->list)) q (65891 . 3)) ((c def c (c (? . 0) q current-compile)) q (391863 . 5)) ((c form c (c (? . 3) q for*/foldr)) q (17647 . 4)) ((c form c (c (? . 0) q letrec-values)) q (12180 . 2)) ((c form c (c (? . 30) q for*/flvector)) q (38129 . 9)) ((c form c (c (? . 5) q pubment*)) q (179422 . 2)) ((c def c (c (? . 0) q module->language-info)) q (399540 . 6)) ((c def c (c (? . 3) q in-ephemeron-hash-pairs)) q (131521 . 3)) ((c def c (c (? . 47) q trait->mixin)) q (184340 . 3)) ((c form c (c (? . 16) q any)) q (207480 . 2)) ((c def c (c (? . 116) q box/c)) q (203543 . 9)) ((c def c (c (? . 0) q stencil-vector?)) q (113319 . 3)) ((c def c (c (? . 3) q in-immutable-hash)) q (129008 . 3)) ((c def c (c (? . 30) q fl-)) q (34609 . 4)) ((c def c (c (? . 0) q memory-order-release)) q (284394 . 2)) ((c def c (c (? . 0) q module-predefined?)) q (400634 . 4)) ((c form c (c (? . 3) q except-out)) q (6594 . 2)) ((c def c (c (? . 0) q current-library-collection-paths)) q (519905 . 5)) ((c def c (c (? . 0) q hash-eqv?)) q (115417 . 3)) ((c def c (c (? . 0) q make-security-guard)) q (414666 . 16)) ((c form c (c (? . 5) q override-final)) q (178979 . 2)) ((c def c (c (? . 0) q default-continuation-prompt-tag)) q (265329 . 2)) ((c def c (c (? . 7) q unsafe-fxrshift)) q (493685 . 4)) ((c def c (c (? . 0) q string-titlecase)) q (50273 . 3)) ((c def c (c (? . 13) q index-of)) q (100586 . 5)) ((c def c (c (? . 7) q unsafe-bytes-length)) q (500965 . 3)) ((c def c (c (? . 45) q getenv)) q (487418 . 3)) ((c def c (c (? . 117) q check-not-unsafe-undefined)) q (517700 . 5)) ((c def c (c (? . 0) q syntax->list)) q (290014 . 3)) ((c def c (c (? . 0) q read-bytes-line)) q (351371 . 5)) ((c def c (c (? . 0) q write)) q (366727 . 4)) ((c def c (c (? . 0) q custodian-shut-down?)) q (415743 . 3)) ((c def c (c (? . 0) q current-gc-milliseconds)) q (483863 . 2)) ((c def c (c (? . 7) q unsafe-extflcos)) q (514901 . 3)) ((c form c (c (? . 104) q include)) q (317429 . 6)) ((c def c (c (? . 0) q read-bytes-avail!)) q (352523 . 7)) ((c def c (c (? . 138) q make-parameter-rename-transformer)) q (313788 . 3)) ((c def c (c (? . 0) q date-dst?)) c (? . 27)) ((c def c (c (? . 0) q syntax-binding-set?)) q (291160 . 3)) ((c def c (c (? . 0) q prop:evt)) q (275564 . 2)) ((c def c (c (? . 20) q mutable-seteq)) q (148364 . 4)) ((c def c (c (? . 35) q disjoin)) q (164090 . 4)) ((c form c (c (? . 51) q for/stream)) q (138021 . 2)) ((c def c (c (? . 33) q vector-split-at)) q (110836 . 4)) ((c def c (c (? . 0) q pregexp?)) q (75098 . 3)) ((c form c (c (? . 74) q contract-first-order-okay-to-give-up?)) q (239434 . 2)) ((c def c (c (? . 0) q make-environment-variables)) q (486380 . 5)) ((c def c (c (? . 0) q build-path)) q (440251 . 6)) ((c form c (c (? . 12) q match)) q (245138 . 6)) ((c def c (c (? . 0) q prop:equal+hash)) q (21402 . 2)) ((c def c (c (? . 3) q procedure-reduce-arity-mask)) q (160505 . 9)) ((c def c (c (? . 0) q subprocess)) q (471639 . 37)) ((c def c (c (? . 0) q namespace-unprotect-module)) q (385449 . 7)) ((c def c (c (? . 0) q open-input-string)) q (329908 . 4)) ((c form c (c (? . 12) q match*)) q (245297 . 6)) ((c form c (c (? . 3) q for/vector)) q (15071 . 8)) ((c def c (c (? . 11) q extfltan)) q (43818 . 3)) ((c form c (c (? . 5) q send/apply)) q (181854 . 2)) ((c form c (c (? . 2) q control)) q (267908 . 2)) ((c def c (c (? . 1) q reencode-output-port)) q (343085 . 16)) ((c def c (c (? . 0) q call-with-immediate-continuation-mark)) q (270979 . 7)) ((c def c (c (? . 45) q read-eval-print-loop)) q (391160 . 2)) ((c def c (c (? . 0) q sync)) q (274231 . 3)) ((c def c (c (? . 69) q async-channel-put)) q (277855 . 4)) ((c def c (c (? . 29) q dict-copy)) q (142047 . 3)) ((c def c (c (? . 7) q unsafe-fl->fx)) q (497562 . 3)) ((c def c (c (? . 0) q port-counts-lines?)) q (323133 . 3)) ((c def c (c (? . 59) q ~v)) q (55418 . 25)) ((c def c (c (? . 13) q cartesian-product)) q (106040 . 3)) ((c def c (c (? . 0) q string<=?)) q (49366 . 4)) ((c def c (c (? . 45) q reroot-path)) q (443291 . 4)) ((c def c (c (? . 3) q exn:break:terminate)) c (? . 108)) ((c def c (c (? . 0) q string-locale<?)) q (50829 . 4)) ((c def c (c (? . 72) q blame-negative)) q (225796 . 3)) ((c def c (c (? . 3) q make-exn)) c (? . 103)) ((c def c (c (? . 13) q fifth)) q (99790 . 3)) ((c form c (c (? . 6) q case)) q (13137 . 5)) ((c def c (c (? . 0) q integer-length)) q (27944 . 3)) ((c def c (c (? . 7) q unsafe-flsqrt)) q (496745 . 3)) ((c def c (c (? . 4) q block-device-type-bits)) q (461162 . 2)) ((c def c (c (? . 13) q remf*)) q (106200 . 4)) ((c form c (c (? . 12) q match/values)) q (245493 . 2)) ((c form c (c (? . 11) q for*/extflvector)) q (45947 . 9)) ((c def c (c (? . 0) q vector-fill!)) q (108996 . 4)) ((c def c (c (? . 0) q bytes)) q (64521 . 3)) ((c def c (c (? . 7) q unsafe-vector*-cas!)) q (500184 . 6)) ((c def c (c (? . 0) q arity-at-least-value)) c (? . 70)) ((c def c (c (? . 3) q exn:fail:user)) c (? . 83)) ((c def c (c (? . 0) q bytes->path)) q (439000 . 4)) ((c def c (c (? . 10) q coerce-contract)) q (223646 . 4)) ((c def c (c (? . 0) q regexp-match-peek-positions/end)) q (87475 . 22)) ((c form c (c (? . 37) q let-syntax)) q (12245 . 2)) ((c def c (c (? . 0) q string-upcase)) q (50137 . 3)) ((c def c (c (? . 2) q new-prompt)) q (268768 . 2)) ((c def c (c (? . 19) q sequence-filter)) q (135324 . 4)) ((c def c (c (? . 0) q make-hasheqv-placeholder)) q (106885 . 3)) ((c def c (c (? . 0) q cadaar)) q (98210 . 3)) ((c def c (c (? . 7) q unsafe-extflsin)) q (514833 . 3)) ((c def c (c (? . 17) q sandbox-make-namespace)) q (424470 . 2)) ((c def c (c (? . 13) q append*)) q (103444 . 7)) ((c def c (c (? . 0) q local-transformer-expand)) q (300437 . 11)) ((c def c (c (? . 10) q coerce-flat-contract)) q (224073 . 4)) ((c def c (c (? . 51) q stream-map)) q (137239 . 4)) ((c def c (c (? . 62) q process*/ports)) q (477585 . 27)) ((c def c (c (? . 11) q extflround)) q (43439 . 3)) ((c def c (c (? . 51) q stream-force)) q (136454 . 3)) ((c def c (c (? . 0) q integer->char)) q (71569 . 5)) ((c def c (c (? . 0) q call-with-values)) q (247588 . 4)) ((c form c (c (? . 30) q for/flvector)) q (38063 . 2)) ((c def c (c (? . 0) q string->list)) q (48895 . 3)) ((c def c (c (? . 25) q unit?)) q (198819 . 3)) ((c def c (c (? . 0) q syntax-e)) q (289957 . 3)) ((c def c (c (? . 7) q unsafe-flvector-set!)) q (502194 . 5)) ((c def c (c (? . 7) q unsafe-impersonate-vector)) q (516776 . 11)) ((c form c (c (? . 12) q match-let*-values)) q (246388 . 2)) ((c def c (c (? . 29) q keyword-apply/dict)) q (146924 . 11)) ((c def c (c (? . 7) q unsafe-extflvector-set!)) q (515849 . 5)) ((c def c (c (? . 71) q map)) q (93891 . 4)) ((c def c (c (? . 0) q prefab-struct-type-key+field-count)) q (173834 . 4)) ((c def c (c (? . 3) q in-mutable-hash)) q (127920 . 3)) ((c def c (c (? . 0) q char-graphic?)) q (73248 . 3)) ((c def c (c (? . 0) q handle-evt)) q (274809 . 4)) ((c def c (c (? . 3) q copy-file)) q (448037 . 13)) ((c def c (c (? . 43) q syntax-local-value/record)) q (319508 . 4)) ((c form c (c (? . 118) q path-up)) q (10585 . 2)) ((c def c (c (? . 0) q current-prompt-read)) q (391202 . 4)) ((c def c (c (? . 3) q procedure-keywords)) q (160843 . 4)) ((c def c (c (? . 3) q exn:fail:contract:variable)) c (? . 93)) ((c def c (c (? . 0) q srcloc->string)) q (262318 . 3)) ((c def c (c (? . 59) q ~s)) q (56654 . 25)) ((c def c (c (? . 88) q prop:chaperone-contract)) q (227085 . 2)) ((c def c (c (? . 0) q values)) q (247536 . 3)) ((c def c (c (? . 7) q unsafe-extflacos)) q (515106 . 3)) ((c def c (c (? . 0) q module->imports)) q (399769 . 6)) ((c form c (c (? . 43) q with-syntax*)) q (320339 . 5)) ((c def c (c (? . 72) q blame-add-context)) q (225303 . 9)) ((c def c (c (? . 36) q pretty-print-exact-as-decimal)) q (372404 . 4)) ((c def c (c (? . 7) q unsafe-flmin)) q (495789 . 4)) ((c def c (c (? . 29) q dict-set*!)) q (140474 . 5)) ((c def c (c (? . 7) q unsafe-extflexp)) q (515312 . 3)) ((c def c (c (? . 0) q bitwise-ior)) q (27210 . 3)) ((c def c (c (? . 10) q contract-equivalent?)) q (237140 . 4)) ((c def c (c (? . 26) q udp-open-socket)) q (463931 . 5)) ((c def c (c (? . 24) q dynamic->*)) q (212745 . 19)) ((c def c (c (? . 0) q make-thread-group)) q (416863 . 3)) ((c def c (c (? . 0) q string->unreadable-symbol)) q (74689 . 3)) ((c def c (c (? . 16) q make-none/c)) q (238399 . 3)) ((c def c (c (? . 62) q bytes-no-nuls?)) q (478853 . 3)) ((c def c (c (? . 0) q date-year-day)) c (? . 27)) ((c def c (c (? . 13) q take-right)) q (101764 . 4)) ((c def c (c (? . 16) q flat-named-contract)) q (201080 . 8)) ((c def c (c (? . 10) q flat-contract?)) q (237619 . 3)) ((c def c (c (? . 0) q char-ci=?)) q (72299 . 4)) ((c def c (c (? . 3) q make-date)) c (? . 27)) ((c def c (c (? . 2) q call/prompt)) q (267088 . 7)) ((c def c (c (? . 0) q identifier-binding)) q (295158 . 20)) ((c def c (c (? . 0) q impersonate-prompt-tag)) q (405975 . 18)) ((c def c (c (? . 20) q set-member?)) q (152492 . 4)) ((c def c (c (? . 3) q exn:fail:filesystem:exists)) c (? . 112)) ((c def c (c (? . 69) q async-channel-try-get)) q (277778 . 3)) ((c def c (c (? . 0) q string-normalize-nfc)) q (50573 . 3)) ((c def c (c (? . 3) q gen:custom-write)) q (376787 . 2)) ((c def c (c (? . 8) q build-vector)) q (109740 . 4)) ((c def c (c (? . 0) q path-element->string)) q (439827 . 3)) ((c def c (c (? . 0) q cons)) q (92944 . 4)) ((c def c (c (? . 6) q break-parameterization?)) q (272142 . 3)) ((c def c (c (? . 1) q peek-string!-evt)) c (? . 98)) ((c def c (c (? . 0) q make-syntax-delta-introducer)) q (308447 . 9)) ((c def c (c (? . 0) q exn:fail:filesystem:errno-errno)) c (? . 63)) ((c def c (c (? . 0) q syntax-local-identifier-as-binding)) q (307824 . 5)) ((c def c (c (? . 7) q unsafe-fxior)) q (493415 . 3)) ((c def c (c (? . 0) q namespace-module-identifier)) q (382600 . 4)) ((c def c (c (? . 0) q odd?)) q (23643 . 3)) ((c form c (c (? . 5) q define/override-final)) q (180169 . 3)) ((c def c (c (? . 0) q semaphore-wait)) q (276452 . 3)) ((c def c (c (? . 0) q bytes-ref)) q (64803 . 4)) ((c def c (c (? . 0) q find-library-collection-paths)) q (518133 . 9)) ((c form c (c (? . 3) q module+)) q (1769 . 2)) ((c def c (c (? . 7) q unsafe-flatan)) q (496567 . 3)) ((c def c (c (? . 0) q call-with-current-continuation)) q (265403 . 6)) ((c def c (c (? . 43) q format-id)) q (317734 . 19)) ((c def c (c (? . 10) q value-blame)) q (237939 . 3)) ((c def c (c (? . 113) q vectorof)) q (202729 . 9)) ((c def c (c (? . 89) q engine-kill)) q (284284 . 3)) ((c def c (c (? . 0) q -)) q (24116 . 6)) ((c form c (c (? . 6) q log-debug)) q (481036 . 3)) ((c def c (c (? . 1) q transplant-output-port)) q (345794 . 19)) ((c def c (c (? . 67) q make-mixin-contract)) q (188955 . 3)) ((c def c (c (? . 0) q module-path-index-join)) q (396270 . 5)) ((c def c (c (? . 3) q regexp-replaces)) q (91813 . 8)) ((c def c (c (? . 3) q make-exn:fail:contract:non-fixnum-result)) c (? . 78)) ((c form c (c (? . 9) q place)) q (283651 . 2)) ((c def c (c (? . 7) q unsafe-make-flrectangular)) q (496886 . 7)) ((c def c (c (? . 0) q namespace-mapped-symbols)) q (383770 . 3)) ((c def c (c (? . 0) q read-language)) q (363733 . 5)) ((c def c (c (? . 0) q sqrt)) q (26029 . 3)) ((c def c (c (? . 131) q dynamic-enter!)) q (521586 . 7)) ((c def c (c (? . 0) q environment-variables-set!)) q (486726 . 10)) ((c def c (c (? . 0) q module->indirect-exports)) q (400298 . 5)) ((c def c (c (? . 48) q collapsible-count-property-count)) c (? . 119)) ((c form c (c (? . 0) q letrec-syntaxes+values)) q (12497 . 4)) ((c def c (c (? . 0) q read/recursive)) q (363013 . 6)) ((c def c (c (? . 20) q set-mutable?)) q (147584 . 3)) ((c def c (c (? . 0) q integer->integer-bytes)) q (31695 . 14)) ((c def c (c (? . 4) q file->bytes)) q (450711 . 4)) ((c def c (c (? . 0) q resolved-module-path?)) q (393384 . 3)) ((c def c (c (? . 0) q read-on-demand-source)) q (366180 . 5)) ((c def c (c (? . 0) q prefab-struct-key)) q (173656 . 3)) ((c def c (c (? . 0) q cdr)) q (93056 . 3)) ((c def c (c (? . 0) q custodian-memory-accounting-available?)) q (416035 . 2)) ((c def c (c (? . 13) q seventh)) q (99890 . 3)) ((c form c (c (? . 0) q begin)) q (14215 . 3)) ((c def c (c (? . 0) q caaaar)) q (97810 . 3)) ((c def c (c (? . 8) q remq*)) q (94999 . 4)) ((c form c (c (? . 96) q quasisyntax/loc)) q (288001 . 14)) ((c def c (c (? . 0) q call-with-escape-continuation)) q (266121 . 3)) ((c def c (c (? . 17) q exn:fail:sandbox-terminated?)) c (? . 141)) ((c def c (c (? . 35) q normalized-arity?)) q (164448 . 3)) ((c def c (c (? . 17) q sandbox-propagate-breaks)) q (423943 . 4)) ((c def c (c (? . 0) q primitive-closure?)) q (163571 . 3)) ((c def c (c (? . 3) q sequence?)) q (125353 . 3)) ((c def c (c (? . 3) q exn:fail:network:errno)) c (? . 120)) ((c def c (c (? . 30) q flsqrt)) q (36106 . 3)) ((c def c (c (? . 9) q place-channel-put/get)) q (283374 . 4)) ((c def c (c (? . 20) q list->mutable-seteqv)) q (149451 . 4)) ((c def c (c (? . 0) q string-set!)) q (47780 . 5)) ((c def c (c (? . 64) q port-number?)) q (463858 . 2)) ((c def c (c (? . 10) q prop:contracted)) q (227192 . 2)) ((c def c (c (? . 72) q exn:fail:contract:blame-object)) c (? . 105)) ((c def c (c (? . 0) q placeholder?)) q (106342 . 3)) ((c form c (c (? . 56) q make-struct-type-property/generic)) q (171929 . 29)) ((c form c (c (? . 12) q match*/derived)) q (247377 . 2)) ((c def c (c (? . 31) q force)) q (263612 . 3)) ((c def c (c (? . 0) q read-char)) q (350942 . 3)) ((c def c (c (? . 7) q unsafe-fxvector-length)) q (501765 . 3)) ((c def c (c (? . 20) q setalw)) q (147782 . 3)) ((c def c (c (? . 0) q box-immutable)) q (114635 . 3)) ((c def c (c (? . 13) q splitf-at-right)) q (102254 . 4)) ((c def c (c (? . 0) q regexp-match-peek-positions)) q (82072 . 19)) ((c form c (c (? . 6) q let/cc)) q (266395 . 2)) ((c def c (c (? . 57) q exact-ceiling)) q (33897 . 3)) ((c def c (c (? . 3) q syntax-binding-set-extend)) q (291456 . 25)) ((c def c (c (? . 21) q make-import-source)) c (? . 39)) ((c def c (c (? . 3) q namespace-anchor->empty-namespace)) q (382117 . 3)) ((c def c (c (? . 6) q call-with-parameterization)) q (280471 . 5)) ((c def c (c (? . 7) q unsafe-flasin)) q (496447 . 3)) ((c def c (c (? . 0) q inexact-real?)) q (23090 . 3)) ((c def c (c (? . 1) q relocate-input-port)) q (343985 . 13)) ((c def c (c (? . 0) q thread-wait)) q (273544 . 3)) ((c def c (c (? . 0) q equal-always?)) q (20179 . 4)) ((c def c (c (? . 36) q tentative-pretty-print-port-cancel)) q (375778 . 3)) ((c def c (c (? . 4) q other-read-bit)) q (461755 . 2)) ((c def c (c (? . 90) q new-âˆƒ/c)) q (214227 . 3)) ((c def c (c (? . 0) q struct:exn:fail:syntax)) c (? . 66)) ((c def c (c (? . 0) q syntax-local-introduce)) q (308057 . 3)) ((c form c (c (? . 10) q define/final-prop)) q (236761 . 6)) ((c def c (c (? . 5) q object=?)) q (189925 . 4)) ((c form c (c (? . 25) q unit)) q (192833 . 22)) ((c def c (c (? . 0) q equal-always-hash-code/recur)) q (21011 . 4)) ((c form c (c (? . 5) q super-make-object)) q (181568 . 2)) ((c def c (c (? . 0) q sha224-bytes)) q (381412 . 5)) ((c def c (c (? . 0) q read-char-or-special)) q (357089 . 8)) ((c def c (c (? . 9) q processor-count)) q (283913 . 2)) ((c def c (c (? . 0) q continuation-mark-set?)) q (271479 . 3)) ((c def c (c (? . 0) q chaperone-vector)) q (408938 . 14)) ((c def c (c (? . 10) q get/build-val-first-projection)) q (239739 . 4)) ((c def c (c (? . 15) q fxpopcount)) q (39432 . 3)) ((c def c (c (? . 14) q contract-exercise)) q (244277 . 7)) ((c def c (c (? . 3) q gen:equal+hash)) q (21335 . 2)) ((c def c (c (? . 7) q unsafe-string->immutable-string!)) q (500860 . 4)) ((c form c (c (? . 67) q ->dm)) q (185880 . 6)) ((c def c (c (? . 72) q blame-add-missing-party)) q (226534 . 5)) ((c def c (c (? . 0) q current-error-message-adjuster)) q (263264 . 5)) ((c def c (c (? . 26) q udp-receive!-evt)) q (469628 . 9)) ((c def c (c (? . 0) q file-or-directory-type)) q (446073 . 5)) ((c def c (c (? . 28) q string-append*)) q (51920 . 4)) ((c def c (c (? . 7) q unsafe-char>=?)) q (498075 . 4)) ((c def c (c (? . 17) q sandbox-gui-available)) q (424521 . 4)) ((c def c (c (? . 33) q vector-memq)) q (111981 . 4)) ((c def c (c (? . 0) q portal-syntax?)) q (313329 . 3)) ((c def c (c (? . 3) q procedure-reduce-arity)) q (160184 . 9)) ((c def c (c (? . 21) q import-source)) c (? . 39)) ((c def c (c (? . 22) q correlated-line)) q (437019 . 3)) ((c form c (c (? . 20) q for/mutable-setalw)) q (150655 . 2)) ((c form c (c (? . 67) q ->*m)) q (185759 . 2)) ((c def c (c (? . 64) q listen-port-number?)) q (463891 . 2)) ((c def c (c (? . 0) q module-compiled-submodules)) q (397034 . 13)) ((c form c (c (? . 12) q match-let-values)) q (246323 . 2)) ((c def c (c (? . 0) q explode-path)) q (442443 . 4)) ((c def c (c (? . 10) q list-contract?)) q (237679 . 3)) ((c form c (c (? . 10) q with-collapsible-contract-continuation-mark)) q (240201 . 2)) ((c def c (c (? . 76) q build-flat-contract-property)) q (227402 . 42)) ((c def c (c (? . 7) q unsafe-fllog)) q (496627 . 3)) ((c def c (c (? . 0) q choice-evt)) q (274651 . 3)) ((c form c (c (? . 3) q relative-in)) q (4824 . 2)) ((c def c (c (? . 29) q dict-value-contract)) q (142774 . 3)) ((c def c (c (? . 0) q exn:fail:contract:divide-by-zero?)) c (? . 121)) ((c def c (c (? . 29) q dict-map/copy)) q (141667 . 4)) ((c def c (c (? . 33) q vector-map!)) q (110203 . 4)) ((c def c (c (? . 0) q char-extended-pictographic?)) q (73513 . 3)) ((c def c (c (? . 0) q prop:set!-transformer)) q (299355 . 2)) ((c def c (c (? . 20) q set-subtract!)) q (154137 . 4)) ((c form c (c (? . 5) q override)) q (178903 . 2)) ((c def c (c (? . 0) q object-name)) q (418620 . 3)) ((c def c (c (? . 0) q namespace-attach-module)) q (384798 . 7)) ((c def c (c (? . 48) q impersonator-prop:collapsible)) q (242193 . 2)) ((c def c (c (? . 34) q fsemaphore-count)) q (281611 . 3)) ((c def c (c (? . 64) q tcp-port?)) q (463803 . 3)) ((c def c (c (? . 48) q merge)) q (240390 . 6)) ((c def c (c (? . 10) q contract-name)) q (237739 . 3)) ((c def c (c (? . 36) q pretty-print-newline)) q (373707 . 4)) ((c form c (c (? . 25) q define-values/invoke-unit/infer)) q (197052 . 18)) ((c def c (c (? . 3) q exn)) c (? . 103)) ((c def c (c (? . 3) q exn:fail:syntax)) c (? . 66)) ((c def c (c (? . 0) q module-declared?)) q (399361 . 5)) ((c def c (c (? . 51) q stream-add-between)) q (137937 . 4)) ((c def c (c (? . 30) q shared-flvector)) q (38392 . 3)) ((c form c (c (? . 15) q for/fxvector)) q (41753 . 2)) ((c def c (c (? . 0) q stencil-vector-mask-width)) q (113380 . 2)) ((c def c (c (? . 3) q exn:break:hang-up)) c (? . 80)) ((c def c (c (? . 36) q pretty-print-extend-style-table)) q (373194 . 8)) ((c def c (c (? . 3) q make-exn:fail)) c (? . 122)) ((c form c (c (? . 24) q struct-guard/c)) q (215677 . 2)) ((c def c (c (? . 7) q unsafe-set-mcar!)) q (498440 . 4)) ((c def c (c (? . 30) q fl*)) q (34685 . 3)) ((c def c (c (? . 16) q syntax/c)) q (204747 . 3)) ((c def c (c (? . 0) q semaphore-peek-evt?)) q (276763 . 3)) ((c def c (c (? . 17) q set-eval-limits)) q (428238 . 5)) ((c form c (c (? . 2) q prompt0)) q (268206 . 2)) ((c def c (c (? . 29) q dict-keys)) q (142224 . 3)) ((c def c (c (? . 0) q expand-syntax-once)) q (316056 . 4)) ((c def c (c (? . 0) q exn:fail:read:non-char?)) c (? . 123)) ((c def c (c (? . 7) q unsafe-vector*-ref)) q (499926 . 4)) ((c def c (c (? . 7) q unsafe-unbox)) q (499121 . 3)) ((c def c (c (? . 64) q tcp-accept/enable-break)) q (463028 . 3)) ((c def c (c (? . 0) q file-or-directory-stat)) q (447646 . 5)) ((c def c (c (? . 0) q modulo)) q (24653 . 4)) ((c def c (c (? . 7) q unsafe-s16vector-set!)) q (502628 . 5)) ((c def c (c (? . 26) q udp-send-to-evt)) q (468840 . 13)) ((c def c (c (? . 72) q blame-missing-party?)) q (226467 . 3)) ((c def c (c (? . 44) q provide-pre-transformer?)) q (312201 . 3)) ((c def c (c (? . 88) q flat-contract-property?)) q (236692 . 3)) ((c def c (c (? . 7) q unsafe-extfl<)) q (514010 . 4)) ((c def c (c (? . 0) q current-module-declare-source)) q (394967 . 5)) ((c def c (c (? . 0) q syntax-local-value)) q (305067 . 9)) ((c def c (c (? . 15) q fx->fl)) q (40584 . 3)) ((c def c (c (? . 7) q unsafe-fxpopcount16)) q (493965 . 3)) ((c form c (c (? . 124) q define-syntax-parameter)) q (313550 . 2)) ((c form c (c (? . 3) q for-label)) q (7131 . 2)) ((c def c (c (? . 22) q correlated-position)) q (437224 . 3)) ((c def c (c (? . 33) q vector-take-right)) q (110506 . 4)) ((c def c (c (? . 29) q dict->list)) q (142342 . 3)) ((c def c (c (? . 0) q bytes-convert)) q (69767 . 21)) ((c def c (c (? . 29) q dict-key-contract)) q (142710 . 3)) ((c def c (c (? . 0) q hashalw)) q (115864 . 5)) ((c def c (c (? . 84) q mutable-box?)) q (22384 . 3)) ((c def c (c (? . 10) q coerce-chaperone-contract)) q (223839 . 4)) ((c form c (c (? . 5) q define/private)) q (180515 . 3)) ((c def c (c (? . 0) q gensym)) q (74765 . 3)) ((c def c (c (? . 0) q log-message)) q (479715 . 13)) ((c def c (c (? . 0) q call-in-continuation)) q (266297 . 4)) ((c def c (c (? . 36) q pretty-print-abbreviate-read-macros)) q (372800 . 4)) ((c def c (c (? . 7) q unsafe-fx*/wraparound)) q (494243 . 4)) ((c def c (c (? . 16) q if/c)) q (239528 . 5)) ((c form c (c (? . 5) q define-serializable-class)) q (189516 . 3)) ((c def c (c (? . 0) q read-byte-or-special)) q (357401 . 8)) ((c def c (c (? . 33) q vector-drop)) q (110618 . 4)) ((c def c (c (? . 3) q impersonate-procedure)) q (401244 . 11)) ((c def c (c (? . 64) q tcp-abandon-port)) q (463432 . 3)) ((c form c (c (? . 3) q prefix-in)) q (4683 . 2)) ((c form c (c (? . 3) q protect-out)) q (6756 . 2)) ((c form c (c (? . 25) q link)) q (194767 . 2)) ((c def c (c (? . 0) q string<?)) q (49272 . 4)) ((c def c (c (? . 0) q regexp-match-peek-positions-immediate/end)) q (88597 . 22)) ((c def c (c (? . 5) q class->interface)) q (190289 . 3)) ((c def c (c (? . 20) q set-add)) q (152577 . 4)) ((c def c (c (? . 0) q make-ephemeron-hashalw)) q (117587 . 4)) ((c def c (c (? . 0) q cdddr)) q (97728 . 3)) ((c def c (c (? . 13) q last-pair)) q (100142 . 3)) ((c def c (c (? . 0) q date-day)) c (? . 27)) ((c form c (c (? . 3) q define)) q (13271 . 14)) ((c def c (c (? . 0) q string)) q (47440 . 3)) ((c def c (c (? . 0) q integer-bytes->integer)) q (31231 . 11)) ((c def c (c (? . 0) q free-transformer-identifier=?)) q (294706 . 4)) ((c def c (c (? . 43) q generate-temporary)) q (319801 . 3)) ((c def c (c (? . 29) q make-custom-hash-types)) q (143398 . 24)) ((c def c (c (? . 7) q unsafe-weak-hash-iterate-key+value)) q (510036 . 5)) ((c def c (c (? . 3) q make-exn:fail:network)) c (? . 100)) ((c def c (c (? . 3) q regexp-match-positions*)) q (79676 . 17)) ((c def c (c (? . 35) q identity)) q (163721 . 3)) ((c form c (c (? . 96) q quasisyntax)) q (287096 . 2)) ((c def c (c (? . 20) q mutable-seteqv)) q (148261 . 4)) ((c form c (c (? . 5) q define/overment)) q (180087 . 3)) ((c def c (c (? . 48) q struct:collapsible-property)) c (? . 87)) ((c def c (c (? . 0) q struct:exn:fail:read:eof)) c (? . 92)) ((c def c (c (? . 0) q raise-range-error*)) q (251450 . 19)) ((c def c (c (? . 34) q would-be-future)) q (280981 . 3)) ((c def c (c (? . 0) q current-custodian)) q (415820 . 4)) ((c def c (c (? . 0) q struct-type-info)) q (417813 . 11)) ((c def c (c (? . 0) q make-portal-syntax)) q (313389 . 3)) ((c def c (c (? . 0) q global-port-print-handler)) q (370558 . 6)) ((c def c (c (? . 0) q cddar)) q (97646 . 3)) ((c def c (c (? . 11) q extflexp)) q (44126 . 3)) ((c def c (c (? . 5) q interface->method-names)) q (190903 . 3)) ((c def c (c (? . 0) q null?)) q (92893 . 3)) ((c def c (c (? . 0) q list->bytes)) q (65962 . 3)) ((c def c (c (? . 0) q exn:missing-module-accessor)) q (262522 . 4)) ((c def c (c (? . 7) q unsafe-fx->fl)) q (497502 . 3)) ((c def c (c (? . 30) q in-flvector)) q (37823 . 6)) ((c form c (c (? . 38) q syntax-id-rules)) q (288933 . 3)) ((c def c (c (? . 18) q true)) q (21609 . 2)) ((c def c (c (? . 57) q sinh)) q (33610 . 3)) ((c form c (c (? . 3) q #%printing-module-begin)) q (1836 . 2)) ((c form c (c (? . 18) q nor)) q (21892 . 2)) ((c def c (c (? . 0) q relative-path?)) q (441110 . 3)) ((c def c (c (? . 0) q exn:fail:read:eof?)) c (? . 92)) ((c form c (c (? . 25) q open)) q (194436 . 2)) ((c form c (c (? . 2) q reset0)) q (268235 . 2)) ((c def c (c (? . 0) q port-count-lines-enabled)) q (323754 . 4)) ((c def c (c (? . 0) q thread-cell-set!)) q (279306 . 4)) ((c def c (c (? . 7) q unsafe-flfloor)) q (496020 . 3)) ((c def c (c (? . 0) q identifier-binding-symbol)) q (298149 . 6)) ((c def c (c (? . 11) q make-extflvector)) q (44949 . 4)) ((c def c (c (? . 0) q hash-remove)) q (120755 . 4)) ((c form c (c (? . 56) q make-generic-struct-type-property)) q (172936 . 5)) ((c def c (c (? . 10) q contract-val-first-projection)) q (238282 . 4)) ((c def c (c (? . 0) q exn:fail:syntax:unbound?)) c (? . 125)) ((c form c (c (? . 38) q ~?)) q (287031 . 2)) ((c form c (c (? . 25) q define-values/invoke-unit)) q (194990 . 9)) ((c form c (c (? . 25) q contracted)) q (194511 . 2)) ((c def c (c (? . 71) q ormap)) q (94064 . 4)) ((c form c (c (? . 42) q infinite-generator)) q (138510 . 2)) ((c form c (c (? . 20) q for/setalw)) q (150227 . 2)) ((c def c (c (? . 20) q weak-set)) q (148465 . 3)) ((c def c (c (? . 7) q unsafe-char<=?)) q (497991 . 4)) ((c def c (c (? . 0) q exn:missing-module?)) q (262457 . 3)) ((c def c (c (? . 44) q export-out-sym)) c (? . 65)) ((c def c (c (? . 10) q impersonator-prop:blame)) q (227345 . 2)) ((c def c (c (? . 62) q system*)) q (474612 . 13)) ((c form c (c (? . 3) q for*/hasheqv)) q (17018 . 2)) ((c def c (c (? . 0) q make-known-char-range-list)) q (73737 . 5)) ((c def c (c (? . 30) q flexp)) q (36054 . 3)) ((c def c (c (? . 4) q write-to-file)) q (452385 . 11)) ((c def c (c (? . 72) q exn:fail:contract:blame?)) c (? . 105)) ((c def c (c (? . 29) q dict-implements?)) q (138916 . 4)) ((c def c (c (? . 0) q make-input-port)) q (331108 . 50)) ((c def c (c (? . 0) q string-locale-downcase)) q (51421 . 3)) ((c def c (c (? . 1) q read-bytes-line-evt)) q (349057 . 5)) ((c def c (c (? . 0) q free-label-identifier=?)) q (294939 . 4)) ((c form c (c (? . 53) q with-contract)) q (215721 . 12)) ((c form c (c (? . 0) q #%stratified-body)) q (19441 . 2)) ((c def c (c (? . 0) q caddr)) q (97400 . 3)) ((c def c (c (? . 7) q unsafe-stencil-vector-set!)) q (503566 . 5)) ((c def c (c (? . 77) q phase+space?)) q (320536 . 3)) ((c def c (c (? . 0) q namespace-require)) q (383896 . 5)) ((c def c (c (? . 8) q findf)) q (96201 . 4)) ((c form c (c (? . 0) q module)) q (1651 . 2)) ((c form c (c (? . 25) q define-compound-unit)) q (196520 . 5)) ((c form c (c (? . 31) q delay/sync)) q (263948 . 2)) ((c def c (c (? . 3) q call-with-output-file*)) q (327282 . 18)) ((c def c (c (? . 3) q make-exn:fail:syntax:unbound)) c (? . 125)) ((c def c (c (? . 0) q hash-set!)) q (118637 . 5)) ((c def c (c (? . 20) q set-eq?)) q (147481 . 3)) ((c def c (c (? . 0) q list->string)) q (48966 . 3)) ((c def c (c (? . 0) q break-enabled)) q (271735 . 4)) ((c form c (c (? . 5) q send-generic)) q (183174 . 3)) ((c def c (c (? . 0) q struct:exn:fail:network:errno)) c (? . 120)) ((c def c (c (? . 7) q unsafe-f64vector-ref)) q (502303 . 4)) ((c def c (c (? . 7) q unsafe-set-mcdr!)) q (498519 . 4)) ((c def c (c (? . 20) q chaperone-hash-set)) q (156037 . 21)) ((c def c (c (? . 0) q path<?)) q (439983 . 4)) ((c def c (c (? . 0) q gcd)) q (24984 . 3)) ((c def c (c (? . 30) q fltruncate)) q (35575 . 3)) ((c def c (c (? . 7) q unsafe-f64vector-set!)) q (502398 . 5)) ((c form c (c (? . 5) q public-final*)) q (179457 . 2)) ((c def c (c (? . 64) q tcp-addresses)) q (463509 . 7)) ((c def c (c (? . 17) q exn:fail:resource?)) c (? . 128)) ((c def c (c (? . 17) q sandbox-eval-limits)) q (426216 . 8)) ((c form c (c (? . 126) q opt/c)) q (238878 . 5)) ((c form c (c (? . 3) q file)) q (5245 . 2)) ((c def c (c (? . 0) q exn:fail:network?)) c (? . 100)) ((c def c (c (? . 7) q unsafe-fxlshift)) q (493602 . 4)) ((c def c (c (? . 29) q dict-set!)) q (139546 . 5)) ((c def c (c (? . 3) q chaperone-procedure)) q (407415 . 11)) ((c def c (c (? . 0) q compile)) q (392041 . 3)) ((c def c (c (? . 0) q rename-transformer-target)) q (299566 . 3)) ((c form c (c (? . 0) q #%expression)) q (10914 . 2)) ((c def c (c (? . 26) q udp-set-ttl!)) q (470260 . 4)) ((c def c (c (? . 127) q bytes-join)) q (71352 . 4)) ((q form ((lib "racket/private/define.rkt") define-values-for-syntax)) q (13804 . 2)) ((c def c (c (? . 1) q copy-port)) q (350846 . 4)) ((c def c (c (? . 33) q vector-filter)) q (111265 . 4)) ((c def c (c (? . 19) q sequence-for-each)) q (134996 . 4)) ((c def c (c (? . 3) q make-exn:fail:contract:arity)) c (? . 102)) ((c def c (c (? . 0) q bitwise-bit-field)) q (27624 . 6)) ((c def c (c (? . 3) q exn:fail:syntax:unbound)) c (? . 125)) ((c def c (c (? . 0) q port-count-lines!)) q (323067 . 3)) ((c def c (c (? . 0) q cdaar)) q (97482 . 3)) ((c form c (c (? . 0) q with-continuation-mark)) q (19181 . 2)) ((c def c (c (? . 51) q stream?)) q (135892 . 3)) ((c def c (c (? . 0) q list->vector)) q (108839 . 3)) ((c def c (c (? . 4) q call-with-file-lock/timeout)) q (459999 . 15)) ((c def c (c (? . 0) q peek-bytes-avail!)) q (355127 . 14)) ((c form c (c (? . 3) q define-splicing-for-clause-syntax)) q (18962 . 2)) ((c def c (c (? . 17) q exn:fail:resource-resource)) c (? . 128)) ((c def c (c (? . 4) q make-handle-get-preference-locked)) q (459232 . 16)) ((c def c (c (? . 0) q module-compiled-indirect-exports)) q (398147 . 4)) ((c def c (c (? . 11) q extflvector)) q (44878 . 3)) ((c def c (c (? . 0) q make-channel)) q (275841 . 2)) ((c def c (c (? . 137) q make-constructor-style-printer)) q (174173 . 6)) ((c def c (c (? . 72) q blame-replaced-negative?)) q (226293 . 3)) ((c def c (c (? . 52) q path-element?)) q (444751 . 3)) ((c def c (c (? . 0) q namespace-syntax-introduce)) q (386227 . 4)) ((c def c (c (? . 48) q collapsible-count-property)) c (? . 119)) ((c form c (c (? . 54) q splicing-local)) q (314131 . 2)) ((c def c (c (? . 45) q load-relative-extension)) q (389629 . 3)) ((c def c (c (? . 64) q tcp-accept-evt)) q (463354 . 3)) ((c def c (c (? . 0) q rename-file-or-directory)) q (446315 . 7)) ((c def c (c (? . 33) q vector-split-at-right)) q (110955 . 4)) ((c form c (c (? . 67) q object-contract)) q (186783 . 51)) ((c def c (c (? . 0) q exn:srclocs?)) q (261797 . 3)) ((c def c (c (? . 7) q unsafe-char->integer)) q (498159 . 3)) ((c def c (c (? . 19) q sequence-fold)) q (135095 . 5)) ((c def c (c (? . 22) q variable-reference->instance)) q (436658 . 6)) ((c def c (c (? . 0) q module-compiled-exports)) q (397837 . 7)) ((c def c (c (? . 57) q natural?)) q (34500 . 3)) ((c def c (c (? . 0) q prop:arity-string)) q (162929 . 2)) ((c def c (c (? . 0) q sync/enable-break)) q (274428 . 3)) ((c def c (c (? . 0) q memory-order-acquire)) q (284350 . 2)) ((c def c (c (? . 0) q peek-bytes!)) q (354632 . 12)) ((c def c (c (? . 0) q regexp-match-peek)) q (81471 . 15)) ((c def c (c (? . 0) q caadar)) q (98010 . 3)) ((c def c (c (? . 0) q current-subprocess-keep-file-descriptors)) q (473901 . 5)) ((c def c (c (? . 0) q current-subprocess-custodian-mode)) q (473611 . 5)) ((c def c (c (? . 17) q sandbox-path-permissions)) q (424990 . 9)) ((c form c (c (? . 25) q define-unit-binding)) q (196802 . 6)) ((c def c (c (? . 15) q fxvector-length)) q (40995 . 3)) ((c def c (c (? . 0) q will-executor?)) q (491862 . 3)) ((c def c (c (? . 0) q make-sibling-inspector)) q (417321 . 3)) ((c def c (c (? . 36) q pretty-print-depth)) q (372237 . 4)) ((c def c (c (? . 16) q between/c)) q (202053 . 4)) ((c form c (c (? . 3) q for*/hasheq)) q (16952 . 2)) ((c def c (c (? . 48) q collapsible-count-property?)) c (? . 119)) ((c def c (c (? . 3) q in-mlist)) q (125848 . 3)) ((c def c (c (? . 3) q in-hash-values)) q (127596 . 6)) ((c form c (c (? . 129) q filtered-out)) q (10819 . 2)) ((c def c (c (? . 0) q expand)) q (315650 . 4)) ((c def c (c (? . 3) q in-cycle)) q (132361 . 3)) ((c def c (c (? . 0) q exn:fail:filesystem:missing-module-path)) c (? . 91)) ((c def c (c (? . 10) q value-contract)) q (237799 . 3)) ((c def c (c (? . 10) q contract-first-order)) q (237348 . 3)) ((c def c (c (? . 57) q sgn)) q (33460 . 3)) ((c form c (c (? . 3) q #%module-begin)) q (1801 . 2)) ((c form c (c (? . 37) q or)) q (13114 . 2)) ((c def c (c (? . 7) q unsafe-extflmax)) q (514456 . 4)) ((c def c (c (? . 0) q make-phantom-bytes)) q (492599 . 3)) ((c def c (c (? . 0) q port-waiting-peer?)) q (322172 . 3)) ((c form c (c (? . 5) q define/pubment)) q (179835 . 3)) ((c def c (c (? . 20) q set-implements?)) q (151650 . 4)) ((c def c (c (? . 7) q unsafe-fx+/wraparound)) q (494065 . 4)) ((c def c (c (? . 3) q exn:fail:filesystem:version)) c (? . 109)) ((c def c (c (? . 57) q conjugate)) q (33554 . 3)) ((c def c (c (? . 0) q byte-pregexp)) q (75756 . 6)) ((c form c (c (? . 5) q rename-inner)) q (179352 . 2)) ((c def c (c (? . 7) q unsafe-mutable-hash-iterate-value)) q (505463 . 5)) ((c def c (c (? . 0) q identifier-transformer-binding)) q (295941 . 15)) ((c def c (c (? . 7) q unsafe-immutable-hash-iterate-value)) q (507649 . 5)) ((c def c (c (? . 17) q call-in-sandbox-context)) q (429462 . 7)) ((c def c (c (? . 0) q plumber-flush-handle-remove!)) q (419362 . 3)) ((c def c (c (? . 0) q exn:fail:syntax:missing-module-path)) c (? . 101)) ((c form c (c (? . 3) q only-space-in)) q (4931 . 2)) ((c def c (c (? . 7) q unsafe-set-immutable-car!)) q (498947 . 4)) ((c def c (c (? . 0) q make-struct-field-mutator)) q (168486 . 12)) ((c def c (c (? . 29) q in-dict)) q (142401 . 3)) ((c def c (c (? . 0) q unbox)) q (114711 . 3)) ((c def c (c (? . 4) q copy-directory/files)) q (453422 . 11)) ((c def c (c (? . 0) q string-locale>?)) q (50931 . 4)) ((c def c (c (? . 0) q list*)) q (93226 . 4)) ((c form c (c (? . 24) q unconstrained-domain->)) q (213918 . 2)) ((c def c (c (? . 0) q system-type)) q (487725 . 6)) ((c def c (c (? . 0) q syntax-local-submodules)) q (307071 . 2)) ((c def c (c (? . 0) q cdadar)) q (98810 . 3)) ((c def c (c (? . 7) q unsafe-fxand)) q (493351 . 3)) ((c def c (c (? . 45) q call-with-default-reading-parameterization)) q (365952 . 3)) ((c def c (c (? . 17) q make-evaluator)) c (? . 130)) ((c def c (c (? . 48) q has-impersonator-prop:collapsible?)) q (242256 . 3)) ((c def c (c (? . 4) q make-lock-file-name)) q (460774 . 6)) ((c def c (c (? . 26) q udp-send/enable-break)) q (466574 . 9)) ((c def c (c (? . 22) q instance?)) q (434989 . 3)) ((c def c (c (? . 13) q take)) q (101211 . 4)) ((c form c (c (? . 131) q enter!)) q (521409 . 9)) ((c def c (c (? . 0) q evt?)) q (274181 . 3)) ((c def c (c (? . 51) q prop:stream)) q (138179 . 2)) ((c def c (c (? . 1) q filter-read-input-port)) q (346563 . 27)) ((c def c (c (? . 13) q count)) q (104490 . 4)) ((c def c (c (? . 0) q regexp?)) q (75045 . 3)) ((c def c (c (? . 0) q log-level?)) q (480180 . 5)) ((c form c (c (? . 3) q define-syntax)) q (13604 . 3)) ((c def c (c (? . 0) q cadr)) q (96962 . 3)) ((c def c (c (? . 33) q vector-sort)) q (112083 . 13)) ((c def c (c (? . 30) q fl+)) q (34554 . 3)) ((c def c (c (? . 9) q place?)) q (281746 . 3)) ((c def c (c (? . 36) q make-tentative-pretty-print-output-port)) q (375266 . 8)) ((c def c (c (? . 0) q hash-eq?)) q (115478 . 3)) ((c def c (c (? . 51) q stream-length)) q (136806 . 3)) ((c def c (c (? . 7) q unsafe-ephemeron-hash-iterate-key+value)) q (512108 . 5)) ((c def c (c (? . 113) q vector/c)) q (203166 . 8)) ((c def c (c (? . 35) q curryr)) q (164310 . 6)) ((c def c (c (? . 0) q caar)) q (96898 . 3)) ((c def c (c (? . 0) q make-placeholder)) q (106400 . 3)) ((c def c (c (? . 0) q syntax-track-origin)) q (314825 . 7)) ((c def c (c (? . 0) q string->bytes/latin-1)) q (67947 . 9)) ((c def c (c (? . 0) q peek-string!)) q (354132 . 12)) ((c form c (c (? . 85) q define-serializable-struct/versions)) q (379263 . 4)) ((c def c (c (? . 10) q impersonator-contract?)) q (237551 . 3)) ((c def c (c (? . 0) q current-load-relative-directory)) q (390343 . 5)) ((c def c (c (? . 62) q string-no-nuls?)) q (478792 . 3)) ((c def c (c (? . 3) q call-with-input-file)) q (325762 . 7)) ((c def c (c (? . 3) q hash-copy-clear)) q (121071 . 4)) ((c def c (c (? . 5) q writable<%>)) q (189677 . 2)) ((c def c (c (? . 0) q symbol-interned?)) q (74345 . 3)) ((c def c (c (? . 0) q negative?)) q (23534 . 3)) ((c def c (c (? . 0) q thread)) q (272614 . 3)) ((c def c (c (? . 0) q output-port?)) q (321344 . 3)) ((c def c (c (? . 0) q syntax-local-transforming-module-provides?)) q (308830 . 2)) ((c def c (c (? . 57) q negative-integer?)) q (34305 . 3)) ((c def c (c (? . 0) q read-installation-configuration-table)) q (521016 . 3)) ((c def c (c (? . 36) q pretty-print)) q (371098 . 9)) ((c def c (c (? . 0) q read-bytes!)) q (352226 . 7)) ((c form c (c (? . 2) q control0-at)) q (268426 . 2)) ((c def c (c (? . 0) q write-special-evt)) q (362472 . 4)) ((c def c (c (? . 29) q dict-clear!)) q (142164 . 3)) ((c def c (c (? . 132) q getpid)) q (491246 . 2)) ((c def c (c (? . 1) q port->lines)) q (336461 . 8)) ((c def c (c (? . 22) q recompile-linklet)) q (431962 . 28)) ((c def c (c (? . 29) q dict-ref)) q (139342 . 6)) ((c def c (c (? . 51) q stream->list)) q (136749 . 3)) ((c form c (c (? . 32) q trace-define)) q (522186 . 3)) ((c def c (c (? . 44) q struct:export)) c (? . 65)) ((c def c (c (? . 0) q port-file-identity)) q (329619 . 3)) ((c def c (c (? . 13) q last)) q (100093 . 3)) ((c def c (c (? . 0) q struct:exn:fail:filesystem:exists)) c (? . 112)) ((c def c (c (? . 32) q trace-call)) q (522613 . 5)) ((c def c (c (? . 22) q instance-set-variable-value!)) q (435985 . 9)) ((c def c (c (? . 133) q crypto-random-bytes)) q (29550 . 3)) ((c def c (c (? . 0) q struct:exn:fail:syntax:unbound)) c (? . 125)) ((c def c (c (? . 0) q date?)) c (? . 27)) ((c def c (c (? . 0) q raise-user-error)) q (248054 . 10)) ((c def c (c (? . 48) q build-collapsible-contract-property)) q (240799 . 15)) ((c def c (c (? . 0) q write-bytes)) q (360381 . 7)) ((c def c (c (? . 60) q make-struct-info)) q (174736 . 3)) ((c def c (c (? . 0) q thread/suspend-to-kill)) q (272769 . 3)) ((c def c (c (? . 7) q unsafe-stencil-vector-ref)) q (503440 . 4)) ((c form c (c (? . 3) q all-from-out)) q (6507 . 2)) ((c def c (c (? . 15) q fx*/wraparound)) q (39872 . 4)) ((c def c (c (? . 7) q unsafe-chaperone-procedure)) q (516390 . 11)) ((c def c (c (? . 7) q unsafe-string-ref)) q (500573 . 5)) ((c def c (c (? . 0) q current-namespace)) q (382297 . 4)) ((c def c (c (? . 16) q flat-contract)) q (207551 . 3)) ((c def c (c (? . 30) q fl>)) q (35022 . 4)) ((c def c (c (? . 3) q exn:fail:filesystem)) c (? . 110)) ((c def c (c (? . 0) q thread-cell-values?)) q (279582 . 3)) ((c def c (c (? . 0) q inspector-superior?)) q (417438 . 5)) ((c def c (c (? . 0) q inexact?)) q (23750 . 3)) ((c def c (c (? . 5) q object=-hash-code)) q (190112 . 3)) ((c def c (c (? . 3) q in-indexed)) q (132224 . 3)) ((c def c (c (? . 0) q char-alphabetic?)) q (72776 . 3)) ((c def c (c (? . 12) q exn:misc:match?)) q (246662 . 3)) ((c def c (c (? . 0) q syntax?)) q (289171 . 3)) ((c def c (c (? . 5) q struct:exn:fail:object)) c (? . 41)) ((c def c (c (? . 7) q unsafe-vector*-set!)) q (500043 . 5)) ((c def c (c (? . 21) q import-mode)) c (? . 68)) ((c def c (c (? . 0) q byte-pregexp?)) q (75210 . 3)) ((c def c (c (? . 26) q udp-send-to/enable-break)) q (466052 . 13)) ((c form c (c (? . 25) q unit/s)) q (198088 . 6)) ((c def c (c (? . 30) q flreal-part)) q (36577 . 5)) ((c def c (c (? . 0) q regexp-match-peek-positions-immediate)) q (83722 . 19)) ((c def c (c (? . 0) q box-cas!)) q (115076 . 5)) ((c def c (c (? . 30) q flrandom)) q (36957 . 3)) ((c def c (c (? . 9) q place-enabled?)) q (281705 . 2)) ((c def c (c (? . 22) q instance-name)) q (435495 . 3)) ((c def c (c (? . 48) q collapsible-guard)) q (240587 . 5)) ((c def c (c (? . 0) q impersonator?)) q (400822 . 3)) ((c def c (c (? . 0) q port-provides-progress-evts?)) q (359160 . 3)) ((c def c (c (? . 3) q prop:procedure)) q (162706 . 2)) ((c def c (c (? . 26) q udp-close)) q (468414 . 3)) ((c def c (c (? . 19) q empty-sequence)) q (134249 . 2)) ((c def c (c (? . 0) q vector-set!)) q (107976 . 5)) ((c def c (c (? . 0) q exn:fail:unsupported?)) c (? . 134)) ((c def c (c (? . 0) q load-on-demand-enabled)) q (393276 . 4)) ((c form c (c (? . 74) q invariant-assertion)) q (216997 . 2)) ((c def c (c (? . 20) q set-equal-always?)) q (147364 . 3)) ((c def c (c (? . 17) q sandbox-memory-limit)) q (426079 . 4)) ((c def c (c (? . 0) q current-load/use-compiled)) q (389706 . 13)) ((c def c (c (? . 14) q contract-random-generate-stash)) q (244902 . 5)) ((c def c (c (? . 81) q serializable?)) q (377238 . 3)) ((c def c (c (? . 117) q prop:chaperone-unsafe-undefined)) q (518069 . 2)) ((c def c (c (? . 42) q generator-state)) q (138651 . 3)) ((c form c (c (? . 3) q for*/and)) q (17152 . 2)) ((c def c (c (? . 0) q syntax-local-module-interned-scope-symbols)) q (307130 . 3)) ((c def c (c (? . 62) q system/exit-code)) q (475160 . 5)) ((c def c (c (? . 0) q bytes->string/utf-8)) q (66486 . 6)) ((c form c (c (? . 31) q for*/list/concurrent)) q (264517 . 3)) ((c form c (c (? . 3) q for/list)) q (15008 . 2)) ((c def c (c (? . 15) q fx*)) q (38717 . 3)) ((c form c (c (? . 5) q private)) q (179140 . 2)) ((c def c (c (? . 24) q the-unsupplied-arg)) q (213999 . 2)) ((c form c (c (? . 10) q define/subexpression-pos-prop)) q (236897 . 6)) ((c form c (c (? . 5) q with-method)) q (182614 . 3)) ((c def c (c (? . 0) q struct-type-property-predicate-procedure?)) q (170102 . 5)) ((c form c (c (? . 5) q abstract)) q (179166 . 2)) ((c def c (c (? . 15) q fxmax)) q (40506 . 4)) ((c def c (c (? . 81) q serialize)) q (377297 . 16)) ((c def c (c (? . 29) q in-dict-keys)) q (142461 . 3)) ((c def c (c (? . 0) q real->floating-point-bytes)) q (32671 . 12)) ((c def c (c (? . 3) q make-exn:fail:read:non-char)) c (? . 123)) ((c form c (c (? . 124) q define-rename-transformer-parameter)) q (313658 . 2)) ((c def c (c (? . 3) q make-do-sequence)) q (132858 . 15)) ((c def c (c (? . 7) q unsafe-flabs)) q (495308 . 3)) ((c def c (c (? . 0) q make-plumber)) q (418892 . 2)) ((c def c (c (? . 13) q split-at-right)) q (101966 . 4)) ((c def c (c (? . 1) q port->bytes-lines)) q (336805 . 8)) ((c def c (c (? . 133) q random-sample)) q (29797 . 10)) ((c def c (c (? . 20) q set)) q (147697 . 3)) ((c def c (c (? . 0) q srcloc-position)) c (? . 106)) ((c def c (c (? . 26) q udp-receive!)) q (466932 . 11)) ((c def c (c (? . 0) q make-hash)) q (116273 . 4)) ((c def c (c (? . 3) q make-exn:fail:syntax)) c (? . 66)) ((c form c (c (? . 5) q set-field!)) q (182824 . 2)) ((c def c (c (? . 3) q regexp-match*)) q (77088 . 20)) ((c def c (c (? . 0) q custom-print-quotable?)) q (377120 . 2)) ((c def c (c (? . 0) q channel-put-evt)) q (276076 . 4)) ((c def c (c (? . 0) q parameter?)) q (280259 . 3)) ((c def c (c (? . 84) q mutable-hash?)) q (22502 . 3)) ((c def c (c (? . 3) q make-exn:fail:network:errno)) c (? . 120)) ((c def c (c (? . 0) q struct:exn:fail:user)) c (? . 83)) ((c def c (c (? . 28) q string-split)) q (53104 . 9)) ((c def c (c (? . 0) q peek-bytes-avail!/enable-break)) q (356385 . 14)) ((c def c (c (? . 0) q syntax-local-module-defined-identifiers)) q (308899 . 3)) ((c form c (c (? . 16) q prompt-tag/c)) q (206965 . 8)) ((c def c (c (? . 0) q caadr)) q (97236 . 3)) ((c def c (c (? . 0) q cdadr)) q (97564 . 3)) ((c def c (c (? . 7) q unsafe-fx->extfl)) q (515542 . 3)) ((c def c (c (? . 1) q read-string!-evt)) q (348768 . 4)) ((c def c (c (? . 7) q unsafe-extfl>)) q (514098 . 4)) ((c def c (c (? . 7) q unsafe-mutable-hash-iterate-pair)) q (506464 . 4)) ((c def c (c (? . 10) q build-compound-type-name)) q (223572 . 3)) ((c def c (c (? . 13) q shuffle)) q (105160 . 3)) ((c def c (c (? . 0) q bytes-convert-end)) q (70609 . 13)) ((c form c (c (? . 3) q for/and)) q (15580 . 2)) ((c form c (c (? . 56) q generic-instance/c)) q (171310 . 4)) ((c form c (c (? . 20) q gen:set)) q (152477 . 2)) ((c def c (c (? . 0) q syntax-shift-phase-level)) q (293003 . 4)) ((c def c (c (? . 3) q call-with-input-file*)) q (326991 . 7)) ((c def c (c (? . 16) q promise/c)) q (207491 . 3)) ((c def c (c (? . 3) q directory-list)) q (449552 . 4)) ((c def c (c (? . 51) q stream-append)) q (137174 . 3)) ((c def c (c (? . 30) q flvector-length)) q (37305 . 3)) ((c def c (c (? . 21) q expand-import)) q (309455 . 4)) ((c def c (c (? . 24) q first-or/c)) q (201531 . 3)) ((c def c (c (? . 32) q current-trace-print-results)) q (523318 . 10)) ((c def c (c (? . 0) q plumber?)) q (418838 . 3)) ((c def c (c (? . 0) q string>=?)) q (49555 . 4)) ((c def c (c (? . 12) q legacy-match-expander?)) q (247013 . 3)) ((c def c (c (? . 22) q correlated->datum)) q (437496 . 3)) ((c form c (c (? . 5) q interface*)) q (175608 . 7)) ((c def c (c (? . 0) q readtable?)) q (375886 . 3)) ((c def c (c (? . 0) q read-accept-compiled)) q (364595 . 4)) ((c def c (c (? . 13) q second)) q (99638 . 3)) ((c form c (c (? . 12) q struct*)) q (247487 . 2)) ((c def c (c (? . 3) q exn:fail:read:non-char)) c (? . 123)) ((c form c (c (? . 23) q define-runtime-module-path-index)) q (450357 . 2)) ((c def c (c (? . 0) q equal?/recur)) q (20406 . 5)) ((c def c (c (? . 42) q generator?)) q (138282 . 3)) ((c def c (c (? . 0) q equal?)) q (20104 . 4)) ((c def c (c (? . 59) q ~a)) q (54186 . 25)) ((c def c (c (? . 0) q channel?)) q (275787 . 3)) ((c def c (c (? . 1) q read-bytes-evt)) q (348311 . 4)) ((c def c (c (? . 0) q string-normalize-nfd)) q (50418 . 3)) ((c def c (c (? . 7) q unsafe-fx+)) q (492831 . 3)) ((c form c (c (? . 3) q for/first)) q (16005 . 2)) ((c def c (c (? . 29) q dict-implements/c)) q (139008 . 3)) ((c def c (c (? . 0) q cddaar)) q (99010 . 3)) ((c def c (c (? . 21) q make-import)) c (? . 68)) ((c form c (c (? . 3) q for/hasheqv)) q (15448 . 2)) ((c def c (c (? . 10) q get/build-collapsible-late-neg-projection)) q (239968 . 4)) ((c def c (c (? . 30) q flvector?)) q (37070 . 3)) ((c def c (c (? . 3) q make-exn:fail:unsupported)) c (? . 134)) ((c form c (c (? . 135) q struct/dc)) q (204865 . 27)) ((c def c (c (? . 0) q sub1)) q (24781 . 3)) ((c def c (c (? . 5) q object%)) q (175794 . 2)) ((c form c (c (? . 3) q for/hashalw)) q (15514 . 2)) ((c form c (c (? . 5) q super)) q (180729 . 3)) ((q form ((lib "racket/surrogate.rkt") surrogate)) q (192474 . 11)) ((c def c (c (? . 0) q print-pair-curly-braces)) q (367883 . 4)) ((c def c (c (? . 0) q make-hasheqv)) q (116565 . 4)) ((c def c (c (? . 0) q will-register)) q (491922 . 5)) ((c def c (c (? . 0) q current-directory-for-user)) q (449082 . 4)) ((c form c (c (? . 12) q match-lambda**)) q (246182 . 2)) ((c def c (c (? . 0) q exit-handler)) q (272265 . 4)) ((c def c (c (? . 0) q make-continuation-mark-key)) q (271262 . 4)) ((c def c (c (? . 0) q string->number)) q (30342 . 19)) ((c def c (c (? . 0) q current-seconds)) q (482546 . 2)) ((c def c (c (? . 0) q char-symbolic?)) q (73113 . 3)) ((c form c (c (? . 104) q include-at/relative-to)) q (317546 . 2)) ((c def c (c (? . 20) q set-clear)) q (153472 . 3)) ((c def c (c (? . 9) q place-break)) q (282998 . 4)) ((c def c (c (? . 0) q struct:exn:fail)) c (? . 122)) ((c def c (c (? . 26) q udp-receive-ready-evt)) q (468760 . 3)) ((c def c (c (? . 0) q chaperone-vector*)) q (409482 . 14)) ((c def c (c (? . 3) q make-exn:fail:contract:divide-by-zero)) c (? . 121)) ((c def c (c (? . 0) q real->single-flonum)) q (23928 . 3)) ((c def c (c (? . 0) q expand-syntax-to-top-form)) q (316336 . 4)) ((c def c (c (? . 8) q sort)) q (95236 . 9)) ((c def c (c (? . 3) q make-arity-at-least)) c (? . 70)) ((c def c (c (? . 3) q exn:fail:out-of-memory)) c (? . 99)) ((c form c (c (? . 54) q splicing-let-values)) q (313917 . 2)) ((c def c (c (? . 3) q print-value-columns)) q (369179 . 5)) ((c def c (c (? . 3) q in-ephemeron-hash)) q (130806 . 3)) ((c def c (c (? . 0) q log-all-levels)) q (480467 . 5)) ((c form c (c (? . 37) q and)) q (13090 . 2)) ((c def c (c (? . 0) q date-week-day)) c (? . 27)) ((c def c (c (? . 3) q make-date*)) c (? . 94)) ((c def c (c (? . 0) q port-write-handler)) q (369883 . 6)) ((c def c (c (? . 0) q make-log-receiver)) q (481167 . 5)) ((c def c (c (? . 0) q variable-reference-constant?)) q (386643 . 3)) ((c def c (c (? . 9) q place-channel-get)) q (283284 . 3)) ((c def c (c (? . 51) q stream-filter)) q (137837 . 4)) ((c def c (c (? . 13) q ninth)) q (99993 . 3)) ((c def c (c (? . 15) q fxvector)) q (40817 . 3)) ((c def c (c (? . 20) q weak-seteq)) q (148762 . 3)) ((c def c (c (? . 0) q exn:fail:network:errno?)) c (? . 120)) ((c def c (c (? . 0) q hash-ref-key)) q (119436 . 7)) ((c def c (c (? . 0) q current-module-name-resolver)) q (394192 . 19)) ((c def c (c (? . 0) q thread-try-receive)) q (274030 . 2)) ((c def c (c (? . 0) q module-compiled-language-info)) q (398331 . 4)) ((c def c (c (? . 0) q syntax-span)) q (289622 . 3)) ((c def c (c (? . 7) q unsafe-ephemeron-hash-iterate-first)) q (510880 . 3)) ((c def c (c (? . 20) q set-add!)) q (152662 . 4)) ((c def c (c (? . 11) q in-extflvector)) q (45632 . 6)) ((c def c (c (? . 0) q char>=?)) q (72206 . 4)) ((c def c (c (? . 7) q unsafe-fxxor)) q (493479 . 3)) ((c def c (c (? . 29) q dict-set)) q (139676 . 5)) ((c form c (c (? . 20) q for*/weak-setalw)) q (151337 . 2)) ((c def c (c (? . 0) q primitive?)) q (163515 . 3)) ((c def c (c (? . 3) q exn:fail:read)) c (? . 107)) ((c def c (c (? . 17) q sandbox-make-plumber)) q (427440 . 4)) ((c def c (c (? . 7) q unsafe-bytes-set!)) q (501123 . 5)) ((c def c (c (? . 0) q seconds->date)) q (482708 . 4)) ((c def c (c (? . 0) q make-immutable-hash)) q (118059 . 4)) ((c def c (c (? . 0) q chaperone-evt)) q (412183 . 7)) ((c def c (c (? . 51) q empty-stream)) q (136718 . 2)) ((c def c (c (? . 20) q set-implements/c)) q (151750 . 3)) ((c def c (c (? . 15) q fxvector-copy)) q (41322 . 5)) ((c def c (c (? . 0) q variable-reference->namespace)) q (386848 . 3)) ((c def c (c (? . 0) q syntax-local-bind-syntaxes)) q (303600 . 12)) ((c def c (c (? . 0) q integer-sqrt/remainder)) q (26141 . 3)) ((c def c (c (? . 89) q engine?)) q (284061 . 3)) ((c def c (c (? . 0) q impersonator-prop:application-mark)) q (414537 . 2)) ((c form c (c (? . 3) q for/fold/derived)) q (17787 . 4)) ((c def c (c (? . 0) q thread-dead?)) q (273485 . 3)) ((c form c (c (? . 37) q =>)) q (13080 . 2)) ((c def c (c (? . 0) q current-eval)) q (387810 . 4)) ((c def c (c (? . 72) q blame-value)) q (225912 . 3)) ((c def c (c (? . 0) q error-display-handler)) q (256302 . 4)) ((c def c (c (? . 44) q export-mode)) c (? . 65)) ((c def c (c (? . 0) q srcloc-span)) c (? . 106)) ((c def c (c (? . 0) q time-apply)) q (483919 . 7)) ((c def c (c (? . 0) q system-path-convention-type)) q (440182 . 2)) ((c def c (c (? . 1) q call-with-output-bytes)) q (337530 . 3)) ((c def c (c (? . 3) q make-exn:fail:filesystem:missing-module)) c (? . 91)) ((c def c (c (? . 0) q thread-suspend)) q (272978 . 3)) ((c def c (c (? . 45) q load/cd)) q (388949 . 3)) ((c def c (c (? . 0) q syntax-local-value/immediate)) q (305461 . 9)) ((c def c (c (? . 0) q syntax-local-make-definition-context)) q (302837 . 6)) ((c def c (c (? . 11) q extfllog)) q (44065 . 3)) ((c def c (c (? . 19) q sequence-append)) q (134629 . 3)) ((c def c (c (? . 5) q object-or-false=?)) q (190002 . 4)) ((c def c (c (? . 48) q struct:collapsible-wrapper-property)) c (? . 136)) ((c def c (c (? . 0) q srcloc-column)) c (? . 106)) ((c def c (c (? . 60) q struct-field-info?)) q (175325 . 3)) ((c def c (c (? . 17) q call-with-limits)) q (429755 . 5)) ((c def c (c (? . 0) q syntax-debug-info)) q (293808 . 5)) ((c def c (c (? . 29) q dict-map)) q (141551 . 4)) ((c def c (c (? . 0) q replace-evt)) q (275191 . 4)) ((c def c (c (? . 0) q struct-type-property?)) q (169949 . 3)) ((c def c (c (? . 0) q string->bytes/utf-8)) q (67454 . 6)) ((c form c (c (? . 2) q %)) q (267677 . 4)) ((c def c (c (? . 7) q unsafe-set-box!)) q (499177 . 4)) ((c form c (c (? . 3) q define-struct)) q (166151 . 6)) ((c def c (c (? . 95) q unit-static-signatures)) q (199844 . 9)) ((c def c (c (? . 0) q raise-result-arity-error*)) q (254398 . 11)) ((c def c (c (? . 3) q make-exn:fail:filesystem:version)) c (? . 109)) ((c def c (c (? . 30) q flatan)) q (35949 . 3)) ((c def c (c (? . 22) q correlated-source)) q (436949 . 3)) ((c def c (c (? . 0) q syntax-local-lift-values-expression)) q (305964 . 5)) ((c def c (c (? . 0) q use-collection-link-paths)) q (520902 . 4)) ((c form c (c (? . 3) q lambda)) q (11223 . 2)) ((c def c (c (? . 0) q struct:exn:fail:read)) c (? . 107)) ((c def c (c (? . 0) q module-path-index-split)) q (395987 . 5)) ((c def c (c (? . 0) q cdddar)) q (99210 . 3)) ((c def c (c (? . 16) q any/c)) q (201394 . 2)) ((c def c (c (? . 0) q char-ready?)) q (359539 . 3)) ((c form c (c (? . 47) q trait-rename)) q (184608 . 2)) ((c def c (c (? . 5) q member-name-key?)) q (181069 . 3)) ((c def c (c (? . 72) q blame?)) q (224651 . 3)) ((c def c (c (? . 77) q space?)) q (320484 . 3)) ((c def c (c (? . 15) q make-shared-fxvector)) q (42151 . 4)) ((c def c (c (? . 15) q fxvector?)) q (40762 . 3)) ((c def c (c (? . 8) q foldl)) q (94241 . 5)) ((c def c (c (? . 72) q blame-source)) q (225967 . 3)) ((c def c (c (? . 7) q unsafe-unbox*)) q (499255 . 3)) ((c def c (c (? . 0) q compile-allow-set!-undefined)) q (392508 . 4)) ((c form c (c (? . 54) q splicing-let)) q (313874 . 2)) ((c def c (c (? . 0) q char-grapheme-step)) q (74184 . 4)) ((c def c (c (? . 0) q struct-predicate-procedure?)) q (173440 . 3)) ((c def c (c (? . 20) q weak-setalw)) q (148560 . 4)) ((c def c (c (? . 3) q for-clause-syntax-protect)) q (18886 . 3)) ((c def c (c (? . 0) q path->string)) q (439140 . 3)) ((c def c (c (? . 7) q unsafe-immutable-hash-iterate-first)) q (506904 . 3)) ((c form c (c (? . 20) q for/weak-seteqv)) q (151058 . 2)) ((c def c (c (? . 3) q member)) q (95600 . 5)) ((c def c (c (? . 0) q local-expand/capture-lifts)) q (300949 . 13)) ((c def c (c (? . 3) q in-sequences)) q (132289 . 3)) ((c def c (c (? . 2) q abort)) q (267626 . 3)) ((c def c (c (? . 48) q collapsible-leaf/c-blame-list)) c (? . 49)) ((c form c (c (? . 67) q ->m)) q (185729 . 2)) ((c def c (c (? . 24) q non-empty-listof)) q (203994 . 3)) ((c def c (c (? . 0) q bytes-converter?)) q (71143 . 3)) ((c def c (c (? . 16) q suggest/c)) q (207917 . 5)) ((c def c (c (? . 0) q current-drive)) q (449229 . 2)) ((c def c (c (? . 17) q sandbox-coverage-enabled)) q (423821 . 4)) ((c def c (c (? . 0) q syntax-line)) q (289343 . 3)) ((c def c (c (? . 137) q struct->list)) q (174453 . 4)) ((c def c (c (? . 7) q unsafe-ephemeron-hash-iterate-value)) q (511645 . 5)) ((c def c (c (? . 0) q syntax-property-remove)) q (314523 . 4)) ((c def c (c (? . 0) q internal-definition-context-binding-identifiers)) q (304134 . 4)) ((c def c (c (? . 0) q read-curly-brace-with-tag)) q (364387 . 4)) ((c def c (c (? . 40) q date->julian/scalinger)) q (485903 . 3)) ((c def c (c (? . 0) q logger-name)) q (479391 . 3)) ((c def c (c (? . 19) q sequence-map)) q (134700 . 4)) ((c def c (c (? . 0) q quotient/remainder)) q (24554 . 4)) ((c def c (c (? . 0) q regexp-match-positions)) q (78697 . 19)) ((c def c (c (? . 0) q get-output-string)) q (330612 . 3)) ((c def c (c (? . 3) q hash->list)) q (121831 . 4)) ((c def c (c (? . 0) q make-ephemeron)) q (491513 . 4)) ((c def c (c (? . 10) q coerce-contracts)) q (223731 . 4)) ((c def c (c (? . 0) q current-load)) q (388245 . 15)) ((c def c (c (? . 0) q byte-regexp?)) q (75152 . 3)) ((c def c (c (? . 16) q parameter/c)) q (205937 . 7)) ((c def c (c (? . 0) q vector-set-performance-stats!)) q (488613 . 5)) ((c def c (c (? . 26) q udp-receive!/enable-break)) q (467804 . 12)) ((c def c (c (? . 36) q pretty-write)) q (371442 . 5)) ((c def c (c (? . 0) q exit)) q (272211 . 3)) ((c form c (c (? . 3) q for*/last)) q (17472 . 2)) ((c def c (c (? . 0) q executable-yield-handler)) q (272382 . 4)) ((c def c (c (? . 0) q parameter-procedure=?)) q (280315 . 4)) ((c def c (c (? . 9) q place-location?)) q (283590 . 3)) ((c def c (c (? . 3) q stop-before)) q (132647 . 4)) ((c form c (c (? . 118) q multi-in)) q (10619 . 8)) ((c def c (c (? . 15) q fxremainder)) q (38850 . 4)) ((c def c (c (? . 26) q udp-connected?)) q (468606 . 3)) ((c def c (c (? . 0) q stencil-vector)) q (113450 . 4)) ((c def c (c (? . 7) q unsafe-bytes-copy!)) q (501260 . 11)) ((c def c (c (? . 0) q custom-write-accessor)) q (376929 . 4)) ((c def c (c (? . 0) q string-ci<=?)) q (49844 . 4)) ((c def c (c (? . 57) q order-of-magnitude)) q (34036 . 3)) ((c def c (c (? . 7) q unsafe-extfl-)) q (513584 . 4)) ((q def ((lib "racket/rerequire.rkt") dynamic-rerequire)) q (521938 . 5)) ((c def c (c (? . 8) q assoc)) q (96283 . 5)) ((c def c (c (? . 0) q date*-time-zone-name)) c (? . 94)) ((c def c (c (? . 0) q struct-type-make-constructor)) q (418295 . 6)) ((c def c (c (? . 0) q print-struct)) q (368287 . 4)) ((c def c (c (? . 0) q will-execute)) q (492060 . 3)) ((c def c (c (? . 3) q syntax-recertify)) q (293544 . 9)) ((c def c (c (? . 0) q identifier-binding-portal-syntax)) q (298389 . 7)) ((c def c (c (? . 64) q tcp-listener?)) q (463295 . 3)) ((c def c (c (? . 0) q hash-placeholder?)) q (106628 . 3)) ((c def c (c (? . 0) q bytes->immutable-bytes)) q (64575 . 3)) ((c def c (c (? . 0) q string?)) q (47273 . 3)) ((c def c (c (? . 4) q set-user-id-bit)) q (461323 . 2)) ((c def c (c (? . 0) q vector*-set!)) q (108383 . 5)) ((c def c (c (? . 30) q flvector)) q (37125 . 3)) ((c def c (c (? . 0) q struct:exn:fail:unsupported)) c (? . 134)) ((c def c (c (? . 7) q unsafe-extflmin)) q (514364 . 4)) ((c def c (c (? . 3) q exn:fail:contract:divide-by-zero)) c (? . 121)) ((c def c (c (? . 138) q syntax-parameter-value)) q (313713 . 3)) ((c def c (c (? . 0) q sync/timeout/enable-break)) q (274494 . 4)) ((c def c (c (? . 11) q extfl+)) q (42469 . 4)) ((c def c (c (? . 0) q cleanse-path)) q (441733 . 3)) ((c def c (c (? . 0) q date*-nanosecond)) c (? . 94)) ((c def c (c (? . 2) q fcontrol)) q (267759 . 4)) ((c def c (c (? . 0) q syntax-local-expand-expression)) q (300225 . 6)) ((c def c (c (? . 48) q collapsible-contract-property?)) q (240723 . 3)) ((c def c (c (? . 32) q current-prefix-in)) q (523736 . 4)) ((c def c (c (? . 60) q checked-struct-info?)) q (174670 . 3)) ((c def c (c (? . 3) q chaperone-procedure*)) q (407780 . 11)) ((c form c (c (? . 31) q for/list/concurrent)) q (264320 . 8)) ((c def c (c (? . 0) q immutable?)) q (21553 . 3)) ((c def c (c (? . 26) q udp-multicast-join-group!)) q (470422 . 7)) ((c def c (c (? . 0) q current-command-line-arguments)) q (488275 . 5)) ((c def c (c (? . 31) q promise-running?)) q (263734 . 3)) ((c def c (c (? . 29) q dict-for-each)) q (141795 . 4)) ((c def c (c (? . 4) q make-temporary-file*)) q (456504 . 10)) ((c def c (c (? . 0) q close-input-port)) q (321453 . 3)) ((c def c (c (? . 0) q eof)) q (322242 . 2)) ((c def c (c (? . 0) q make-struct-type)) q (166579 . 31)) ((c def c (c (? . 7) q unsafe-fxmax)) q (494933 . 4)) ((c form c (c (? . 3) q for-syntax)) q (7051 . 2)) ((c def c (c (? . 15) q fxpopcount32)) q (39518 . 3)) ((c def c (c (? . 0) q error)) q (247791 . 10)) ((c def c (c (? . 26) q udp-multicast-set-interface!)) q (471034 . 5)) ((c def c (c (? . 22) q eval-linklet)) q (433215 . 3)) ((c def c (c (? . 4) q find-files)) q (454128 . 11)) ((c def c (c (? . 16) q natural-number/c)) q (202412 . 2)) ((c def c (c (? . 77) q phase+space)) q (320594 . 4)) ((c def c (c (? . 29) q dict-has-key?)) q (140386 . 4)) ((c def c (c (? . 0) q not)) q (21504 . 3)) ((c def c (c (? . 7) q unsafe-extflasin)) q (515037 . 3)) ((c def c (c (? . 7) q unsafe-fl/)) q (495225 . 4)) ((c def c (c (? . 1) q with-output-to-string)) q (337624 . 3)) ((c form c (c (? . 74) q contract)) q (217579 . 9)) ((c def c (c (? . 0) q resolve-path)) q (441665 . 3)) ((c def c (c (? . 8) q remq)) q (94665 . 4)) ((c def c (c (? . 0) q locale-string-encoding)) q (71205 . 2)) ((c def c (c (? . 24) q integer-in)) q (202211 . 4)) ((c def c (c (? . 7) q unsafe-extflabs)) q (513854 . 3)) ((c def c (c (? . 0) q current-thread-group)) q (417035 . 4)) ((c form c (c (? . 5) q instantiate)) q (181490 . 2)) ((c def c (c (? . 17) q break-evaluator)) q (428057 . 3)) ((c def c (c (? . 81) q make-serialize-info)) q (379715 . 13)) ((c def c (c (? . 0) q print-mpair-curly-braces)) q (367993 . 4)) ((c def c (c (? . 0) q boolean?)) q (21450 . 3)) ((c def c (c (? . 117) q check-not-unsafe-undefined/assign)) q (517843 . 5)) ((c def c (c (? . 48) q collapsible-ho/c?)) c (? . 58)) ((c def c (c (? . 51) q stream-first)) q (136006 . 3)) ((c def c (c (? . 0) q datum->syntax)) q (290149 . 20)) ((c def c (c (? . 0) q srcloc-line)) c (? . 106)) ((c form c (c (? . 5) q field-bound?)) q (182989 . 2)) ((c def c (c (? . 0) q current-logger)) q (479471 . 4)) ((c def c (c (? . 22) q datum->correlated)) q (437581 . 16)) ((c def c (c (? . 3) q open-output-file)) q (324168 . 15)) ((c def c (c (? . 0) q collect-garbage)) q (492235 . 3)) ((c def c (c (? . 29) q dict-iterate-value)) q (140298 . 4)) ((c def c (c (? . 0) q make-pseudo-random-generator)) q (28698 . 2)) ((c def c (c (? . 0) q string-ci<?)) q (49747 . 4)) ((c def c (c (? . 84) q mutable-string?)) q (22014 . 3)) ((c def c (c (? . 0) q make-semaphore)) q (276287 . 3)) ((c form c (c (? . 0) q #%provide)) q (9130 . 31)) ((c def c (c (? . 0) q compiled-expression-recompile)) q (392210 . 3)) ((c def c (c (? . 0) q path?)) q (438763 . 3)) ((c def c (c (? . 13) q empty?)) q (99483 . 3)) ((c def c (c (? . 0) q exn:break:terminate?)) c (? . 108)) ((c def c (c (? . 4) q group-read-bit)) q (461608 . 2)) ((c def c (c (? . 11) q extflfloor)) q (43502 . 3)) ((c def c (c (? . 1) q read-bytes!-evt)) q (348415 . 4)) ((c def c (c (? . 30) q flmin)) q (35255 . 4)) ((c def c (c (? . 11) q extflatan)) q (44003 . 3)) ((c def c (c (? . 0) q exn-continuation-marks)) c (? . 103)) ((c def c (c (? . 139) q hash-union!)) q (124350 . 11)) ((c def c (c (? . 0) q raise)) q (247703 . 4)) ((c def c (c (? . 0) q internal-definition-context?)) q (302763 . 3)) ((c def c (c (? . 0) q chaperone-box)) q (410080 . 12)) ((c def c (c (? . 0) q call-with-semaphore)) q (276828 . 9)) ((c def c (c (? . 0) q chaperone-struct)) q (408150 . 18)) ((c def c (c (? . 0) q vector-ref)) q (107873 . 4)) ((c def c (c (? . 11) q extflmin)) q (43269 . 4)) ((c def c (c (? . 3) q make-exn:fail:filesystem)) c (? . 110)) ((c form c (c (? . 3) q for-template)) q (7090 . 2)) ((c def c (c (? . 0) q char-utf-8-length)) q (71758 . 3)) ((c def c (c (? . 0) q string->path)) q (438939 . 3)) ((c def c (c (? . 0) q write-bytes-avail-evt)) q (362092 . 9)) ((c def c (c (? . 51) q stream-fold)) q (137616 . 5)) ((c form c (c (? . 23) q runtime-paths)) q (450531 . 2)) ((c form c (c (? . 56) q impersonate-generics)) q (171408 . 10)) ((c def c (c (? . 5) q subclass?)) q (190535 . 4)) ((c def c (c (? . 0) q bitwise-bit-set?)) q (27513 . 4)) ((c form c (c (? . 24) q cons/dc)) q (204273 . 8)) ((c def c (c (? . 0) q placeholder-get)) q (106561 . 3)) ((c form c (c (? . 140) q define-contract-struct)) q (214487 . 2)) ((c def c (c (? . 0) q namespace-set-variable-value!)) q (383128 . 11)) ((c def c (c (? . 29) q dict-mutable?)) q (139088 . 3)) ((c def c (c (? . 0) q syntax->datum)) q (290087 . 3)) ((c def c (c (? . 30) q flcos)) q (35739 . 3)) ((c def c (c (? . 0) q subprocess-wait)) q (473118 . 3)) ((c def c (c (? . 48) q collapsible-ho/c-missing-party)) c (? . 58)) ((c def c (c (? . 0) q make-hasheq-placeholder)) q (106787 . 3)) ((c def c (c (? . 20) q list->mutable-seteq)) q (149559 . 4)) ((c def c (c (? . 0) q impersonate-channel)) q (405484 . 13)) ((c def c (c (? . 4) q make-temporary-directory)) q (456262 . 6)) ((c def c (c (? . 19) q sequence/c)) q (135520 . 5)) ((c def c (c (? . 3) q regexp-replace-quote)) q (92299 . 5)) ((c def c (c (? . 0) q variable-reference->empty-namespace)) q (386741 . 3)) ((c def c (c (? . 3) q in-immutable-hash-pairs)) q (129695 . 3)) ((c def c (c (? . 3) q collection-path)) q (519605 . 8)) ((c def c (c (? . 3) q make-srcloc)) c (? . 106)) ((c def c (c (? . 0) q never-evt)) q (275336 . 2)) ((c def c (c (? . 81) q prop:serializable)) q (379677 . 2)) ((c def c (c (? . 0) q char-titlecase)) q (74059 . 3)) ((c def c (c (? . 26) q udp-multicast-set-loopback!)) q (471210 . 5)) ((c form c (c (? . 54) q splicing-parameterize)) q (314153 . 2)) ((c def c (c (? . 3) q in-list)) q (125792 . 3)) ((c def c (c (? . 17) q exn:fail:sandbox-terminated-reason)) c (? . 141)) ((c form c (c (? . 18) q nand)) q (21867 . 2)) ((c def c (c (? . 0) q read-string)) q (351589 . 4)) ((c def c (c (? . 0) q semaphore-try-wait?)) q (276520 . 3)) ((c def c (c (? . 0) q portal-syntax-content)) q (313465 . 3)) ((c def c (c (? . 0) q syntax-local-lift-provide)) q (306567 . 3)) ((c def c (c (? . 0) q string-ci=?)) q (49650 . 4)) ((c def c (c (? . 17) q sandbox-reader)) q (422343 . 4)) ((c def c (c (? . 5) q object->vector)) q (190176 . 4)) ((c def c (c (? . 0) q identifier-distinct-binding)) q (297437 . 18)) ((c def c (c (? . 0) q procedure-struct-type?)) q (162753 . 3)) ((c def c (c (? . 0) q equal-always-secondary-hash-code)) q (21143 . 3)) ((c def c (c (? . 115) q with-intercepted-logging)) q (481397 . 17)) ((c def c (c (? . 45) q path-replace-extension)) q (442589 . 4)) ((c def c (c (? . 3) q regexp-split)) q (89789 . 15)) ((c def c (c (? . 62) q process*)) q (476456 . 15)) ((c def c (c (? . 17) q get-user-custodian)) q (428146 . 3)) ((c def c (c (? . 0) q error-escape-handler)) q (256191 . 4)) ((c def c (c (? . 15) q fxabs)) q (39005 . 3)) ((c def c (c (? . 0) q call-with-semaphore/enable-break)) q (277152 . 9)) ((c form c (c (? . 25) q compound-unit)) q (195283 . 12)) ((c def c (c (? . 45) q putenv)) q (487523 . 4)) ((c form c (c (? . 53) q define/contract)) q (216181 . 3)) ((c def c (c (? . 0) q current-get-interaction-evt)) q (391466 . 4)) ((c def c (c (? . 16) q not/c)) q (201686 . 3)) ((c def c (c (? . 20) q make-custom-set-types)) q (157464 . 25)) ((c def c (c (? . 7) q unsafe-vector*->immutable-vector!)) q (500367 . 4)) ((c def c (c (? . 0) q make-custodian)) q (415519 . 4)) ((c def c (c (? . 3) q hash-empty?)) q (122296 . 3)) ((c def c (c (? . 35) q const)) q (163772 . 3)) ((c form c (c (? . 5) q class)) q (178503 . 2)) ((c def c (c (? . 7) q unsafe-fxnot)) q (493543 . 3)) ((c def c (c (? . 16) q flat-contract-with-explanation)) q (200816 . 6)) ((c def c (c (? . 48) q collapsible-ho/c-latest-blame)) c (? . 58)) ((c def c (c (? . 7) q unsafe-immutable-hash-iterate-key+value)) q (508102 . 5)) ((c def c (c (? . 0) q regexp)) q (75269 . 6)) ((c def c (c (? . 15) q most-negative-fixnum)) q (42320 . 2)) ((c def c (c (? . 29) q dict-iter-contract)) q (142840 . 3)) ((c def c (c (? . 0) q thread-cell-ref)) q (279237 . 3)) ((c def c (c (? . 0) q compiled-module-expression?)) q (396518 . 3)) ((c def c (c (? . 17) q sandbox-make-logger)) q (427323 . 4)) ((c def c (c (? . 0) q syntax-transforming-module-expression?)) q (307759 . 2)) ((c def c (c (? . 0) q string->uninterned-symbol)) q (74613 . 3)) ((c def c (c (? . 0) q equal-always?/recur)) q (20544 . 5)) ((c def c (c (? . 64) q tcp-close)) q (463221 . 3)) ((c def c (c (? . 36) q pretty-print-style-table?)) q (372942 . 3)) ((c def c (c (? . 0) q module-path-index?)) q (395648 . 3)) ((c def c (c (? . 0) q eof-object?)) q (322268 . 3)) ((c def c (c (? . 31) q promise?)) q (263505 . 3)) ((c def c (c (? . 0) q read-cdot)) q (365425 . 4)) ((c def c (c (? . 0) q cos)) q (26480 . 3)) ((c def c (c (? . 30) q flacos)) q (35896 . 3)) ((c def c (c (? . 12) q match-expander?)) q (246952 . 3)) ((c def c (c (? . 21) q import-src-mod-path)) c (? . 68)) ((c def c (c (? . 48) q collapsible-wrapper-property?)) c (? . 136)) ((c def c (c (? . 0) q procedure?)) q (158575 . 3)) ((c def c (c (? . 0) q variable-reference->module-path-index)) q (387085 . 4)) ((c def c (c (? . 0) q struct:date*)) c (? . 94)) ((c form c (c (? . 5) q define/public)) q (179757 . 3)) ((c def c (c (? . 0) q port-writes-atomic?)) q (362589 . 3)) ((c def c (c (? . 0) q write-special)) q (361851 . 4)) ((c def c (c (? . 3) q in-naturals)) q (125699 . 3)) ((c def c (c (? . 7) q unsafe-extflexpt)) q (515449 . 4)) ((c form c (c (? . 0) q quote-syntax)) q (19312 . 3)) ((c def c (c (? . 29) q dict-set*)) q (140615 . 5)) ((c def c (c (? . 117) q unsafe-undefined)) q (517667 . 2)) ((c def c (c (? . 0) q string->symbol)) q (74548 . 3)) ((c def c (c (? . 0) q exn:fail:read-srclocs)) c (? . 107)) ((c form c (c (? . 3) q combine-out)) q (6716 . 2)) ((c def c (c (? . 13) q list-set)) q (100446 . 5)) ((c form c (c (? . 20) q for/weak-seteq)) q (151003 . 2)) ((c def c (c (? . 0) q absolute-path?)) q (441004 . 3)) ((c def c (c (? . 0) q read-case-sensitive)) q (363931 . 4)) ((c def c (c (? . 0) q current-locale)) q (321164 . 4)) ((c def c (c (? . 36) q pretty-print-pre-print-hook)) q (374814 . 5)) ((c def c (c (? . 72) q blame-positive)) q (225738 . 3)) ((c def c (c (? . 0) q list-ref)) q (93513 . 4)) ((c form c (c (? . 25) q only)) q (194552 . 2)) ((c def c (c (? . 7) q unsafe-mutable-hash-iterate-next)) q (504867 . 4)) ((c form c (c (? . 54) q splicing-let-syntaxes)) q (314031 . 2)) ((c def c (c (? . 0) q atan)) q (26682 . 6)) ((c def c (c (? . 0) q bytes-set!)) q (64902 . 5)) ((c def c (c (? . 8) q memf)) q (96086 . 4)) ((c def c (c (? . 7) q unsafe-u16vector-ref)) q (502763 . 4)) ((c def c (c (? . 40) q date->string)) q (484189 . 4)) ((c def c (c (? . 0) q exn:fail:contract:variable?)) c (? . 93)) ((c def c (c (? . 52) q path-get-extension)) q (443612 . 3)) ((c def c (c (? . 10) q prop:blame)) q (227302 . 2)) ((c def c (c (? . 0) q current-preserved-thread-cell-values)) q (279395 . 4)) ((c form c (c (? . 5) q inherit/inner)) q (179273 . 2)) ((c def c (c (? . 0) q current-code-inspector)) q (418721 . 4)) ((c def c (c (? . 0) q eval-syntax)) q (388099 . 6)) ((c form c (c (? . 3) q for/or)) q (15642 . 2)) ((c def c (c (? . 5) q member-name-key-hash-code)) q (181251 . 3)) ((c form c (c (? . 54) q splicing-letrec-syntaxes+values)) q (314092 . 2)) ((c def c (c (? . 29) q dict-remove!)) q (139817 . 4)) ((c form c (c (? . 12) q match-define-values)) q (246609 . 2)) ((c form c (c (? . 25) q compound-unit/infer)) q (195796 . 18)) ((q def ((lib "racket/exn.rkt") exn->string)) q (262638 . 3)) ((c def c (c (? . 0) q current-environment-variables)) q (486149 . 4)) ((c def c (c (? . 22) q hash->linklet-bundle)) q (434613 . 3)) ((c def c (c (? . 48) q collapsible-leaf/c)) c (? . 49)) ((c form c (c (? . 142) q lazy-require)) q (19837 . 5)) ((c def c (c (? . 0) q char-iso-control?)) q (73444 . 3)) ((c form c (c (? . 5) q init-field)) q (178642 . 2)) ((c def c (c (? . 0) q current-reader-guard)) q (366047 . 4)) ((c def c (c (? . 59) q ~e)) q (57890 . 25)) ((c def c (c (? . 0) q continuation-mark-set->list)) q (269285 . 8)) ((c form c (c (? . 3) q only-meta-in)) q (4877 . 2)) ((c def c (c (? . 0) q string-downcase)) q (50201 . 3)) ((c def c (c (? . 0) q date-hour)) c (? . 27)) ((c def c (c (? . 7) q unsafe-stencil-vector-mask)) q (503165 . 4)) ((c def c (c (? . 17) q sandbox-security-guard)) q (424798 . 5)) ((c form c (c (? . 2) q shift0)) q (268297 . 2)) ((c def c (c (? . 0) q struct:exn:fail:out-of-memory)) c (? . 99)) ((c def c (c (? . 0) q weak-box-value)) q (491345 . 4)) ((c def c (c (? . 0) q filesystem-root-list)) q (449704 . 2)) ((c def c (c (? . 33) q vector-member)) q (111775 . 4)) ((c def c (c (? . 18) q boolean=?)) q (21735 . 4)) ((c def c (c (? . 4) q make-temporary-file)) q (455664 . 13)) ((c def c (c (? . 11) q extflvector-set!)) q (45289 . 5)) ((c def c (c (? . 7) q unsafe-extfl*)) q (513674 . 4)) ((c form c (c (? . 5) q interface)) q (175483 . 5)) ((c def c (c (? . 0) q placeholder-set!)) q (106466 . 4)) ((c form c (c (? . 118) q subtract-in)) q (10482 . 2)) ((c def c (c (? . 7) q unsafe-fl+)) q (495018 . 3)) ((c form c (c (? . 3) q define-for-syntax)) q (13721 . 3)) ((c form c (c (? . 37) q unless)) q (14363 . 2)) ((c def c (c (? . 3) q exn:break)) c (? . 55)) ((c form c (c (? . 3) q combine-in)) q (4785 . 2)) ((c def c (c (? . 0) q string-append)) q (48726 . 3)) ((c def c (c (? . 26) q udp-send-evt)) q (469307 . 9)) ((c form c (c (? . 3) q local-require)) q (5531 . 2)) ((c def c (c (? . 0) q null)) q (93102 . 2)) ((c def c (c (? . 84) q mutable-bytes?)) q (22138 . 3)) ((c def c (c (? . 0) q string-locale-ci>?)) q (51240 . 4)) ((c def c (c (? . 10) q coerce-chaperone-contracts)) q (223944 . 5)) ((c def c (c (? . 28) q string-contains?)) q (53899 . 4)) ((c def c (c (? . 0) q weak-box?)) q (491458 . 3)) ((c def c (c (? . 0) q make-resolved-module-path)) q (393451 . 7)) ((c form c (c (? . 20) q for/mutable-seteqv)) q (150596 . 2)) ((c form c (c (? . 3) q struct-copy)) q (173024 . 5)) ((c def c (c (? . 9) q place-kill)) q (282944 . 3)) ((c def c (c (? . 7) q unsafe-struct-set!)) q (504237 . 5)) ((c def c (c (? . 0) q variable-reference-from-unsafe?)) q (387709 . 3)) ((c form c (c (? . 6) q log-warning)) q (480890 . 3)) ((c def c (c (? . 3) q in-weak-hash-values)) q (130360 . 3)) ((c def c (c (? . 0) q syntax-local-name)) q (306675 . 2)) ((c def c (c (? . 45) q normal-case-path)) q (442095 . 3)) ((c def c (c (? . 0) q truncate)) q (25353 . 3)) ((c form c (c (? . 35) q thunk)) q (163884 . 2)) ((c def c (c (? . 18) q symbol=?)) q (21658 . 4)) ((c def c (c (? . 8) q remw*)) q (95157 . 4)) ((c def c (c (? . 4) q fold-files)) q (455014 . 12)) ((c def c (c (? . 7) q unsafe-fl>=)) q (495704 . 4)) ((c def c (c (? . 0) q read-accept-dot)) q (365225 . 4)) ((c def c (c (? . 0) q raise-arguments-error)) q (250110 . 10)) ((c def c (c (? . 0) q list-tail)) q (93612 . 4)) ((c def c (c (? . 4) q get-preference)) q (457854 . 18)) ((c def c (c (? . 22) q linklet-directory->hash)) q (434385 . 4)) ((c def c (c (? . 88) q chaperone-contract-property?)) q (236618 . 3)) ((c def c (c (? . 19) q sequence->list)) q (134284 . 3)) ((c def c (c (? . 47) q trait?)) q (184288 . 3)) ((c def c (c (? . 3) q hash-map/copy)) q (121385 . 5)) ((c form c (c (? . 118) q matching-identifiers-in)) q (10427 . 2)) ((c def c (c (? . 30) q make-flrectangular)) q (36362 . 7)) ((c def c (c (? . 3) q sequence-generate)) q (134029 . 3)) ((c form c (c (? . 2) q reset0-at)) q (268378 . 2)) ((c def c (c (? . 0) q channel-put-evt?)) q (276169 . 3)) ((c def c (c (? . 15) q fxmodulo)) q (38929 . 4)) ((c form c (c (? . 3) q Î»)) q (11263 . 11)) ((c def c (c (? . 0) q continuation-prompt-tag?)) q (266811 . 3)) ((c def c (c (? . 7) q unsafe-fxlshift/wraparound)) q (494332 . 4)) ((q form ((lib "racket/help.rkt") help)) q (521099 . 6)) ((c def c (c (? . 3) q gen:equal-mode+hash)) q (21366 . 2)) ((c def c (c (? . 77) q phase?)) q (320432 . 3)) ((c def c (c (? . 0) q log-receiver?)) q (481108 . 3)) ((c def c (c (? . 0) q hash-iterate-value)) q (122861 . 4)) ((c def c (c (? . 0) q fixnum?)) q (23149 . 3)) ((c def c (c (? . 0) q thread-receive)) q (273992 . 2)) ((c def c (c (? . 7) q unsafe-immutable-hash-iterate-key)) q (507206 . 5)) ((c def c (c (? . 7) q unsafe-fx>)) q (494594 . 4)) ((c def c (c (? . 7) q unsafe-chaperone-vector)) q (517203 . 11)) ((c def c (c (? . 0) q byte-ready?)) q (359447 . 3)) ((c def c (c (? . 0) q prop:expansion-contexts)) q (305011 . 2)) ((c form c (c (? . 9) q place*)) q (283682 . 9)) ((c def c (c (? . 20) q set-equal?)) q (147308 . 3)) ((c def c (c (? . 0) q printf)) q (367637 . 4)) ((c def c (c (? . 0) q struct-mutator-procedure?)) q (173585 . 3)) ((c def c (c (? . 0) q custodian-require-memory)) q (416100 . 7)) ((c def c (c (? . 59) q ~r)) q (59126 . 31)) ((c def c (c (? . 34) q make-fsemaphore)) q (281239 . 3)) ((c form c (c (? . 0) q case-lambda)) q (11681 . 6)) ((c def c (c (? . 28) q non-empty-string?)) q (53836 . 3)) ((c def c (c (? . 36) q pretty-print-print-line)) q (373831 . 15)) ((c form c (c (? . 20) q for/mutable-set)) q (150482 . 2)) ((c def c (c (? . 5) q implementation?)) q (190614 . 4)) ((c def c (c (? . 59) q ~.v)) q (61871 . 25)) ((c form c (c (? . 3) q except-in)) q (4641 . 2)) ((c form c (c (? . 3) q #%plain-lambda)) q (11811 . 2)) ((c def c (c (? . 21) q import-orig-stx)) c (? . 68)) ((c form c (c (? . 5) q generic)) q (183128 . 2)) ((c form c (c (? . 47) q trait-alias)) q (184563 . 2)) ((c def c (c (? . 7) q unsafe-flmax)) q (495874 . 4)) ((c def c (c (? . 0) q string->path-element)) q (439280 . 6)) ((c def c (c (? . 0) q abort-current-continuation)) q (265019 . 5)) ((c def c (c (? . 0) q current-thread-initial-stack-size)) q (488448 . 4)) ((c def c (c (? . 36) q pretty-print-post-print-hook)) q (374992 . 5)) ((c def c (c (? . 20) q set-symmetric-difference)) q (154237 . 4)) ((c def c (c (? . 45) q string-environment-variable-name?)) q (487646 . 3)) ((c def c (c (? . 4) q file->bytes-lines)) q (451552 . 8)) ((c def c (c (? . 36) q pretty-print-print-hook)) q (374622 . 5)) ((c def c (c (? . 3) q exn:fail:filesystem:missing-module)) c (? . 91)) ((c def c (c (? . 26) q udp-multicast-leave-group!)) q (470684 . 7)) ((c def c (c (? . 0) q chaperone-hash)) q (410516 . 22)) ((c def c (c (? . 26) q udp-set-receive-buffer-size!)) q (468238 . 5)) ((c def c (c (? . 22) q correlated-property-symbol-keys)) q (438677 . 3)) ((c def c (c (? . 3) q in-producer)) q (131972 . 7)) ((c def c (c (? . 22) q linklet-bundle?)) q (434552 . 3)) ((c def c (c (? . 29) q dict?)) q (138865 . 3)) ((c def c (c (? . 0) q write-char)) q (359778 . 4)) ((c def c (c (? . 84) q immutable-vector?)) q (22321 . 3)) ((c def c (c (? . 4) q fifo-type-bits)) q (461289 . 2)) ((c def c (c (? . 69) q async-channel?)) q (277528 . 3)) ((c def c (c (? . 30) q flvector-ref)) q (37392 . 4)) ((c def c (c (? . 0) q struct-type-authentic?)) q (418200 . 3)) ((c def c (c (? . 0) q char-foldcase)) q (74122 . 3)) ((c def c (c (? . 0) q char-ci<?)) q (72394 . 4)) ((c def c (c (? . 0) q compile-target-machine?)) q (392994 . 3)) ((c def c (c (? . 11) q extfl->fx)) q (44612 . 3)) ((c form c (c (? . 5) q pubment)) q (178824 . 2)) ((c def c (c (? . 6) q call-with-exception-handler)) q (255793 . 4)) ((c def c (c (? . 1) q relocate-output-port)) q (344505 . 13)) ((c def c (c (? . 20) q set/c)) q (151829 . 14)) ((c def c (c (? . 22) q instantiate-linklet)) q (433288 . 17)) ((c def c (c (? . 0) q make-weak-hash)) q (116847 . 4)) ((c def c (c (? . 7) q unsafe-set-box*!)) q (499343 . 4)) ((c def c (c (? . 7) q unsafe-extfllog)) q (515244 . 3)) ((c def c (c (? . 0) q string-locale=?)) q (50728 . 4)) ((c def c (c (? . 10) q contract?)) q (237431 . 3)) ((c def c (c (? . 7) q unsafe-fl=)) q (495367 . 4)) ((c def c (c (? . 0) q syntax-local-module-required-identifiers)) q (308984 . 8)) ((c def c (c (? . 15) q shared-fxvector)) q (42082 . 3)) ((c def c (c (? . 24) q list*of)) q (204066 . 4)) ((c form c (c (? . 38) q syntax-case*)) q (285888 . 3)) ((c def c (c (? . 0) q custodian-managed-list)) q (415927 . 4)) ((c def c (c (? . 57) q degrees->radians)) q (33292 . 3)) ((c def c (c (? . 11) q extfl>=)) q (43187 . 4)) ((c def c (c (? . 4) q delete-directory/files)) q (453929 . 5)) ((c def c (c (? . 3) q in-weak-hash)) q (129928 . 3)) ((c def c (c (? . 0) q make-hash-placeholder)) q (106691 . 3)) ((c def c (c (? . 35) q conjoin)) q (164006 . 4)) ((c def c (c (? . 4) q user-read-bit)) q (461464 . 2)) ((c def c (c (? . 0) q continuation-mark-set-first)) q (270557 . 10)) ((c form c (c (? . 34) q for*/async)) q (281174 . 2)) ((c def c (c (? . 45) q writeln)) q (367123 . 4)) ((c def c (c (? . 89) q engine-result)) q (284218 . 3)) ((c def c (c (? . 3) q date)) c (? . 27)) ((c form c (c (? . 11) q for/extflvector)) q (45878 . 2)) ((c def c (c (? . 13) q drop-common-prefix)) q (102638 . 5)) ((c def c (c (? . 0) q pseudo-random-generator?)) q (28769 . 3)) ((c def c (c (? . 11) q pi.t)) q (44794 . 2)) ((c def c (c (? . 11) q shared-extflvector)) q (46216 . 3)) ((c def c (c (? . 88) q make-contract)) q (218004 . 32)) ((c def c (c (? . 0) q ephemeron?)) q (491755 . 3)) ((c def c (c (? . 0) q current-output-port)) q (321825 . 4)) ((c form c (c (? . 143) q begin-encourage-inline)) q (19487 . 2)) ((c def c (c (? . 0) q raise-argument-error)) q (248350 . 13)) ((c def c (c (? . 0) q module-provide-protected?)) q (386370 . 5)) ((c def c (c (? . 0) q current-pseudo-random-generator)) q (28839 . 4)) ((c def c (c (? . 17) q sandbox-override-collection-paths)) q (424633 . 4)) ((c def c (c (? . 51) q stream-ormap)) q (137421 . 4)) ((c def c (c (? . 4) q group-write-bit)) q (461642 . 2)) ((c def c (c (? . 0) q read-bytes)) q (351745 . 4)) ((c def c (c (? . 0) q exn?)) c (? . 103)) ((c def c (c (? . 44) q syntax-local-provide-certifier)) q (312511 . 4)) ((c form c (c (? . 5) q augride*)) q (179646 . 2)) ((c def c (c (? . 11) q real->extfl)) q (44476 . 3)) ((c def c (c (? . 26) q udp-multicast-set-ttl!)) q (471457 . 4)) ((c def c (c (? . 29) q make-immutable-custom-hash)) q (146171 . 14)) ((c def c (c (? . 0) q thread-resume-evt)) q (273667 . 3)) ((c def c (c (? . 15) q fx<)) q (40118 . 4)) ((c def c (c (? . 0) q namespace-module-registry)) q (385727 . 3)) ((c def c (c (? . 2) q spawn)) q (268532 . 3)) ((c def c (c (? . 0) q current-plumber)) q (418931 . 4)) ((c def c (c (? . 0) q mcons)) q (107135 . 4)) ((c def c (c (? . 13) q combinations)) q (105214 . 6)) ((c def c (c (? . 0) q char=?)) q (71837 . 4)) ((c def c (c (? . 7) q unsafe-fxabs)) q (493292 . 3)) ((c def c (c (? . 0) q flush-output)) q (322325 . 3)) ((c def c (c (? . 0) q namespace-undefine-variable!)) q (383578 . 5)) ((c def c (c (? . 0) q string-port?)) q (329716 . 3)) ((c def c (c (? . 7) q unsafe-struct-ref)) q (504156 . 4)) ((c def c (c (? . 33) q vector-empty?)) q (109881 . 3)) ((c def c (c (? . 0) q bitwise-xor)) q (27364 . 3)) ((c form c (c (? . 5) q field)) q (178678 . 2)) ((c def c (c (? . 3) q make-exn:fail:syntax:missing-module)) c (? . 101)) ((c def c (c (? . 48) q struct:collapsible-leaf/c)) c (? . 49)) ((c def c (c (? . 0) q make-prefab-struct)) q (173737 . 4)) ((c def c (c (? . 4) q other-write-bit)) q (461789 . 2)) ((c def c (c (? . 4) q sticky-bit)) q (461394 . 2)) ((c def c (c (? . 0) q raise-result-arity-error)) q (254046 . 9)) ((c def c (c (? . 0) q module->realm)) q (400495 . 4)) ((c def c (c (? . 13) q fourth)) q (99739 . 3)) ((c def c (c (? . 24) q one-of/c)) q (202592 . 3)) ((c def c (c (? . 11) q extflvector-copy)) q (45432 . 5)) ((c def c (c (? . 10) q contract-stronger?)) q (237045 . 4)) ((c def c (c (? . 48) q collapsible-count-property-prev)) c (? . 119)) ((c def c (c (? . 32) q current-prefix-out)) q (523841 . 4)) ((c def c (c (? . 29) q dict-clear)) q (142105 . 3)) ((c def c (c (? . 0) q prop:input-port)) q (331011 . 2)) ((c def c (c (? . 139) q hash-intersect)) q (124847 . 12)) ((c def c (c (? . 0) q char-general-category)) q (73592 . 3)) ((c def c (c (? . 0) q format)) q (367800 . 4)) ((c def c (c (? . 5) q make-object)) q (181341 . 4)) ((c def c (c (? . 60) q struct-auto-info-lists)) q (175139 . 4)) ((c def c (c (? . 34) q fsemaphore-wait)) q (281459 . 3)) ((c form c (c (? . 5) q overment*)) q (179533 . 2)) ((c def c (c (? . 16) q channel/c)) q (206901 . 3)) ((c def c (c (? . 0) q plumber-add-flush!)) q (419178 . 5)) ((c def c (c (? . 0) q find-library-collection-links)) q (518587 . 5)) ((c form c (c (? . 5) q public-final)) q (178861 . 2)) ((c def c (c (? . 0) q simplify-path)) q (441920 . 4)) ((c def c (c (? . 0) q module-compiled-imports)) q (397604 . 5)) ((c def c (c (? . 1) q read-string-evt)) q (348663 . 4)) ((c form c (c (? . 2) q prompt0-at)) q (268329 . 2)) ((c def c (c (? . 7) q unsafe-fxremainder)) q (493123 . 4)) ((c def c (c (? . 22) q compile-linklet)) q (430744 . 27)) ((c def c (c (? . 0) q file-truncate)) q (322924 . 4)) ((c def c (c (? . 0) q local-transformer-expand/capture-lifts)) q (301580 . 13)) ((c def c (c (? . 11) q make-shared-extflvector)) q (46294 . 4)) ((c def c (c (? . 0) q custom-write?)) q (376870 . 3)) ((c def c (c (? . 3) q srcloc)) c (? . 106)) ((c form c (c (? . 34) q for/async)) q (281110 . 2)) ((c def c (c (? . 1) q peek-bytes!-evt)) c (? . 98)) ((c def c (c (? . 1) q with-input-from-bytes)) q (338102 . 4)) ((c form c (c (? . 3) q prefix-out)) q (6647 . 2)) ((c def c (c (? . 0) q struct?)) q (173259 . 3)) ((c def c (c (? . 5) q generic?)) q (189871 . 3)) ((c def c (c (? . 33) q vector-take)) q (110400 . 4)) ((c def c (c (? . 0) q eprintf)) q (367718 . 4)) ((c def c (c (? . 0) q read-square-bracket-with-tag)) q (364267 . 4)) ((c def c (c (? . 19) q sequence-count)) q (135218 . 4)) ((c def c (c (? . 0) q thread-dead-evt)) q (273604 . 3)) ((c def c (c (? . 7) q unsafe-struct*-set!)) q (504441 . 5)) ((c def c (c (? . 7) q unsafe-car)) q (498224 . 3)) ((c def c (c (? . 13) q splitf-at)) q (101671 . 4)) ((c def c (c (? . 5) q equal<%>)) q (189301 . 2)) ((c def c (c (? . 0) q hash-map)) q (121223 . 5)) ((c def c (c (? . 60) q struct:struct-info)) q (174931 . 2)) ((c def c (c (? . 2) q splitter)) q (268614 . 5)) ((c def c (c (? . 48) q collapsible-leaf/c-missing-party-list)) c (? . 49)) ((c def c (c (? . 0) q srcloc-source)) c (? . 106)) ((c def c (c (? . 22) q linklet-export-variables)) q (434081 . 3)) ((c form c (c (? . 74) q recursive-contract)) q (238473 . 10)) ((c def c (c (? . 3) q in-bytes-lines)) q (127094 . 5)) ((c def c (c (? . 48) q collapsible-wrapper-property-checking-wrapper)) c (? . 136)) ((c form c (c (? . 37) q letrec-syntaxes)) q (12428 . 2)) ((c form c (c (? . 5) q augment-final)) q (179097 . 2)) ((c def c (c (? . 0) q alarm-evt)) q (275399 . 4)) ((c def c (c (? . 0) q make-syntax-introducer)) q (308130 . 4)) ((c def c (c (? . 0) q error-value->string-handler)) q (256895 . 9)) ((c def c (c (? . 3) q keyword-apply)) q (159376 . 13)) ((c def c (c (? . 20) q set-copy-clear)) q (153378 . 3)) ((c def c (c (? . 51) q gen:stream)) q (138152 . 2)) ((c def c (c (? . 88) q prop:flat-contract)) q (227141 . 2)) ((c def c (c (? . 0) q semaphore-post)) q (276384 . 3)) ((c def c (c (? . 0) q internal-definition-context-seal)) q (304601 . 3)) ((c def c (c (? . 48) q get-impersonator-prop:collapsible)) q (242336 . 3)) ((c def c (c (? . 3) q hash-set*!)) q (118767 . 5)) ((c form c (c (? . 20) q for/weak-set)) q (150950 . 2)) ((c def c (c (? . 0) q number?)) q (22622 . 3)) ((c def c (c (? . 29) q prop:dict/contract)) q (142659 . 2)) ((c def c (c (? . 0) q prop:rename-transformer)) q (299674 . 2)) ((c form c (c (? . 25) q define-unit/s)) q (198208 . 6)) ((c form c (c (? . 5) q inherit-field)) q (178710 . 2)) ((c def c (c (? . 72) q make-exn:fail:contract:blame)) c (? . 105)) ((c def c (c (? . 26) q udp?)) q (468483 . 3)) ((c form c (c (? . 3) q for*/foldr/derived)) q (18193 . 4)) ((c def c (c (? . 30) q flmax)) q (35333 . 4)) ((c form c (c (? . 25) q import)) q (194691 . 2)) ((c def c (c (? . 0) q raise-range-error)) q (250786 . 17)) ((c def c (c (? . 7) q unsafe-vector-set!)) q (499718 . 5)) ((c def c (c (? . 0) q asin)) q (26580 . 3)) ((c def c (c (? . 20) q mutable-set)) q (148047 . 4)) ((c def c (c (? . 0) q sha256-bytes)) q (381611 . 5)) ((c def c (c (? . 0) q caaddr)) q (98110 . 3)) ((c form c (c (? . 3) q for*/hashalw)) q (17085 . 2)) ((q form ((lib "racket/unreachable.rkt") with-assert-unreachable)) q (272566 . 3)) ((c def c (c (? . 0) q bitwise-and)) q (27287 . 3)) ((c def c (c (? . 81) q deserialize)) q (378217 . 3)) ((c def c (c (? . 0) q default-global-port-print-handler)) q (370824 . 7)) ((c def c (c (? . 0) q hash-equal?)) q (115284 . 3)) ((c form c (c (? . 32) q trace-lambda)) q (522346 . 2)) ((c def c (c (? . 0) q hash-iterate-key)) q (122604 . 4)) ((c def c (c (? . 3) q in-ephemeron-hash-keys)) q (131037 . 3)) ((c def c (c (? . 10) q impersonator-prop:contracted)) q (227240 . 2)) ((c def c (c (? . 0) q file-or-directory-modify-seconds)) q (446561 . 16)) ((c form c (c (? . 3) q for/fold)) q (16132 . 6)) ((c form c (c (? . 6) q set!-values)) q (14426 . 2)) ((c def c (c (? . 144) q hash/c)) q (206308 . 9)) ((c def c (c (? . 3) q namespace-anchor->namespace)) q (382210 . 3)) ((c def c (c (? . 44) q make-provide-transformer)) q (311429 . 10)) ((c def c (c (? . 29) q dict-update!)) q (140875 . 10)) ((c def c (c (? . 0) q thread-running?)) q (273423 . 3)) ((c def c (c (? . 7) q unsafe-extfl+)) q (513494 . 4)) ((c def c (c (? . 0) q bytes-close-converter)) q (69677 . 3)) ((c def c (c (? . 11) q extflexpt)) q (44249 . 4)) ((c def c (c (? . 17) q sandbox-exit-handler)) q (425940 . 4)) ((c def c (c (? . 48) q collapsible-property-c-c)) c (? . 87)) ((c def c (c (? . 7) q unsafe-fx=)) q (494426 . 4)) ((c def c (c (? . 0) q log)) q (26344 . 4)) ((c def c (c (? . 0) q make-ephemeron-hasheqv)) q (117751 . 4)) ((c def c (c (? . 16) q evt/c)) q (207250 . 3)) ((c def c (c (? . 48) q prop:collapsible-contract)) q (240265 . 2)) ((c def c (c (? . 0) q date-second)) c (? . 27)) ((c form c (c (? . 12) q match-let*)) q (246271 . 2)) ((c form c (c (? . 32) q trace-define-syntax)) q (522259 . 3)) ((c def c (c (? . 0) q exn:fail?)) c (? . 122)) ((c def c (c (? . 0) q zero?)) q (23426 . 3)) ((c form c (c (? . 20) q for/weak-setalw)) q (151114 . 2)) ((c def c (c (? . 0) q liberal-define-context?)) q (309386 . 3)) ((c def c (c (? . 56) q exn:fail:support?)) c (? . 111)) ((c def c (c (? . 26) q udp-ttl)) q (470355 . 3)) ((c def c (c (? . 36) q pretty-format)) q (371784 . 5)) ((c def c (c (? . 0) q complete-path?)) q (441216 . 3)) ((c def c (c (? . 7) q unsafe-flcos)) q (496329 . 3)) ((c def c (c (? . 33) q vector-drop-right)) q (110724 . 4))))
syntax
(ifÂ test-exprÂ then-exprÂ else-expr)
syntax
(lambdaÂ formalsÂ bodyÂ ...+)
Â 
formalsÂ =Â id
      Â Â |Â (idÂ ...)
      Â Â |Â (idÂ ...+Â . rest-id)
syntax
(init-restÂ id)
(init-rest)
syntax
(parameterizeÂ ([parameter-exprÂ value-expr]Â ...)
Â Â bodyÂ ...+)
Â 
Â Â parameter-exprÂ :Â parameter?
procedure
(char->integerÂ char)Â ->Â exact-integer?
Â Â charÂ :Â char?
procedure
(argmaxÂ procÂ lst)Â ->Â any
Â Â procÂ :Â (->Â any/cÂ real?)
Â Â lstÂ :Â (and/cÂ pair?Â list?)
procedure
(readÂ [in])Â ->Â any
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(sortÂ  lst                        Â Â  Â Â 
Â     Â  less-than?                 Â Â  Â Â 
Â     Â [#:keyÂ extract-key          Â Â  Â Â 
Â     Â  #:cache-keys?Â cache-keys?])Â ->Â list?
Â Â lstÂ :Â list?
Â Â less-than?Â :Â (any/cÂ any/cÂ . -> .Â any/c)
Â Â extract-keyÂ :Â (any/cÂ . -> .Â any/c)Â =Â (lambdaÂ (x)Â x)
Â Â cache-keys?Â :Â boolean?Â =Â #f
struct
(struct color (red green blue alpha))
Â Â redÂ :Â (and/cÂ natural-number/cÂ (<=/cÂ 255))
Â Â greenÂ :Â (and/cÂ natural-number/cÂ (<=/cÂ 255))
Â Â blueÂ :Â (and/cÂ natural-number/cÂ (<=/cÂ 255))
Â Â alphaÂ :Â (and/cÂ natural-number/cÂ (<=/cÂ 255))
struct
(structÂ data-sourceÂ (connector args extensions)
Â Â Â Â #:mutable)
Â Â connectorÂ :Â (or/cÂ 'postgresqlÂ 'mysqlÂ 'sqlite3Â 'odbc)
Â Â argsÂ :Â list?
Â Â extensionsÂ :Â (listofÂ (list/cÂ symbol?Â any/c))
parameter
(current-command-line-arguments)Â ->Â (vectorofÂ string?)
(current-command-line-argumentsÂ argv)Â ->Â void?
Â Â argvÂ :Â (vectorofÂ (and/cÂ string?Â immutable?))
value
object%Â :Â class?

(somethingÂ idÂ thing-exprÂ ...)
Â 
Â Â thing-exprÂ :Â number?
syntax
(moduleÂ idÂ module-pathÂ formÂ ...)
syntax
(module*Â idÂ module-pathÂ formÂ ...)
(module*Â idÂ #fÂ formÂ ...)
syntax
(module+Â idÂ formÂ ...)
syntax
(#%module-beginÂ formÂ ...)
syntax
(#%printing-module-beginÂ formÂ ...)
syntax
(#%plain-module-beginÂ formÂ ...)
syntax
(#%declareÂ declaration-keywordÂ ...)
Â 
declaration-keywordÂ =Â #:cross-phase-persistent
                  Â Â |Â #:empty-namespace
                  Â Â |Â #:require=define
                  Â Â |Â #:unsafe
                  Â Â |Â #:realmÂ identifier
syntax
(requireÂ require-specÂ ...)
Â 
       require-specÂ =Â module-path
                  Â Â |Â (only-inÂ require-specÂ id-maybe-renamedÂ ...)
                  Â Â |Â (except-inÂ require-specÂ idÂ ...)
                  Â Â |Â (prefix-inÂ prefix-idÂ require-spec)
                  Â Â |Â (rename-inÂ require-specÂ [orig-idÂ bind-id]Â ...)
                  Â Â |Â (combine-inÂ require-specÂ ...)
                  Â Â |Â (relative-inÂ module-pathÂ require-specÂ ...)
                  Â Â |Â (only-meta-inÂ phase-levelÂ require-specÂ ...)
                  Â Â |Â (only-space-inÂ spaceÂ require-specÂ ...)
                  Â Â |Â (for-syntaxÂ require-specÂ ...)
                  Â Â |Â (for-templateÂ require-specÂ ...)
                  Â Â |Â (for-labelÂ require-specÂ ...)
                  Â Â |Â (for-metaÂ phase-levelÂ require-specÂ ...)
                  Â Â |Â (for-spaceÂ spaceÂ require-specÂ ...)
                  Â Â |Â derived-require-spec
                  Â Â Â Â Â 
        module-pathÂ =Â root-module-path
                  Â Â |Â (submodÂ root-module-pathÂ submod-path-elementÂ ...)
                  Â Â |Â (submodÂ "."Â submod-path-elementÂ ...)
                  Â Â |Â (submodÂ ".."Â submod-path-elementÂ ...)
                  Â Â Â Â Â 
   root-module-pathÂ =Â (quoteÂ id)
                  Â Â |Â rel-string
                  Â Â |Â (libÂ rel-stringÂ ...+)
                  Â Â |Â id
                  Â Â |Â (fileÂ string)
                  Â Â |Â (planetÂ id)
                  Â Â |Â (planetÂ string)
                  Â Â |Â (planetÂ rel-string
                      Â Â Â Â Â Â Â Â (user-stringÂ pkg-stringÂ vers)
                      Â Â Â Â Â Â Â Â rel-stringÂ ...)
                  Â Â Â Â Â 
submod-path-elementÂ =Â id
                  Â Â |Â ".."
                  Â Â Â Â Â 
   id-maybe-renamedÂ =Â id
                  Â Â |Â [orig-idÂ bind-id]
                  Â Â Â Â Â 
        phase-levelÂ =Â exact-integer
                  Â Â |Â #f
                  Â Â Â Â Â 
              spaceÂ =Â id
                  Â Â |Â #f
                  Â Â Â Â Â 
               versÂ =Â 
                  Â Â |Â nat
                  Â Â |Â natÂ minor-vers
                  Â Â Â Â Â 
         minor-versÂ =Â nat
                  Â Â |Â (natÂ nat)
                  Â Â |Â (=Â nat)
                  Â Â |Â (+Â nat)
                  Â Â |Â (-Â nat)

module-path
syntax
(only-inÂ require-specÂ id-maybe-renamedÂ ...)
syntax
(except-inÂ require-specÂ idÂ ...)
syntax
(prefix-inÂ prefix-idÂ require-spec)
syntax
(rename-inÂ require-specÂ [orig-idÂ bind-id]Â ...)
syntax
(combine-inÂ require-specÂ ...)
syntax
(relative-inÂ module-pathÂ require-specÂ ...)
syntax
(only-meta-inÂ phase-levelÂ require-specÂ ...)
syntax
(only-space-inÂ spaceÂ require-specÂ ...)

(for-metaÂ phase-levelÂ require-specÂ ...)

(for-syntaxÂ require-specÂ ...)

(for-templateÂ require-specÂ ...)

(for-labelÂ require-specÂ ...)

(for-spaceÂ spaceÂ require-specÂ ...)

derived-require-spec

(quoteÂ id)

rel-string
syntax
(libÂ rel-stringÂ ...+)

id
syntax
(fileÂ string)
syntax
(planetÂ id)
(planetÂ string)
(planetÂ rel-stringÂ (user-stringÂ pkg-stringÂ vers)
Â Â Â Â Â Â Â Â rel-stringÂ ...)
syntax
(submodÂ root-module-pathÂ submod-path-elementÂ ...)
(submodÂ "."Â submod-path-elementÂ ...)
(submodÂ ".."Â submod-path-elementÂ ...)
syntax
(local-requireÂ require-specÂ ...)
syntax
(provideÂ provide-specÂ ...)
Â 
provide-specÂ =Â id
           Â Â |Â (all-defined-out)
           Â Â |Â (all-from-outÂ module-pathÂ ...)
           Â Â |Â (rename-outÂ [orig-idÂ export-id]Â ...)
           Â Â |Â (except-outÂ provide-specÂ provide-specÂ ...)
           Â Â |Â (prefix-outÂ prefix-idÂ provide-spec)
           Â Â |Â (struct-outÂ id)
           Â Â |Â (combine-outÂ provide-specÂ ...)
           Â Â |Â (protect-outÂ provide-specÂ ...)
           Â Â |Â (for-metaÂ phase-levelÂ provide-specÂ ...)
           Â Â |Â (for-syntaxÂ provide-specÂ ...)
           Â Â |Â (for-templateÂ provide-specÂ ...)
           Â Â |Â (for-labelÂ provide-specÂ ...)
           Â Â |Â (for-spaceÂ spaceÂ provide-specÂ ...)
           Â Â |Â derived-provide-spec
           Â Â Â Â Â 
 phase-levelÂ =Â exact-integer
           Â Â |Â #f
           Â Â Â Â Â 
       spaceÂ =Â id
           Â Â |Â #f

id
syntax
(all-defined-out)
syntax
(all-from-outÂ module-pathÂ ...)
syntax
(rename-outÂ [orig-idÂ export-id]Â ...)
syntax
(except-outÂ provide-specÂ provide-specÂ ...)
syntax
(prefix-outÂ prefix-idÂ provide-spec)
syntax
(struct-outÂ id)
syntax
(combine-outÂ provide-specÂ ...)
syntax
(protect-outÂ provide-specÂ ...)

(for-metaÂ phase-levelÂ provide-specÂ ...)

(for-syntaxÂ provide-specÂ ...)

(for-templateÂ provide-specÂ ...)

(for-labelÂ provide-specÂ ...)

(for-spaceÂ spaceÂ provide-specÂ ...)

derived-provide-spec
syntax
(for-metaÂ phase-levelÂ require-specÂ ...)
syntax
(for-syntaxÂ require-specÂ ...)
syntax
(for-templateÂ require-specÂ ...)
syntax
(for-labelÂ require-specÂ ...)
syntax
(for-spaceÂ spaceÂ require-specÂ ...)
syntax
(#%requireÂ raw-require-specÂ ...)
Â 
    raw-require-specÂ =Â phaseless-spec
                   Â Â |Â (for-metaÂ phase-levelÂ raw-require-specÂ ...)
                   Â Â |Â (for-syntaxÂ raw-require-specÂ ...)
                   Â Â |Â (for-templateÂ raw-require-specÂ ...)
                   Â Â |Â (for-labelÂ raw-require-specÂ ...)
                   Â Â |Â (just-metaÂ phase-levelÂ raw-require-specÂ ...)
                   Â Â |Â (portalÂ portal-idÂ content)
                   Â Â Â Â Â 
         phase-levelÂ =Â exact-integer
                   Â Â |Â #f
                   Â Â Â Â Â 
      phaseless-specÂ =Â spaceless-spec
                   Â Â |Â (for-spaceÂ spaceÂ phaseless-specÂ ...)
                   Â Â |Â (just-spaceÂ spaceÂ spaceless-specÂ ...)
                   Â Â Â Â Â 
               spaceÂ =Â id
                   Â Â |Â #f
                   Â Â Â Â Â 
      spaceless-specÂ =Â raw-module-path
                   Â Â |Â (onlyÂ raw-module-pathÂ idÂ ...)
                   Â Â |Â (prefixÂ prefix-idÂ raw-module-path)
                   Â Â |Â (all-exceptÂ raw-module-pathÂ idÂ ...)
                   Â Â |Â (prefix-all-exceptÂ prefix-id
                       Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â raw-module-pathÂ idÂ ...)
                   Â Â |Â (renameÂ raw-module-pathÂ local-idÂ exported-id)
                   Â Â Â Â Â 
     raw-module-pathÂ =Â raw-root-module-path
                   Â Â |Â (submodÂ raw-root-module-pathÂ idÂ ...+)
                   Â Â |Â (submodÂ "."Â idÂ ...+)
                   Â Â Â Â Â 
raw-root-module-pathÂ =Â (quoteÂ id)
                   Â Â |Â rel-string
                   Â Â |Â (libÂ rel-stringÂ ...)
                   Â Â |Â id
                   Â Â |Â (fileÂ string)
                   Â Â |Â (planetÂ rel-string
                       Â Â Â Â Â Â Â Â (user-stringÂ pkg-stringÂ versÂ ...))
                   Â Â |Â literal-path
syntax
(#%provideÂ raw-provide-specÂ ...)
Â 
raw-provide-specÂ =Â phaseless-spec
               Â Â |Â (for-metaÂ phase-levelÂ phaseless-specÂ ...)
               Â Â |Â (for-syntaxÂ phaseless-specÂ ...)
               Â Â |Â (for-labelÂ phaseless-specÂ ...)
               Â Â |Â (protectÂ raw-provide-specÂ ...)
               Â Â Â Â Â 
     phase-levelÂ =Â exact-integer
               Â Â |Â #f
               Â Â Â Â Â 
  phaseless-specÂ =Â spaceless-spec
               Â Â |Â (for-spaceÂ spaceÂ spaceless-specÂ ...)
               Â Â |Â (protectÂ phaseless-specÂ ...)
               Â Â Â Â Â 
           spaceÂ =Â id
               Â Â |Â #f
               Â Â Â Â Â 
  spaceless-specÂ =Â id
               Â Â |Â (renameÂ local-idÂ export-id)
               Â Â |Â (structÂ struct-idÂ (field-idÂ ...))
               Â Â |Â (all-fromÂ raw-module-path)
               Â Â |Â (all-from-exceptÂ raw-module-pathÂ idÂ ...)
               Â Â |Â (all-defined)
               Â Â |Â (all-defined-exceptÂ idÂ ...)
               Â Â |Â (prefix-all-definedÂ prefix-id)
               Â Â |Â (prefix-all-defined-exceptÂ prefix-idÂ idÂ ...)
               Â Â |Â (protectÂ spaceless-specÂ ...)
               Â Â |Â (expandÂ (idÂ . datum))
               Â Â |Â (expandÂ (idÂ . datum)Â orig-form)
syntax
(matching-identifiers-inÂ regexpÂ require-spec)
syntax
(subtract-inÂ require-specÂ subtracted-specÂ ...)
syntax
(filtered-inÂ proc-exprÂ require-spec)
syntax
(path-upÂ rel-stringÂ ...)
syntax
(multi-inÂ subsÂ ...+)
Â 
    subsÂ =Â sub-path
       Â Â |Â (sub-pathÂ ...)
       Â Â Â Â Â 
sub-pathÂ =Â rel-string
       Â Â |Â id
syntax
(matching-identifiers-outÂ regexpÂ provide-spec)
syntax
(filtered-outÂ proc-exprÂ provide-spec)
syntax
(quoteÂ datum)
syntax
(#%datumÂ . datum)
syntax
(#%expressionÂ expr)
syntax
id
syntax
(#%topÂ . id)
syntax
(#%variable-referenceÂ id)
(#%variable-referenceÂ (#%topÂ . id))
(#%variable-reference)
syntax
(proc-exprÂ argÂ ...)
syntax
(#%appÂ proc-exprÂ argÂ ...)

arg-expr

keywordÂ arg-expr
syntax
(#%plain-appÂ proc-exprÂ arg-exprÂ ...)
(#%plain-app)
syntax
(lambdaÂ kw-formalsÂ bodyÂ ...+)
syntax
(Î»Â kw-formalsÂ bodyÂ ...+)
Â 
kw-formalsÂ =Â (argÂ ...)
         Â Â |Â (argÂ ...+Â . rest-id)
         Â Â |Â rest-id
         Â Â Â Â Â 
       argÂ =Â id
         Â Â |Â [idÂ default-expr]
         Â Â |Â keywordÂ id
         Â Â |Â keywordÂ [idÂ default-expr]

(idÂ ...)

(idÂ ...+Â . rest-id)

rest-id

(argÂ ...)

id

[idÂ default-expr]

keywordÂ id

keywordÂ [idÂ default-expr]

(argÂ ...+Â . rest-id)
syntax
(case-lambdaÂ [formalsÂ bodyÂ ...+]Â ...)
Â 
formalsÂ =Â (idÂ ...)
      Â Â |Â (idÂ ...+Â . rest-id)
      Â Â |Â rest-id
syntax
(#%plain-lambdaÂ formalsÂ bodyÂ ...+)
syntax
(letÂ ([idÂ val-expr]Â ...)Â bodyÂ ...+)
(letÂ proc-idÂ ([idÂ init-expr]Â ...)Â bodyÂ ...+)
syntax
(let*Â ([idÂ val-expr]Â ...)Â bodyÂ ...+)
syntax
(letrecÂ ([idÂ val-expr]Â ...)Â bodyÂ ...+)
syntax
(let-valuesÂ ([(idÂ ...)Â val-expr]Â ...)Â bodyÂ ...+)
syntax
(let*-valuesÂ ([(idÂ ...)Â val-expr]Â ...)Â bodyÂ ...+)
syntax
(letrec-valuesÂ ([(idÂ ...)Â val-expr]Â ...)Â bodyÂ ...+)
syntax
(let-syntaxÂ ([idÂ trans-expr]Â ...)Â bodyÂ ...+)
syntax
(letrec-syntaxÂ ([idÂ trans-expr]Â ...)Â bodyÂ ...+)
syntax
(let-syntaxesÂ ([(idÂ ...)Â trans-expr]Â ...)Â bodyÂ ...+)
syntax
(letrec-syntaxesÂ ([(idÂ ...)Â trans-expr]Â ...)Â bodyÂ ...+)
syntax
(letrec-syntaxes+valuesÂ ([(trans-idÂ ...)Â trans-expr]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ([(val-idÂ ...)Â val-expr]Â ...)
Â Â Â bodyÂ ...+)
syntax
(localÂ [definitionÂ ...]Â bodyÂ ...+)
syntax
(sharedÂ ([idÂ expr]Â ...)Â bodyÂ ...+)
syntax
(ifÂ test-exprÂ then-exprÂ else-expr)
syntax
(condÂ cond-clauseÂ ...)
Â 
cond-clauseÂ =Â [test-exprÂ then-bodyÂ ...+]
          Â Â |Â [elseÂ then-bodyÂ ...+]
          Â Â |Â [test-exprÂ =>Â proc-expr]
          Â Â |Â [test-expr]

[test-exprÂ then-bodyÂ ...+]

[test-exprÂ =>Â proc-expr]

[test-expr]
syntax
else
syntax
=>
syntax
(andÂ exprÂ ...)
syntax
(orÂ exprÂ ...)
syntax
(caseÂ val-exprÂ case-clauseÂ ...)
Â 
case-clauseÂ =Â [(datumÂ ...)Â then-bodyÂ ...+]
          Â Â |Â [elseÂ then-bodyÂ ...+]
syntax
(defineÂ idÂ expr)
(defineÂ (headÂ args)Â bodyÂ ...+)
Â 
headÂ =Â id
   Â Â |Â (headÂ args)
   Â Â Â Â Â 
argsÂ =Â argÂ ...
   Â Â |Â argÂ ...Â .Â rest-id
   Â Â Â Â Â 
 argÂ =Â arg-id
   Â Â |Â [arg-idÂ default-expr]
   Â Â |Â keywordÂ arg-id
   Â Â |Â keywordÂ [arg-idÂ default-expr]
syntax
(define-valuesÂ (idÂ ...)Â expr)
syntax
(define-syntaxÂ idÂ expr)
(define-syntaxÂ (headÂ args)Â bodyÂ ...+)
syntax
(define-syntaxesÂ (idÂ ...)Â expr)
syntax
(define-for-syntaxÂ idÂ expr)
(define-for-syntaxÂ (headÂ args)Â bodyÂ ...+)
syntax
(define-values-for-syntaxÂ (idÂ ...)Â expr)
syntax
(define-require-syntaxÂ idÂ proc-expr)
(define-require-syntaxÂ (idÂ argsÂ ...)Â bodyÂ ...+)
procedure
(syntax-local-require-introduceÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
syntax
(define-provide-syntaxÂ idÂ proc-expr)
(define-provide-syntaxÂ (idÂ argsÂ ...)Â bodyÂ ...+)
procedure
(syntax-local-provide-introduceÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
syntax
(beginÂ formÂ ...)
(beginÂ exprÂ ...+)
syntax
(begin0Â exprÂ ...+)
syntax
(begin-for-syntaxÂ formÂ ...)
syntax
(whenÂ test-exprÂ bodyÂ ...+)
syntax
(unlessÂ test-exprÂ bodyÂ ...+)
syntax
(set!Â idÂ expr)
syntax
(set!-valuesÂ (idÂ ...)Â expr)
syntax
(forÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
Â 
   for-clauseÂ =Â [idÂ seq-expr]
            Â Â |Â [(idÂ ...)Â seq-expr]
            Â Â |Â #:whenÂ guard-expr
            Â Â |Â #:unlessÂ guard-expr
            Â Â |Â #:doÂ [do-bodyÂ ...]
            Â Â |Â break-clause
            Â Â |Â #:spliceÂ (splicing-idÂ . form)
            Â Â Â Â Â 
 break-clauseÂ =Â #:breakÂ guard-expr
            Â Â |Â #:finalÂ guard-expr
            Â Â Â Â Â 
body-or-breakÂ =Â body
            Â Â |Â break-clause
Â 
Â Â seq-exprÂ :Â sequence?
syntax
(for/listÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/vectorÂ maybe-lengthÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
Â 
maybe-lengthÂ =Â 
           Â Â |Â #:lengthÂ length-expr
           Â Â |Â #:lengthÂ length-exprÂ #:fillÂ fill-expr
Â 
Â Â length-exprÂ :Â exact-nonnegative-integer?
syntax
(for/hashÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/hasheqÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/hasheqvÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/hashalwÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/andÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/orÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/sumÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/productÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/listsÂ (idÂ ...Â maybe-result)
Â Â Â Â Â Â Â Â Â Â Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
Â 
maybe-resultÂ =Â 
           Â Â |Â #:resultÂ result-expr
syntax
(for/firstÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/lastÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for/foldÂ ([accum-idÂ init-expr]Â ...Â maybe-result)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
Â 
maybe-resultÂ =Â 
           Â Â |Â #:resultÂ result-expr
syntax
(for/foldrÂ ([accum-idÂ init-expr]Â ...Â accum-optionÂ ...)
Â Â Â Â Â Â Â Â Â Â Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
Â 
accum-optionÂ =Â #:resultÂ result-expr
           Â Â |Â #:delay
           Â Â |Â #:delay-asÂ delayed-id
           Â Â |Â #:delay-withÂ delayer-id
syntax
(for*Â (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/listÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/listsÂ (idÂ ...Â maybe-result)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(for*/vectorÂ maybe-lengthÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/hashÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/hasheqÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/hasheqvÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/hashalwÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/andÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/orÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/sumÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/productÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/firstÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/lastÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/foldÂ ([accum-idÂ init-expr]Â ...Â maybe-result)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(for*/foldrÂ ([accum-idÂ init-expr]Â ...Â accum-optionÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(for/fold/derivedÂ orig-datum
Â Â ([accum-idÂ init-expr]Â ...Â maybe-result)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(for*/fold/derivedÂ orig-datum
Â Â ([accum-idÂ init-expr]Â ...Â maybe-result)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(for/foldr/derivedÂ orig-datum
Â Â ([accum-idÂ init-expr]Â ...Â accum-optionÂ ...)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(for*/foldr/derivedÂ orig-datum
Â Â ([accum-idÂ init-expr]Â ...Â accum-optionÂ ...)Â (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
syntax
(define-sequence-syntaxÂ id
Â Â expr-transform-expr
Â Â clause-transform-expr)
Â 
Â Â expr-transform-exprÂ :Â (or/cÂ (->Â identifier?)
                        Â Â Â Â Â Â (syntax?Â . -> .Â syntax?))
Â Â clause-transform-exprÂ :Â (syntax?Â . -> .Â syntax?)
syntax
(:do-inÂ ([(outer-idÂ ...)Â outer-expr]Â ...)
Â Â Â Â Â Â Â Â outer-check
Â Â Â Â Â Â Â Â ([loop-idÂ loop-expr]Â ...)
Â Â Â Â Â Â Â Â pos-guard
Â Â Â Â Â Â Â Â ([(inner-idÂ ...)Â inner-expr]Â ...)
Â Â Â Â Â Â Â Â pre-guard
Â Â Â Â Â Â Â Â post-guard
Â Â Â Â Â Â Â Â (loop-argÂ ...))
procedure
(for-clause-syntax-protectÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
syntax
(define-splicing-for-clause-syntaxÂ idÂ proc-expr)
syntax
(doÂ ([idÂ init-exprÂ step-expr-maybe]Â ...)
Â Â Â Â (stop?-exprÂ finish-exprÂ ...)
Â Â exprÂ ...)
Â 
step-expr-maybeÂ =Â 
              Â Â |Â step-expr
syntax
(with-continuation-markÂ key-exprÂ val-exprÂ result-expr)
syntax
(quasiquoteÂ datum)
syntax
unquote
syntax
unquote-splicing
syntax
(quote-syntaxÂ datum)
(quote-syntaxÂ datumÂ #:local)
syntax
(#%top-interactionÂ . form)
syntax
(blockÂ defn-or-exprÂ ...)
syntax
(#%stratified-bodyÂ defn-or-exprÂ ...)
syntax
(begin-encourage-inlineÂ formÂ ...)
syntax
(define-inlineÂ idÂ expr)
(define-inlineÂ (headÂ args)Â bodyÂ ...+)
Â 
headÂ =Â id
   Â Â |Â (headÂ args)
   Â Â Â Â Â 
argsÂ =Â argÂ ...
   Â Â |Â argÂ ...Â .Â rest-id
   Â Â Â Â Â 
 argÂ =Â arg-id
   Â Â |Â [arg-idÂ default-expr]
   Â Â |Â keywordÂ arg-id
   Â Â |Â keywordÂ [arg-idÂ default-expr]
syntax
(lazy-requireÂ [module-pathÂ (fun-importÂ ...)]Â ...)
Â 
fun-importÂ =Â fun-id
         Â Â |Â (orig-fun-idÂ fun-id)
syntax
(lazy-require-syntaxÂ [module-pathÂ (macro-importÂ ...)]Â ...)
Â 
macro-importÂ =Â macro-id
           Â Â |Â (orig-macro-idÂ macro-id)
procedure
(equal?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(equal-always?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(eqv?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(eq?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(equal?/recurÂ v1Â v2Â recur-proc)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
Â Â recur-procÂ :Â (any/cÂ any/cÂ ->Â any/c)
procedure
(equal-always?/recurÂ v1Â v2Â recur-proc)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
Â Â recur-procÂ :Â (any/cÂ any/cÂ ->Â any/c)
procedure
(equal-hash-codeÂ v)Â ->Â fixnum?
Â Â vÂ :Â any/c
procedure
(equal-hash-code/recurÂ vÂ recur-proc)Â ->Â fixnum?
Â Â vÂ :Â any/c
Â Â recur-procÂ :Â (->Â any/cÂ exact-integer?)
procedure
(equal-secondary-hash-codeÂ v)Â ->Â fixnum?
Â Â vÂ :Â any/c
procedure
(equal-always-hash-codeÂ v)Â ->Â fixnum?
Â Â vÂ :Â any/c
procedure
(equal-always-hash-code/recurÂ vÂ recur-proc)Â ->Â fixnum?
Â Â vÂ :Â any/c
Â Â recur-procÂ :Â (->Â any/cÂ exact-integer?)
procedure
(equal-always-secondary-hash-codeÂ v)Â ->Â fixnum?
Â Â vÂ :Â any/c
procedure
(eq-hash-codeÂ v)Â ->Â fixnum?
Â Â vÂ :Â any/c
procedure
(eqv-hash-codeÂ v)Â ->Â fixnum?
Â Â vÂ :Â any/c
value
gen:equal+hashÂ :Â any/c
value
gen:equal-mode+hashÂ :Â any/c
value
prop:equal+hashÂ :Â struct-type-property?
procedure
(boolean?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(notÂ v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(immutable?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
procedure
(symbol=?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â symbol?
Â Â bÂ :Â symbol?
procedure
(boolean=?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â boolean?
Â Â bÂ :Â boolean?
procedure
(false?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(nandÂ exprÂ ...)
syntax
(norÂ exprÂ ...)
syntax
(impliesÂ expr1Â expr2)
procedure
(xorÂ b1Â b2)Â ->Â any
Â Â b1Â :Â any/c
Â Â b2Â :Â any/c
procedure
(mutable-string?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(immutable-string?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(mutable-bytes?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(immutable-bytes?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(mutable-vector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(immutable-vector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(mutable-box?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(immutable-box?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(mutable-hash?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(immutable-hash?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(number?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(complex?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(real?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(rational?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(integer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(exact-integer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(exact-nonnegative-integer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(exact-positive-integer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(inexact-real?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(fixnum?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(flonum?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(double-flonum?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(single-flonum?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(single-flonum-available?)Â ->Â boolean?
procedure
(zero?Â z)Â ->Â boolean?
Â Â zÂ :Â number?
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â real?
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â real?
procedure
(even?Â n)Â ->Â boolean?
Â Â nÂ :Â integer?
procedure
(odd?Â n)Â ->Â boolean?
Â Â nÂ :Â integer?
procedure
(exact?Â z)Â ->Â boolean?
Â Â zÂ :Â number?
procedure
(inexact?Â z)Â ->Â boolean?
Â Â zÂ :Â number?
procedure
(inexact->exactÂ z)Â ->Â exact?
Â Â zÂ :Â number?
procedure
(exact->inexactÂ z)Â ->Â inexact?
Â Â zÂ :Â number?
procedure
(real->single-flonumÂ x)Â ->Â single-flonum?
Â Â xÂ :Â real?
procedure
(real->double-flonumÂ x)Â ->Â flonum?
Â Â xÂ :Â real?
procedure
(+Â zÂ ...)Â ->Â number?
Â Â zÂ :Â number?
procedure
(-Â z)Â ->Â number?
Â Â zÂ :Â number?
(-Â zÂ wÂ ...+)Â ->Â number?
Â Â zÂ :Â number?
Â Â wÂ :Â number?
procedure
(*Â zÂ ...)Â ->Â number?
Â Â zÂ :Â number?
procedure
(/Â z)Â ->Â number?
Â Â zÂ :Â number?
(/Â zÂ wÂ ...+)Â ->Â number?
Â Â zÂ :Â number?
Â Â wÂ :Â number?
procedure
(quotientÂ nÂ m)Â ->Â integer?
Â Â nÂ :Â integer?
Â Â mÂ :Â integer?
procedure
(remainderÂ nÂ m)Â ->Â integer?
Â Â nÂ :Â integer?
Â Â mÂ :Â integer?
procedure
(quotient/remainderÂ nÂ m)Â ->Â integer?Â integer?
Â Â nÂ :Â integer?
Â Â mÂ :Â integer?
procedure
(moduloÂ nÂ m)Â ->Â integer?
Â Â nÂ :Â integer?
Â Â mÂ :Â integer?
procedure
(add1Â z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(sub1Â z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(absÂ x)Â ->Â number?
Â Â xÂ :Â real?
procedure
(maxÂ xÂ ...+)Â ->Â real?
Â Â xÂ :Â real?
procedure
(minÂ xÂ ...+)Â ->Â real?
Â Â xÂ :Â real?
procedure
(gcdÂ nÂ ...)Â ->Â rational?
Â Â nÂ :Â rational?
procedure
(lcmÂ nÂ ...)Â ->Â rational?
Â Â nÂ :Â rational?
procedure
(roundÂ x)Â ->Â (or/cÂ integer?Â +inf.0Â -inf.0Â +nan.0)
Â Â xÂ :Â real?
procedure
(floorÂ x)Â ->Â (or/cÂ integer?Â +inf.0Â -inf.0Â +nan.0)
Â Â xÂ :Â real?
procedure
(ceilingÂ x)Â ->Â (or/cÂ integer?Â +inf.0Â -inf.0Â +nan.0)
Â Â xÂ :Â real?
procedure
(truncateÂ x)Â ->Â (or/cÂ integer?Â +inf.0Â -inf.0Â +nan.0)
Â Â xÂ :Â real?
procedure
(numeratorÂ q)Â ->Â integer?
Â Â qÂ :Â rational?
procedure
(denominatorÂ q)Â ->Â (and/cÂ integer?Â positive?)
Â Â qÂ :Â rational?
procedure
(rationalizeÂ xÂ tolerance)Â ->Â real?
Â Â xÂ :Â real?
Â Â toleranceÂ :Â real?
procedure
(=Â zÂ wÂ ...)Â ->Â boolean?
Â Â zÂ :Â number?
Â Â wÂ :Â number?
procedure
(<Â xÂ yÂ ...)Â ->Â boolean?
Â Â xÂ :Â real?
Â Â yÂ :Â real?
procedure
(<=Â xÂ yÂ ...)Â ->Â boolean?
Â Â xÂ :Â real?
Â Â yÂ :Â real?
procedure
(>Â xÂ yÂ ...)Â ->Â boolean?
Â Â xÂ :Â real?
Â Â yÂ :Â real?
procedure
(>=Â xÂ yÂ ...)Â ->Â boolean?
Â Â xÂ :Â real?
Â Â yÂ :Â real?
procedure
(sqrtÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(integer-sqrtÂ n)Â ->Â complex?
Â Â nÂ :Â integer?
procedure
(integer-sqrt/remainderÂ n)Â ->Â complex?Â integer?
Â Â nÂ :Â integer?
procedure
(exptÂ zÂ w)Â ->Â number?
Â Â zÂ :Â number?
Â Â wÂ :Â number?
procedure
(expÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(logÂ zÂ [b])Â ->Â number?
Â Â zÂ :Â number?
Â Â bÂ :Â number?Â =Â (expÂ 1)
procedure
(sinÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(cosÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(tanÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(asinÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(acosÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(atanÂ z)Â ->Â number?
Â Â zÂ :Â number?
(atanÂ yÂ x)Â ->Â number?
Â Â yÂ :Â real?
Â Â xÂ :Â real?
procedure
(make-rectangularÂ xÂ y)Â ->Â number?
Â Â xÂ :Â real?
Â Â yÂ :Â real?
procedure
(make-polarÂ magnitudeÂ angle)Â ->Â number?
Â Â magnitudeÂ :Â real?
Â Â angleÂ :Â real?
procedure
(real-partÂ z)Â ->Â real?
Â Â zÂ :Â number?
procedure
(imag-partÂ z)Â ->Â real?
Â Â zÂ :Â number?
procedure
(magnitudeÂ z)Â ->Â (and/cÂ real?Â (not/cÂ negative?))
Â Â zÂ :Â number?
procedure
(angleÂ z)Â ->Â real?
Â Â zÂ :Â number?
procedure
(bitwise-iorÂ nÂ ...)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
procedure
(bitwise-andÂ nÂ ...)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
procedure
(bitwise-xorÂ nÂ ...)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
procedure
(bitwise-notÂ n)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
procedure
(bitwise-bit-set?Â nÂ m)Â ->Â boolean?
Â Â nÂ :Â exact-integer?
Â Â mÂ :Â exact-nonnegative-integer?
procedure
(bitwise-bit-fieldÂ nÂ startÂ end)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
Â Â startÂ :Â exact-nonnegative-integer?
Â Â endÂ :Â (and/cÂ exact-nonnegative-integer?
        Â Â Â Â Â Â Â (>=/cÂ start))
procedure
(arithmetic-shiftÂ nÂ m)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
Â Â mÂ :Â exact-integer?
procedure
(integer-lengthÂ n)Â ->Â exact-integer?
Â Â nÂ :Â exact-integer?
procedure
(randomÂ kÂ [rand-gen])Â ->Â exact-nonnegative-integer?
Â Â kÂ :Â (integer-inÂ 1Â 4294967087)
Â Â rand-genÂ :Â pseudo-random-generator?
Â  Â        Â =Â (current-pseudo-random-generator)
(randomÂ minÂ maxÂ [rand-gen])Â ->Â exact-integer?
Â Â minÂ :Â exact-integer?
Â Â maxÂ :Â (integer-inÂ (+Â 1Â min)Â (+Â 4294967087Â min))
Â Â rand-genÂ :Â pseudo-random-generator?
Â  Â        Â =Â (current-pseudo-random-generator)
(randomÂ [rand-gen])Â ->Â (and/cÂ real?Â inexact?Â (>/cÂ 0)Â (</cÂ 1))
Â Â rand-genÂ :Â pseudo-random-generator?
Â  Â        Â =Â (current-pseudo-random-generator)
procedure
(random-seedÂ k)Â ->Â void?
Â Â kÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â 31)))
procedure
(make-pseudo-random-generator)Â ->Â pseudo-random-generator?
procedure
(pseudo-random-generator?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(current-pseudo-random-generator)Â ->Â pseudo-random-generator?
(current-pseudo-random-generatorÂ rand-gen)Â ->Â void?
Â Â rand-genÂ :Â pseudo-random-generator?
procedure
(pseudo-random-generator->vectorÂ rand-gen)
Â ->Â pseudo-random-generator-vector?
Â Â rand-genÂ :Â pseudo-random-generator?
procedure
(vector->pseudo-random-generatorÂ vec)
Â ->Â pseudo-random-generator?
Â Â vecÂ :Â pseudo-random-generator-vector?
procedure
(vector->pseudo-random-generator!Â rand-genÂ Â  Â Â 
Â                                 Â vec)    Â ->Â void?
Â Â rand-genÂ :Â pseudo-random-generator?
Â Â vecÂ :Â pseudo-random-generator-vector?
procedure
(pseudo-random-generator-vector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(crypto-random-bytesÂ n)Â ->Â bytes?
Â Â nÂ :Â exact-positive-integer?
procedure
(random-refÂ seqÂ [rand-gen])Â ->Â any/c
Â Â seqÂ :Â sequence?
Â Â rand-genÂ :Â pseudo-random-generator?
Â  Â        Â =Â (current-pseudo-random-generator)
procedure
(random-sampleÂ  seq                          Â Â  Â Â 
Â              Â  n                            Â Â  Â Â 
Â              Â [rand-gen                     Â Â  Â Â 
Â              Â  #:replacement?Â replacement?])Â ->Â (listofÂ any/c)
Â Â seqÂ :Â sequence?
Â Â nÂ :Â exact-positive-integer?
Â Â rand-genÂ :Â pseudo-random-generator?
Â  Â        Â =Â (current-pseudo-random-generator)
Â Â replacement?Â :Â any/cÂ =Â #t
procedure
(number->stringÂ zÂ [radix])Â ->Â string?
Â Â zÂ :Â number?
Â Â radixÂ :Â (or/cÂ 2Â 8Â 10Â 16)Â =Â 10
procedure
(string->numberÂ  s            Â 
Â               Â [radix        Â 
Â               Â  convert-mode Â 
Â               Â  decimal-mode Â 
Â               Â  single-mode])Â 
Â ->Â (or/cÂ number?Â #fÂ string?Â extflonum?)
Â Â sÂ :Â string?
Â Â radixÂ :Â (integer-inÂ 2Â 16)Â =Â 10
Â Â convert-modeÂ :Â (or/cÂ 'number-or-falseÂ 'read)
Â  Â            Â =Â 'number-or-false
Â Â decimal-modeÂ :Â (or/cÂ 'decimal-as-inexactÂ 'decimal-as-exact)
Â  Â            Â =Â (ifÂ (read-decimal-as-inexact)
                 Â Â Â Â 'decimal-as-inexact
                 Â Â Â Â 'decimal-as-exact)
Â Â single-modeÂ :Â (or/cÂ 'singleÂ 'double)
Â  Â           Â =Â (ifÂ (read-single-flonum)
                Â Â Â Â 'single
                Â Â Â Â 'double)
procedure
(real->decimal-stringÂ nÂ [decimal-digits])Â ->Â string?
Â Â nÂ :Â rational?
Â Â decimal-digitsÂ :Â exact-nonnegative-integer?Â =Â 2
procedure
(integer-bytes->integerÂ  bstr       Â Â  Â Â 
Â                       Â  signed?    Â Â  Â Â 
Â                       Â [big-endian?Â Â  Â Â 
Â                       Â  start      Â Â  Â Â 
Â                       Â  end])      Â ->Â exact-integer?
Â Â bstrÂ :Â bytes?
Â Â signed?Â :Â any/c
Â Â big-endian?Â :Â any/cÂ =Â (system-big-endian?)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(integer->integer-bytesÂ  n          Â Â  Â Â 
Â                       Â  size-n     Â Â  Â Â 
Â                       Â  signed?    Â Â  Â Â 
Â                       Â [big-endian?Â Â  Â Â 
Â                       Â  dest-bstr  Â Â  Â Â 
Â                       Â  start])    Â ->Â bytes?
Â Â nÂ :Â exact-integer?
Â Â size-nÂ :Â (or/cÂ 1Â 2Â 4Â 8)
Â Â signed?Â :Â any/c
Â Â big-endian?Â :Â any/cÂ =Â (system-big-endian?)
Â Â dest-bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â  Â         Â =Â (make-bytesÂ size-n)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(floating-point-bytes->realÂ  bstr       Â Â  Â Â 
Â                           Â [big-endian?Â Â  Â Â 
Â                           Â  start      Â Â  Â Â 
Â                           Â  end])      Â ->Â flonum?
Â Â bstrÂ :Â bytes?
Â Â big-endian?Â :Â any/cÂ =Â (system-big-endian?)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(real->floating-point-bytesÂ  x          Â Â  Â Â 
Â                           Â  size-n     Â Â  Â Â 
Â                           Â [big-endian?Â Â  Â Â 
Â                           Â  dest-bstr  Â Â  Â Â 
Â                           Â  start])    Â ->Â bytes?
Â Â xÂ :Â real?
Â Â size-nÂ :Â (or/cÂ 4Â 8)
Â Â big-endian?Â :Â any/cÂ =Â (system-big-endian?)
Â Â dest-bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â  Â         Â =Â (make-bytesÂ size-n)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(system-big-endian?)Â ->Â boolean?
value
piÂ :Â flonum?
value
pi.fÂ :Â (or/cÂ single-flonum?Â flonum?)
procedure
(degrees->radiansÂ x)Â ->Â real?
Â Â xÂ :Â real?
procedure
(radians->degreesÂ x)Â ->Â real?
Â Â xÂ :Â real?
procedure
(sqrÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(sgnÂ x)Â ->Â (or/cÂ (=/cÂ -1)Â (=/cÂ 0)Â (=/cÂ 1)Â +nan.0Â +nan.f)
Â Â xÂ :Â real?
procedure
(conjugateÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(sinhÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(coshÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(tanhÂ z)Â ->Â number?
Â Â zÂ :Â number?
procedure
(exact-roundÂ x)Â ->Â exact-integer?
Â Â xÂ :Â rational?
procedure
(exact-floorÂ x)Â ->Â exact-integer?
Â Â xÂ :Â rational?
procedure
(exact-ceilingÂ x)Â ->Â exact-integer?
Â Â xÂ :Â rational?
procedure
(exact-truncateÂ x)Â ->Â exact-integer?
Â Â xÂ :Â rational?
procedure
(order-of-magnitudeÂ r)Â ->Â (and/cÂ exact?Â integer?)
Â Â rÂ :Â (and/cÂ real?Â positive?)
procedure
(nan?Â x)Â ->Â boolean?
Â Â xÂ :Â real?
procedure
(infinite?Â x)Â ->Â boolean?
Â Â xÂ :Â real?
procedure
(positive-integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(negative-integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(nonpositive-integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(nonnegative-integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(natural?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fl+Â aÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(fl-Â aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(fl*Â aÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(fl/Â aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(flabsÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(fl=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(fl<Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(fl>Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(fl<=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(fl>=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(flminÂ aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(flmaxÂ aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(flroundÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flfloorÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flceilingÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(fltruncateÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flsingleÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flsinÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flcosÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(fltanÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flasinÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flacosÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flatanÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(fllogÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flexpÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flsqrtÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(flexptÂ aÂ b)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(->flÂ a)Â ->Â flonum?
Â Â aÂ :Â exact-integer?
procedure
(fl->exact-integerÂ a)Â ->Â exact-integer?
Â Â aÂ :Â flonum?
procedure
(make-flrectangularÂ aÂ b)
Â ->Â (and/cÂ complex?
    Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (real-partÂ c)))
    Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (imag-partÂ c))))
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(flreal-partÂ a)Â ->Â flonum?
Â Â aÂ :Â (and/cÂ complex?
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (real-partÂ c)))
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (imag-partÂ c))))
procedure
(flimag-partÂ a)Â ->Â flonum?
Â Â aÂ :Â (and/cÂ complex?
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (real-partÂ c)))
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (imag-partÂ c))))
procedure
(flrandomÂ rand-gen)Â ->Â (andÂ flonum?Â (>/cÂ 0)Â (</cÂ 1))
Â Â rand-genÂ :Â pseudo-random-generator?
procedure
(flvector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(flvectorÂ xÂ ...)Â ->Â flvector?
Â Â xÂ :Â flonum?
procedure
(make-flvectorÂ sizeÂ [x])Â ->Â flvector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â flonum?Â =Â 0.0
procedure
(flvector-lengthÂ vec)Â ->Â exact-nonnegative-integer?
Â Â vecÂ :Â flvector?
procedure
(flvector-refÂ vecÂ pos)Â ->Â flonum?
Â Â vecÂ :Â flvector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(flvector-set!Â vecÂ posÂ x)Â ->Â flonum?
Â Â vecÂ :Â flvector?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â flonum?
procedure
(flvector-copyÂ vecÂ [startÂ end])Â ->Â flvector?
Â Â vecÂ :Â flvector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ v)
procedure
(in-flvectorÂ vecÂ [startÂ stopÂ step])Â ->Â sequence?
Â Â vecÂ :Â flvector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â stopÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â stepÂ :Â (and/cÂ exact-integer?Â (not/cÂ zero?))Â =Â 1
syntax
(for/flvectorÂ maybe-lengthÂ (for-clauseÂ ...)Â bodyÂ ...)
syntax
(for*/flvectorÂ maybe-lengthÂ (for-clauseÂ ...)Â bodyÂ ...)
Â 
maybe-lengthÂ =Â 
           Â Â |Â #:lengthÂ length-expr
           Â Â |Â #:lengthÂ length-exprÂ #:fillÂ fill-expr
Â 
Â Â length-exprÂ :Â exact-nonnegative-integer?
Â Â fill-exprÂ :Â flonum?
procedure
(shared-flvectorÂ xÂ ...)Â ->Â flvector?
Â Â xÂ :Â flonum?
procedure
(make-shared-flvectorÂ sizeÂ [x])Â ->Â flvector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â flonum?Â =Â 0.0
procedure
(fx+Â aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fx-Â aÂ bÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx*Â aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fxquotientÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxremainderÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxmoduloÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxabsÂ a)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fxandÂ aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fxiorÂ aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fxxorÂ aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fxnotÂ a)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(fxlshiftÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxrshiftÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxpopcountÂ a)Â ->Â fixnum?
Â Â aÂ :Â (and/cÂ fixnum?Â (not/cÂ negative?))
procedure
(fxpopcount32Â a)Â ->Â fixnum?
Â Â aÂ :Â (and/cÂ fixnum?Â (integer-inÂ 0Â #xFFFFFFFF))
procedure
(fxpopcount16Â a)Â ->Â fixnum?
Â Â aÂ :Â (and/cÂ fixnum?Â (integer-inÂ 0Â #xFFFF))
procedure
(fx+/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx-/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx*/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxlshift/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx<Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx>Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx<=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx>=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxminÂ aÂ bÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fxmaxÂ aÂ bÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(fx->flÂ a)Â ->Â flonum?
Â Â aÂ :Â fixnum?
procedure
(fl->fxÂ fl)Â ->Â fixnum?
Â Â flÂ :Â flonum?
procedure
(fixnum-for-every-system?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(fxvector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(fxvectorÂ xÂ ...)Â ->Â fxvector?
Â Â xÂ :Â fixnum?
procedure
(make-fxvectorÂ sizeÂ [x])Â ->Â fxvector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â fixnum?Â =Â 0
procedure
(fxvector-lengthÂ vec)Â ->Â exact-nonnegative-integer?
Â Â vecÂ :Â fxvector?
procedure
(fxvector-refÂ vecÂ pos)Â ->Â fixnum?
Â Â vecÂ :Â fxvector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(fxvector-set!Â vecÂ posÂ x)Â ->Â fixnum?
Â Â vecÂ :Â fxvector?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â fixnum?
procedure
(fxvector-copyÂ vecÂ [startÂ end])Â ->Â fxvector?
Â Â vecÂ :Â fxvector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ v)
procedure
(in-fxvectorÂ vecÂ [startÂ stopÂ step])Â ->Â sequence?
Â Â vecÂ :Â fxvector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â stopÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â stepÂ :Â (and/cÂ exact-integer?Â (not/cÂ zero?))Â =Â 1
syntax
(for/fxvectorÂ maybe-lengthÂ (for-clauseÂ ...)Â bodyÂ ...)
syntax
(for*/fxvectorÂ maybe-lengthÂ (for-clauseÂ ...)Â bodyÂ ...)
Â 
maybe-lengthÂ =Â 
           Â Â |Â #:lengthÂ length-expr
           Â Â |Â #:lengthÂ length-exprÂ #:fillÂ fill-expr
Â 
Â Â length-exprÂ :Â exact-nonnegative-integer?
Â Â fill-exprÂ :Â fixnum?
procedure
(shared-fxvectorÂ xÂ ...)Â ->Â fxvector?
Â Â xÂ :Â fixnum?
procedure
(make-shared-fxvectorÂ sizeÂ [x])Â ->Â fxvector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â fixnum?Â =Â 0
procedure
(most-positive-fixnum)Â ->Â fixnum?
procedure
(most-negative-fixnum)Â ->Â fixnum?
procedure
(extflonum?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(extflonum-available?)Â ->Â boolean?
procedure
(extfl+Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl-Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl*Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl/Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extflabsÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extfl=Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl<Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl>Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl<=Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extfl>=Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extflminÂ aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extflmaxÂ aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(extflroundÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflfloorÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflceilingÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extfltruncateÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflsinÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflcosÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extfltanÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflasinÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflacosÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflatanÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extfllogÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflexpÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflsqrtÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(extflexptÂ aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(->extflÂ a)Â ->Â extflonum?
Â Â aÂ :Â exact-integer?
procedure
(extfl->exact-integerÂ a)Â ->Â exact-integer?
Â Â aÂ :Â extflonum?
procedure
(real->extflÂ a)Â ->Â extflonum?
Â Â aÂ :Â real?
procedure
(extfl->exactÂ a)Â ->Â (and/cÂ real?Â exact?)
Â Â aÂ :Â extflonum?
procedure
(extfl->fxÂ a)Â ->Â fixnum?
Â Â aÂ :Â extflonum?
procedure
(fx->extflÂ a)Â ->Â extflonum?
Â Â aÂ :Â fixnum?
procedure
(extfl->inexactÂ a)Â ->Â flonum?
Â Â aÂ :Â extflonum?
value
pi.tÂ :Â extflonum?
procedure
(extflvector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(extflvectorÂ xÂ ...)Â ->Â extflvector?
Â Â xÂ :Â extflonum?
procedure
(make-extflvectorÂ sizeÂ [x])Â ->Â extflvector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â extflonum?Â =Â 0.0t0
procedure
(extflvector-lengthÂ vec)Â ->Â exact-nonnegative-integer?
Â Â vecÂ :Â extflvector?
procedure
(extflvector-refÂ vecÂ pos)Â ->Â extflonum?
Â Â vecÂ :Â extflvector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(extflvector-set!Â vecÂ posÂ x)Â ->Â extflonum?
Â Â vecÂ :Â extflvector?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â extflonum?
procedure
(extflvector-copyÂ vecÂ [startÂ end])Â ->Â extflvector?
Â Â vecÂ :Â extflvector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ v)
procedure
(in-extflvectorÂ vecÂ [startÂ stopÂ step])Â ->Â sequence?
Â Â vecÂ :Â extflvector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â stopÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â stepÂ :Â (and/cÂ exact-integer?Â (not/cÂ zero?))Â =Â 1
syntax
(for/extflvectorÂ maybe-lengthÂ (for-clauseÂ ...)Â bodyÂ ...)
syntax
(for*/extflvectorÂ maybe-lengthÂ (for-clauseÂ ...)Â bodyÂ ...)
Â 
maybe-lengthÂ =Â 
           Â Â |Â #:lengthÂ length-expr
           Â Â |Â #:lengthÂ length-exprÂ #:fillÂ fill-expr
Â 
Â Â length-exprÂ :Â exact-nonnegative-integer?
Â Â fill-exprÂ :Â extflonum?
procedure
(shared-extflvectorÂ xÂ ...)Â ->Â extflvector?
Â Â xÂ :Â extflonum?
procedure
(make-shared-extflvectorÂ sizeÂ [x])Â ->Â extflvector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â xÂ :Â extflonum?Â =Â 0.0t0
procedure
(floating-point-bytes->extflÂ  bstr       Â Â  Â Â 
Â                            Â [big-endian?Â Â  Â Â 
Â                            Â  start      Â Â  Â Â 
Â                            Â  end])      Â ->Â extflonum?
Â Â bstrÂ :Â bytes?
Â Â big-endian?Â :Â any/cÂ =Â (system-big-endian?)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(extfl->floating-point-bytesÂ  x          Â Â  Â Â 
Â                            Â [big-endian?Â Â  Â Â 
Â                            Â  dest-bstr  Â Â  Â Â 
Â                            Â  start])    Â ->Â bytes?
Â Â xÂ :Â extflonum?
Â Â big-endian?Â :Â any/cÂ =Â (system-big-endian?)
Â Â dest-bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â  Â         Â =Â (make-bytesÂ 10)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(string?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-stringÂ kÂ [char])Â ->Â string?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â charÂ :Â char?Â =Â #\nul
procedure
(stringÂ charÂ ...)Â ->Â string?
Â Â charÂ :Â char?
procedure
(string->immutable-stringÂ str)Â ->Â (and/cÂ string?Â immutable?)
Â Â strÂ :Â string?
procedure
(string-lengthÂ str)Â ->Â exact-nonnegative-integer?
Â Â strÂ :Â string?
procedure
(string-refÂ strÂ k)Â ->Â char?
Â Â strÂ :Â string?
Â Â kÂ :Â exact-nonnegative-integer?
procedure
(string-set!Â strÂ kÂ char)Â ->Â void?
Â Â strÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â kÂ :Â exact-nonnegative-integer?
Â Â charÂ :Â char?
procedure
(substringÂ strÂ startÂ [end])Â ->Â string?
Â Â strÂ :Â string?
Â Â startÂ :Â exact-nonnegative-integer?
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(string-copyÂ str)Â ->Â string?
Â Â strÂ :Â string?
procedure
(string-copy!Â  dest      Â Â  Â Â 
Â             Â  dest-startÂ Â  Â Â 
Â             Â  src       Â Â  Â Â 
Â             Â [src-start Â Â  Â Â 
Â             Â  src-end]) Â ->Â void?
Â Â destÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â dest-startÂ :Â exact-nonnegative-integer?
Â Â srcÂ :Â string?
Â Â src-startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â src-endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ src)
procedure
(string-fill!Â destÂ char)Â ->Â void?
Â Â destÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â charÂ :Â char?
procedure
(string-appendÂ strÂ ...)Â ->Â string?
Â Â strÂ :Â string?
procedure
(string-append-immutableÂ strÂ ...)Â ->Â (and/cÂ string?Â immutable?)
Â Â strÂ :Â string?
procedure
(string->listÂ str)Â ->Â (listofÂ char?)
Â Â strÂ :Â string?
procedure
(list->stringÂ lst)Â ->Â string?
Â Â lstÂ :Â (listofÂ char?)
procedure
(build-stringÂ nÂ proc)Â ->Â string?
Â Â nÂ :Â exact-nonnegative-integer?
Â Â procÂ :Â (exact-nonnegative-integer?Â . -> .Â char?)
procedure
(string=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string<?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string<=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string>?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string>=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-ci=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-ci<?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-ci<=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-ci>?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-ci>=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-upcaseÂ str)Â ->Â string?
Â Â strÂ :Â string?
procedure
(string-downcaseÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-titlecaseÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-foldcaseÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-normalize-nfdÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-normalize-nfkdÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-normalize-nfcÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-normalize-nfkcÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-locale=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-locale<?Â str1Â str2Â ...+)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-locale>?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-locale-ci=?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-locale-ci<?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-locale-ci>?Â str1Â str2Â ...)Â ->Â boolean?
Â Â str1Â :Â string?
Â Â str2Â :Â string?
procedure
(string-locale-upcaseÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-locale-downcaseÂ string)Â ->Â string?
Â Â stringÂ :Â string?
procedure
(string-grapheme-spanÂ strÂ startÂ [end])Â ->Â exact-nonnegative-integer?
Â Â strÂ :Â string?
Â Â startÂ :Â exact-nonnegative-integer?
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(string-grapheme-countÂ strÂ startÂ [end])
Â ->Â exact-nonnegative-integer?
Â Â strÂ :Â string?
Â Â startÂ :Â exact-nonnegative-integer?
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(string-append*Â strÂ ...Â strs)Â ->Â string?
Â Â strÂ :Â string?
Â Â strsÂ :Â (listofÂ string?)
procedure
(string-joinÂ  strs                       Â Â  Â Â 
Â            Â [sep                        Â Â  Â Â 
Â            Â  #:before-firstÂ before-firstÂ Â  Â Â 
Â            Â  #:before-lastÂ before-last  Â Â  Â Â 
Â            Â  #:after-lastÂ after-last])  Â ->Â string?
Â Â strsÂ :Â (listofÂ string?)
Â Â sepÂ :Â string?Â =Â " "
Â Â before-firstÂ :Â string?Â =Â ""
Â Â before-lastÂ :Â string?Â =Â sep
Â Â after-lastÂ :Â string?Â =Â ""
procedure
(string-normalize-spacesÂ  str                Â Â  Â Â 
Â                        Â [sep                Â Â  Â Â 
Â                        Â  space              Â Â  Â Â 
Â                        Â  #:trim?Â trim?      Â Â  Â Â 
Â                        Â  #:repeat?Â repeat?])Â ->Â string?
Â Â strÂ :Â string?
Â Â sepÂ :Â (or/cÂ string?Â regexp?)Â =Â #px"\\s+"
Â Â spaceÂ :Â string?Â =Â " "
Â Â trim?Â :Â any/cÂ =Â #t
Â Â repeat?Â :Â any/cÂ =Â #f
procedure
(string-replaceÂ strÂ fromÂ toÂ [#:all?Â all?])Â ->Â string?
Â Â strÂ :Â string?
Â Â fromÂ :Â (or/cÂ string?Â regexp?)
Â Â toÂ :Â string?
Â Â all?Â :Â any/cÂ =Â #t
procedure
(string-splitÂ  str                Â Â  Â Â 
Â             Â [sep                Â Â  Â Â 
Â             Â  #:trim?Â trim?      Â Â  Â Â 
Â             Â  #:repeat?Â repeat?])Â ->Â (listofÂ string?)
Â Â strÂ :Â string?
Â Â sepÂ :Â (or/cÂ string?Â regexp?)Â =Â #px"\\s+"
Â Â trim?Â :Â any/cÂ =Â #t
Â Â repeat?Â :Â any/cÂ =Â #f
procedure
(string-trimÂ  str                Â Â  Â Â 
Â            Â [sep                Â Â  Â Â 
Â            Â  #:left?Â left?      Â Â  Â Â 
Â            Â  #:right?Â right?    Â Â  Â Â 
Â            Â  #:repeat?Â repeat?])Â ->Â string?
Â Â strÂ :Â string?
Â Â sepÂ :Â (or/cÂ string?Â regexp?)Â =Â #px"\\s+"
Â Â left?Â :Â any/cÂ =Â #t
Â Â right?Â :Â any/cÂ =Â #t
Â Â repeat?Â :Â any/cÂ =Â #f
procedure
(non-empty-string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(string-contains?Â sÂ contained)Â ->Â boolean?
Â Â sÂ :Â string?
Â Â containedÂ :Â string?
procedure
(string-prefix?Â sÂ prefix)Â ->Â boolean?
Â Â sÂ :Â string?
Â Â prefixÂ :Â string?
procedure
(string-suffix?Â sÂ suffix)Â ->Â boolean?
Â Â sÂ :Â string?
Â Â suffixÂ :Â string?
procedure
(~aÂ  v                                    Â Â  Â Â 
Â   Â  ...                                  Â Â  Â Â 
Â   Â [#:separatorÂ separator                Â Â  Â Â 
Â   Â  #:widthÂ width                        Â Â  Â Â 
Â   Â  #:max-widthÂ max-width                Â Â  Â Â 
Â   Â  #:min-widthÂ min-width                Â Â  Â Â 
Â   Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â   Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â   Â  #:alignÂ align                        Â Â  Â Â 
Â   Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â   Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â   Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â ""
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â ""
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(~vÂ  v                                    Â Â  Â Â 
Â   Â  ...                                  Â Â  Â Â 
Â   Â [#:separatorÂ separator                Â Â  Â Â 
Â   Â  #:widthÂ width                        Â Â  Â Â 
Â   Â  #:max-widthÂ max-width                Â Â  Â Â 
Â   Â  #:min-widthÂ min-width                Â Â  Â Â 
Â   Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â   Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â   Â  #:alignÂ align                        Â Â  Â Â 
Â   Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â   Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â   Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â " "
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â "..."
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(~sÂ  v                                    Â Â  Â Â 
Â   Â  ...                                  Â Â  Â Â 
Â   Â [#:separatorÂ separator                Â Â  Â Â 
Â   Â  #:widthÂ width                        Â Â  Â Â 
Â   Â  #:max-widthÂ max-width                Â Â  Â Â 
Â   Â  #:min-widthÂ min-width                Â Â  Â Â 
Â   Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â   Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â   Â  #:alignÂ align                        Â Â  Â Â 
Â   Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â   Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â   Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â " "
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â "..."
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(~eÂ  v                                    Â Â  Â Â 
Â   Â  ...                                  Â Â  Â Â 
Â   Â [#:separatorÂ separator                Â Â  Â Â 
Â   Â  #:widthÂ width                        Â Â  Â Â 
Â   Â  #:max-widthÂ max-width                Â Â  Â Â 
Â   Â  #:min-widthÂ min-width                Â Â  Â Â 
Â   Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â   Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â   Â  #:alignÂ align                        Â Â  Â Â 
Â   Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â   Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â   Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â " "
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â "..."
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(~rÂ  x                                Â Â  Â Â 
Â   Â [#:signÂ sign                      Â Â  Â Â 
Â   Â  #:baseÂ base                      Â Â  Â Â 
Â   Â  #:precisionÂ precision            Â Â  Â Â 
Â   Â  #:notationÂ notation              Â Â  Â Â 
Â   Â  #:format-exponentÂ format-exponentÂ Â  Â Â 
Â   Â  #:min-widthÂ min-width            Â Â  Â Â 
Â   Â  #:pad-stringÂ pad-string          Â Â  Â Â 
Â   Â  #:groupsÂ groups                  Â Â  Â Â 
Â   Â  #:group-sepÂ group-sep            Â Â  Â Â 
Â   Â  #:decimal-sepÂ decimal-sep])      Â ->Â string?
Â Â xÂ :Â rational?
Â Â signÂ :Â (or/cÂ #fÂ '+Â '++Â 'parens
         Â Â Â Â Â Â (letÂ ([indÂ (or/cÂ string?Â (list/cÂ string?Â string?))])
         Â Â Â Â Â Â Â Â (list/cÂ indÂ indÂ ind)))
Â  Â    Â =Â #f
Â Â baseÂ :Â (or/cÂ (integer-inÂ 2Â 36)Â (list/cÂ 'upÂ (integer-inÂ 2Â 36)))
Â  Â    Â =Â 10
Â Â precisionÂ :Â (or/cÂ exact-nonnegative-integer?             Â =Â 6
              Â Â Â Â Â Â (list/cÂ '=Â exact-nonnegative-integer?))
Â Â notationÂ :Â (or/cÂ 'positionalÂ 'exponential
             Â Â Â Â Â Â (->Â rational?Â (or/cÂ 'positionalÂ 'exponential)))
Â  Â        Â =Â 'positional
Â Â format-exponentÂ :Â (or/cÂ #fÂ string?Â (->Â exact-integer?Â string?))
Â  Â               Â =Â #f
Â Â min-widthÂ :Â exact-positive-integer?Â =Â 1
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â groupsÂ :Â (non-empty-listofÂ exact-positive-integer?)Â =Â '(3)
Â Â group-sepÂ :Â string?Â =Â ""
Â Â decimal-sepÂ :Â string?Â =Â "."
procedure
(~.aÂ  v                                    Â Â  Â Â 
Â    Â  ...                                  Â Â  Â Â 
Â    Â [#:separatorÂ separator                Â Â  Â Â 
Â    Â  #:widthÂ width                        Â Â  Â Â 
Â    Â  #:max-widthÂ max-width                Â Â  Â Â 
Â    Â  #:min-widthÂ min-width                Â Â  Â Â 
Â    Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â    Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â    Â  #:alignÂ align                        Â Â  Â Â 
Â    Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â    Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â    Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â ""
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â ""
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(~.vÂ  v                                    Â Â  Â Â 
Â    Â  ...                                  Â Â  Â Â 
Â    Â [#:separatorÂ separator                Â Â  Â Â 
Â    Â  #:widthÂ width                        Â Â  Â Â 
Â    Â  #:max-widthÂ max-width                Â Â  Â Â 
Â    Â  #:min-widthÂ min-width                Â Â  Â Â 
Â    Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â    Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â    Â  #:alignÂ align                        Â Â  Â Â 
Â    Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â    Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â    Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â " "
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â "..."
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(~.sÂ  v                                    Â Â  Â Â 
Â    Â  ...                                  Â Â  Â Â 
Â    Â [#:separatorÂ separator                Â Â  Â Â 
Â    Â  #:widthÂ width                        Â Â  Â Â 
Â    Â  #:max-widthÂ max-width                Â Â  Â Â 
Â    Â  #:min-widthÂ min-width                Â Â  Â Â 
Â    Â  #:limit-markerÂ limit-marker          Â Â  Â Â 
Â    Â  #:limit-prefix?Â limit-prefix?        Â Â  Â Â 
Â    Â  #:alignÂ align                        Â Â  Â Â 
Â    Â  #:pad-stringÂ pad-string              Â Â  Â Â 
Â    Â  #:left-pad-stringÂ left-pad-string    Â Â  Â Â 
Â    Â  #:right-pad-stringÂ right-pad-string])Â ->Â string?
Â Â vÂ :Â any/c
Â Â separatorÂ :Â string?Â =Â " "
Â Â widthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â max-widthÂ :Â (or/cÂ exact-nonnegative-integer?Â +inf.0)
Â  Â         Â =Â (orÂ widthÂ +inf.0)
Â Â min-widthÂ :Â exact-nonnegative-integer?Â =Â (orÂ widthÂ 0)
Â Â limit-markerÂ :Â string?Â =Â "..."
Â Â limit-prefix?Â :Â boolean?Â =Â #f
Â Â alignÂ :Â (or/cÂ 'leftÂ 'centerÂ 'right)Â =Â 'left
Â Â pad-stringÂ :Â non-empty-string?Â =Â " "
Â Â left-pad-stringÂ :Â non-empty-string?Â =Â pad-string
Â Â right-pad-stringÂ :Â non-empty-string?Â =Â pad-string
procedure
(bytes?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-bytesÂ kÂ [b])Â ->Â bytes?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â bÂ :Â byte?Â =Â 0
procedure
(bytesÂ bÂ ...)Â ->Â bytes?
Â Â bÂ :Â byte?
procedure
(bytes->immutable-bytesÂ bstr)Â ->Â (and/cÂ bytes?Â immutable?)
Â Â bstrÂ :Â bytes?
procedure
(byte?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(bytes-lengthÂ bstr)Â ->Â exact-nonnegative-integer?
Â Â bstrÂ :Â bytes?
procedure
(bytes-refÂ bstrÂ k)Â ->Â byte?
Â Â bstrÂ :Â bytes?
Â Â kÂ :Â exact-nonnegative-integer?
procedure
(bytes-set!Â bstrÂ kÂ b)Â ->Â void?
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â kÂ :Â exact-nonnegative-integer?
Â Â bÂ :Â byte?
procedure
(subbytesÂ bstrÂ startÂ [end])Â ->Â bytes?
Â Â bstrÂ :Â bytes?
Â Â startÂ :Â exact-nonnegative-integer?
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ str)
procedure
(bytes-copyÂ bstr)Â ->Â bytes?
Â Â bstrÂ :Â bytes?
procedure
(bytes-copy!Â  dest      Â Â  Â Â 
Â            Â  dest-startÂ Â  Â Â 
Â            Â  src       Â Â  Â Â 
Â            Â [src-start Â Â  Â Â 
Â            Â  src-end]) Â ->Â void?
Â Â destÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â dest-startÂ :Â exact-nonnegative-integer?
Â Â srcÂ :Â bytes?
Â Â src-startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â src-endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ src)
procedure
(bytes-fill!Â destÂ b)Â ->Â void?
Â Â destÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â bÂ :Â byte?
procedure
(bytes-appendÂ bstrÂ ...)Â ->Â bytes?
Â Â bstrÂ :Â bytes?
procedure
(bytes->listÂ bstr)Â ->Â (listofÂ byte?)
Â Â bstrÂ :Â bytes?
procedure
(list->bytesÂ lst)Â ->Â bytes?
Â Â lstÂ :Â (listofÂ byte?)
procedure
(make-shared-bytesÂ kÂ [b])Â ->Â bytes?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â bÂ :Â byte?Â =Â 0
procedure
(shared-bytesÂ bÂ ...)Â ->Â bytes?
Â Â bÂ :Â byte?
procedure
(bytes=?Â bstr1Â bstr2Â ...)Â ->Â boolean?
Â Â bstr1Â :Â bytes?
Â Â bstr2Â :Â bytes?
procedure
(bytes<?Â bstr1Â bstr2Â ...)Â ->Â boolean?
Â Â bstr1Â :Â bytes?
Â Â bstr2Â :Â bytes?
procedure
(bytes>?Â bstr1Â bstr2Â ...)Â ->Â boolean?
Â Â bstr1Â :Â bytes?
Â Â bstr2Â :Â bytes?
procedure
(bytes->string/utf-8Â bstrÂ [err-charÂ startÂ end])Â ->Â string?
Â Â bstrÂ :Â bytes?
Â Â err-charÂ :Â (or/cÂ #fÂ char?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(bytes->string/localeÂ  bstr    Â Â  Â Â 
Â                     Â [err-charÂ Â  Â Â 
Â                     Â  start   Â Â  Â Â 
Â                     Â  end])   Â ->Â string?
Â Â bstrÂ :Â bytes?
Â Â err-charÂ :Â (or/cÂ #fÂ char?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(bytes->string/latin-1Â  bstr    Â Â  Â Â 
Â                      Â [err-charÂ Â  Â Â 
Â                      Â  start   Â Â  Â Â 
Â                      Â  end])   Â ->Â string?
Â Â bstrÂ :Â bytes?
Â Â err-charÂ :Â (or/cÂ #fÂ char?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(string->bytes/utf-8Â strÂ [err-byteÂ startÂ end])Â ->Â bytes?
Â Â strÂ :Â string?
Â Â err-byteÂ :Â (or/cÂ #fÂ byte?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(string->bytes/localeÂ strÂ [err-byteÂ startÂ end])Â ->Â bytes?
Â Â strÂ :Â string?
Â Â err-byteÂ :Â (or/cÂ #fÂ byte?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(string->bytes/latin-1Â  str     Â Â  Â Â 
Â                      Â [err-byteÂ Â  Â Â 
Â                      Â  start   Â Â  Â Â 
Â                      Â  end])   Â ->Â bytes?
Â Â strÂ :Â string?
Â Â err-byteÂ :Â (or/cÂ #fÂ byte?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(string-utf-8-lengthÂ strÂ [startÂ end])Â ->Â exact-nonnegative-integer?
Â Â strÂ :Â string?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(bytes-utf-8-lengthÂ bstrÂ [err-charÂ startÂ end])
Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â bstrÂ :Â bytes?
Â Â err-charÂ :Â (or/cÂ #fÂ char?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(bytes-utf-8-refÂ bstrÂ [skipÂ err-charÂ startÂ end])Â ->Â (or/cÂ char?Â #f)
Â Â bstrÂ :Â bytes?
Â Â skipÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â err-charÂ :Â (or/cÂ #fÂ char?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(bytes-utf-8-indexÂ  bstr    Â 
Â                  Â  skip    Â 
Â                  Â [err-charÂ 
Â                  Â  start   Â 
Â                  Â  end])   Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â bstrÂ :Â bytes?
Â Â skipÂ :Â exact-nonnegative-integer?
Â Â err-charÂ :Â (or/cÂ #fÂ char?)Â =Â #f
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(bytes-open-converterÂ from-nameÂ to-name)
Â ->Â (or/cÂ bytes-converter?Â #f)
Â Â from-nameÂ :Â string?
Â Â to-nameÂ :Â string?
procedure
(bytes-close-converterÂ converter)Â ->Â void
Â Â converterÂ :Â bytes-converter?
procedure
(bytes-convertÂ  converter     Â 
Â              Â  src-bstr      Â 
Â              Â [src-start-pos Â 
Â              Â  src-end-pos   Â 
Â              Â  dest-bstr     Â 
Â              Â  dest-start-posÂ 
Â              Â  dest-end-pos])Â 
Â ->Â (or/cÂ bytes?Â exact-nonnegative-integer?)
    exact-nonnegative-integer?
    (or/cÂ 'completeÂ 'continuesÂ 'abortsÂ 'error)
Â Â converterÂ :Â bytes-converter?
Â Â src-bstrÂ :Â bytes?
Â Â src-start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â src-end-posÂ :Â exact-nonnegative-integer?
Â  Â           Â =Â (bytes-lengthÂ src-bstr)
Â Â dest-bstrÂ :Â (or/cÂ bytes?Â #f)Â =Â #f
Â Â dest-start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â dest-end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â  Â            Â =Â (andÂ dest-bstr
                 Â Â Â Â Â (bytes-lengthÂ dest-bstr))
procedure
(bytes-convert-endÂ  converter     Â 
Â                  Â [dest-bstr     Â 
Â                  Â  dest-start-posÂ 
Â                  Â  dest-end-pos])Â 
Â ->Â (or/cÂ bytes?Â exact-nonnegative-integer?)
    (or/cÂ 'completeÂ 'continues)
Â Â converterÂ :Â bytes-converter?
Â Â dest-bstrÂ :Â (or/cÂ bytes?Â #f)Â =Â #f
Â Â dest-start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â dest-end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â  Â            Â =Â (andÂ dest-bstr
                 Â Â Â Â Â (bytes-lengthÂ dest-bstr))
procedure
(bytes-converter?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(locale-string-encoding)Â ->Â any
procedure
(bytes-append*Â strÂ ...Â strs)Â ->Â bytes?
Â Â strÂ :Â bytes?
Â Â strsÂ :Â (listofÂ bytes?)
procedure
(bytes-joinÂ strsÂ sep)Â ->Â bytes?
Â Â strsÂ :Â (listofÂ bytes?)
Â Â sepÂ :Â bytes?
procedure
(char?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(char->integerÂ char)Â ->Â exact-integer?
Â Â charÂ :Â char?
procedure
(integer->charÂ k)Â ->Â char?
Â Â kÂ :Â (and/cÂ exact-integer?
      Â Â Â Â Â Â Â (or/cÂ (integer-inÂ 0Â #xD7FF)
      Â Â Â Â Â Â Â Â Â Â Â Â Â (integer-inÂ #xE000Â #x10FFFF)))
procedure
(char-utf-8-lengthÂ char)Â ->Â (integer-inÂ 1Â 6)
Â Â charÂ :Â char?
procedure
(char=?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char<?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char<=?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char>?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char>=?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char-ci=?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char-ci<?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char-ci<=?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char-ci>?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char-ci>=?Â char1Â char2Â ...)Â ->Â boolean?
Â Â char1Â :Â char?
Â Â char2Â :Â char?
procedure
(char-alphabetic?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-lower-case?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-upper-case?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-title-case?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-numeric?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-symbolic?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-punctuation?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-graphic?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-whitespace?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-blank?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-iso-control?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-extended-pictographic?Â char)Â ->Â boolean?
Â Â charÂ :Â char?
procedure
(char-general-categoryÂ char)Â ->Â symbol?
Â Â charÂ :Â char?
procedure
(char-grapheme-break-propertyÂ char)Â ->Â ?
Â Â charÂ :Â char?
procedure
(make-known-char-range-list)
Â ->Â (listofÂ (list/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â boolean?))
procedure
(char-upcaseÂ char)Â ->Â char?
Â Â charÂ :Â char?
procedure
(char-downcaseÂ char)Â ->Â char?
Â Â charÂ :Â char?
procedure
(char-titlecaseÂ char)Â ->Â char?
Â Â charÂ :Â char?
procedure
(char-foldcaseÂ char)Â ->Â char?
Â Â charÂ :Â char?
procedure
(char-grapheme-stepÂ charÂ state)Â ->Â boolean?Â fixnum?
Â Â charÂ :Â char?
Â Â stateÂ :Â fixnum?
procedure
(symbol?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(symbol-interned?Â sym)Â ->Â boolean?
Â Â symÂ :Â symbol?
procedure
(symbol-unreadable?Â sym)Â ->Â boolean?
Â Â symÂ :Â symbol?
procedure
(symbol->stringÂ sym)Â ->Â string?
Â Â symÂ :Â symbol?
procedure
(string->symbolÂ str)Â ->Â symbol?
Â Â strÂ :Â string?
procedure
(string->uninterned-symbolÂ str)Â ->Â symbol?
Â Â strÂ :Â string?
procedure
(string->unreadable-symbolÂ str)Â ->Â symbol?
Â Â strÂ :Â string?
procedure
(gensymÂ [base])Â ->Â symbol?
Â Â baseÂ :Â (or/cÂ string?Â symbol?)Â =Â "g"
procedure
(symbol<?Â a-symÂ b-symÂ ...)Â ->Â boolean?
Â Â a-symÂ :Â symbol?
Â Â b-symÂ :Â symbol?
procedure
(symbol->immutable-stringÂ sym)Â ->Â (and/cÂ string?Â immutable?)
Â Â symÂ :Â symbol?
procedure
(regexp?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(pregexp?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(byte-regexp?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(byte-pregexp?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(regexpÂ str)Â ->Â regexp?
Â Â strÂ :Â string?
(regexpÂ strÂ handler)Â ->Â any
Â Â strÂ :Â string?
Â Â handlerÂ :Â (or/cÂ #fÂ (string?Â ->Â any))
procedure
(pregexpÂ str)Â ->Â pregexp?
Â Â strÂ :Â string?
(pregexpÂ strÂ handler)Â ->Â any
Â Â strÂ :Â string?
Â Â handlerÂ :Â (or/cÂ #fÂ (string?Â ->Â any))
procedure
(byte-regexpÂ bstr)Â ->Â byte-regexp?
Â Â bstrÂ :Â bytes?
(byte-regexpÂ bstrÂ handler)Â ->Â any
Â Â bstrÂ :Â bytes?
Â Â handlerÂ :Â (or/cÂ #fÂ (bytes?Â ->Â any))
procedure
(byte-pregexpÂ bstr)Â ->Â byte-pregexp?
Â Â bstrÂ :Â bytes?
(byte-pregexpÂ bstrÂ handler)Â ->Â any
Â Â bstrÂ :Â bytes?
Â Â handlerÂ :Â (or/cÂ #fÂ (bytes?Â ->Â any))
procedure
(regexp-quoteÂ strÂ [case-sensitive?])Â ->Â string?
Â Â strÂ :Â string?
Â Â case-sensitive?Â :Â any/cÂ =Â #t
(regexp-quoteÂ bstrÂ [case-sensitive?])Â ->Â bytes?
Â Â bstrÂ :Â bytes?
Â Â case-sensitive?Â :Â any/cÂ =Â #t
procedure
(regexp-max-lookbehindÂ pattern)Â ->Â exact-nonnegative-integer?
Â Â patternÂ :Â (or/cÂ regexp?Â byte-regexp?)
procedure
(regexp-matchÂ  pattern       Â 
Â             Â  input         Â 
Â             Â [start-pos     Â 
Â             Â  end-pos       Â 
Â             Â  output-port   Â 
Â             Â  input-prefix])Â 
Â ->Â (ifÂ (andÂ (orÂ (string?Â pattern)Â (regexp?Â pattern))
    Â Â Â Â Â Â Â Â Â (orÂ (string?Â input)Â (path?Â input)))
    Â Â Â Â (or/cÂ #fÂ (cons/cÂ string?Â (listofÂ (or/cÂ string?Â #f))))
    Â Â Â Â (or/cÂ #fÂ (cons/cÂ bytes?Â Â (listofÂ (or/cÂ bytes?Â Â #f)))))
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â output-portÂ :Â (or/cÂ output-port?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match*Â  pattern                    Â 
Â              Â  input                      Â 
Â              Â [start-pos                  Â 
Â              Â  end-pos                    Â 
Â              Â  input-prefix               Â 
Â              Â  #:match-selectÂ match-selectÂ 
Â              Â  #:gap-select?Â gap-select]) Â 
Â ->Â (ifÂ (andÂ (orÂ (string?Â pattern)Â (regexp?Â pattern))
    Â Â Â Â Â Â Â Â Â (orÂ (string?Â input)Â (path?Â input)))
    Â Â Â Â (listofÂ (or/cÂ string?Â (listofÂ (or/cÂ #fÂ string?))))
    Â Â Â Â (listofÂ (or/cÂ bytes?Â (listofÂ (or/cÂ #fÂ bytes?)))))
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â match-selectÂ :Â (or/cÂ (list?Â . -> .Â (or/cÂ any/cÂ list?))Â =Â car
                 Â Â Â Â Â Â #f)
Â Â gap-selectÂ :Â any/cÂ =Â #f
procedure
(regexp-try-matchÂ  pattern       Â 
Â                 Â  input         Â 
Â                 Â [start-pos     Â 
Â                 Â  end-pos       Â 
Â                 Â  output-port   Â 
Â                 Â  input-prefix])Â 
Â ->Â (or/cÂ #fÂ (cons/cÂ bytes?Â (listofÂ (or/cÂ bytes?Â #f))))
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â output-portÂ :Â (or/cÂ output-port?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-positionsÂ  pattern       Â 
Â                       Â  input         Â 
Â                       Â [start-pos     Â 
Â                       Â  end-pos       Â 
Â                       Â  output-port   Â 
Â                       Â  input-prefix])Â 
Â ->Â (or/cÂ (cons/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (or/cÂ (cons/cÂ exact-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f)))
    Â Â Â Â Â Â #f)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â output-portÂ :Â (or/cÂ output-port?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-positions*Â  pattern                      Â 
Â                        Â  input                        Â 
Â                        Â [start-pos                    Â 
Â                        Â  end-pos                      Â 
Â                        Â  input-prefix                 Â 
Â                        Â  #:match-selectÂ match-select])Â 
Â ->Â (or/cÂ (listofÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?))
    Â Â Â Â Â Â (listofÂ (listofÂ (or/cÂ #fÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))))
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â match-selectÂ :Â (list?Â . -> .Â (or/cÂ any/cÂ list?))Â =Â car
procedure
(regexp-match?Â  pattern       Â Â  Â Â 
Â              Â  input         Â Â  Â Â 
Â              Â [start-pos     Â Â  Â Â 
Â              Â  end-pos       Â Â  Â Â 
Â              Â  output-port   Â Â  Â Â 
Â              Â  input-prefix])Â ->Â boolean?
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â output-portÂ :Â (or/cÂ output-port?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-exact?Â patternÂ input)Â ->Â boolean?
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?)
procedure
(regexp-match-peekÂ  pattern       Â 
Â                  Â  input         Â 
Â                  Â [start-pos     Â 
Â                  Â  end-pos       Â 
Â                  Â  progress      Â 
Â                  Â  input-prefix])Â 
Â ->Â (or/cÂ (cons/cÂ bytes?Â (listofÂ (or/cÂ bytes?Â #f)))
    Â Â Â Â Â Â #f)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â progressÂ :Â (or/cÂ evtÂ #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-peek-positionsÂ  pattern       Â 
Â                            Â  input         Â 
Â                            Â [start-pos     Â 
Â                            Â  end-pos       Â 
Â                            Â  progress      Â 
Â                            Â  input-prefix])Â 
Â ->Â (or/cÂ (cons/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (or/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f)))
    Â Â Â Â Â Â #f)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â progressÂ :Â (or/cÂ evtÂ #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-peek-immediateÂ  pattern       Â 
Â                            Â  input         Â 
Â                            Â [start-pos     Â 
Â                            Â  end-pos       Â 
Â                            Â  progress      Â 
Â                            Â  input-prefix])Â 
Â ->Â (or/cÂ (cons/cÂ bytes?Â (listofÂ (or/cÂ bytes?Â #f)))
    Â Â Â Â Â Â #f)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â progressÂ :Â (or/cÂ evtÂ #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-peek-positions-immediateÂ  pattern       Â 
Â                                      Â  input         Â 
Â                                      Â [start-pos     Â 
Â                                      Â  end-pos       Â 
Â                                      Â  progress      Â 
Â                                      Â  input-prefix])Â 
Â ->Â (or/cÂ (cons/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (or/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f)))
    Â Â Â Â Â Â #f)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â progressÂ :Â (or/cÂ evtÂ #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-match-peek-positions*Â  pattern                      Â 
Â                             Â  input                        Â 
Â                             Â [start-pos                    Â 
Â                             Â  end-pos                      Â 
Â                             Â  input-prefix                 Â 
Â                             Â  #:match-selectÂ match-select])Â 
Â ->Â (or/cÂ (listofÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?))
    Â Â Â Â Â Â (listofÂ (listofÂ (or/cÂ #fÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))))
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â match-selectÂ :Â (list?Â . -> .Â (or/cÂ any/cÂ list?))Â =Â car
procedure
(regexp-match/endÂ  pattern     Â 
Â                 Â  input       Â 
Â                 Â [start-pos   Â 
Â                 Â  end-pos     Â 
Â                 Â  output-port Â 
Â                 Â  input-prefixÂ 
Â                 Â  count])     Â 
Â ->Â (ifÂ (andÂ (orÂ (string?Â pattern)Â (regexp?Â pattern))
    Â Â Â Â Â Â Â Â Â (or/cÂ (string?Â input)Â (path?Â input)))
    Â Â Â Â (or/cÂ #fÂ (cons/cÂ string?Â (listofÂ (or/cÂ string?Â #f))))
    Â Â Â Â (or/cÂ #fÂ (cons/cÂ bytes?Â Â (listofÂ (or/cÂ bytes?Â Â #f)))))
    (or/cÂ #fÂ bytes?)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â output-portÂ :Â (or/cÂ output-port?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â countÂ :Â exact-nonnegative-integer?Â =Â 1
procedure
(regexp-match-positions/endÂ  pattern     Â 
Â                           Â  input       Â 
Â                           Â [start-pos   Â 
Â                           Â  end-pos     Â 
Â                           Â  input-prefixÂ 
Â                           Â  count])     Â 
Â ->Â (listofÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?))
    (or/cÂ #fÂ bytes?)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â path?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â countÂ :Â exact-nonnegative-integer?Â =Â 1
procedure
(regexp-match-peek-positions/endÂ  pattern     Â 
Â                                Â  input       Â 
Â                                Â [start-pos   Â 
Â                                Â  end-pos     Â 
Â                                Â  progress    Â 
Â                                Â  input-prefixÂ 
Â                                Â  count])     Â 
Â ->Â (or/cÂ (cons/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (or/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f)))
    Â Â Â Â Â Â #f)
    (or/cÂ #fÂ bytes?)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â progressÂ :Â (or/cÂ evtÂ #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â countÂ :Â exact-nonnegative-integer?Â =Â 1
procedure
(regexp-match-peek-positions-immediate/endÂ  pattern     Â 
Â                                          Â  input       Â 
Â                                          Â [start-pos   Â 
Â                                          Â  end-pos     Â 
Â                                          Â  progress    Â 
Â                                          Â  input-prefixÂ 
Â                                          Â  count])     Â 
Â ->Â (or/cÂ (cons/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (or/cÂ (cons/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f)))
    Â Â Â Â Â Â #f)
    (or/cÂ #fÂ bytes?)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â input-port?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â progressÂ :Â (or/cÂ evtÂ #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
Â Â countÂ :Â exact-nonnegative-integer?Â =Â 1
procedure
(regexp-splitÂ  pattern       Â 
Â             Â  input         Â 
Â             Â [start-pos     Â 
Â             Â  end-pos       Â 
Â             Â  input-prefix])Â 
Â ->Â (ifÂ (andÂ (orÂ (string?Â pattern)Â (regexp?Â pattern))
    Â Â Â Â Â Â Â Â Â (string?Â input))
    Â Â Â Â (cons/cÂ string?Â (listofÂ string?))
    Â Â Â Â (cons/cÂ bytes?Â (listofÂ bytes?)))
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?Â input-port?)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-replaceÂ  pattern       Â 
Â               Â  input         Â 
Â               Â  insert        Â 
Â               Â [input-prefix])Â 
Â ->Â (ifÂ (andÂ (orÂ (string?Â pattern)Â (regexp?Â pattern))
    Â Â Â Â Â Â Â Â Â (string?Â input))
    Â Â Â Â string?
    Â Â Â Â bytes?)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?)
Â Â insertÂ :Â (or/cÂ string?Â bytes?
           Â Â Â Â Â Â ((string?)Â ()Â #:restÂ (listofÂ string?)Â . ->* .Â string?)
           Â Â Â Â Â Â ((bytes?)Â ()Â #:restÂ (listofÂ bytes?)Â . ->* .Â bytes?))
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-replace*Â  pattern       Â Â  Â Â 
Â                Â  input         Â Â  Â Â 
Â                Â  insert        Â Â  Â Â 
Â                Â [start-pos     Â Â  Â Â 
Â                Â  end-pos       Â Â  Â Â 
Â                Â  input-prefix])Â ->Â (or/cÂ string?Â bytes?)
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?)
Â Â insertÂ :Â (or/cÂ string?Â bytes?
           Â Â Â Â Â Â ((string?)Â ()Â #:restÂ (listofÂ string?)Â . ->* .Â string?)
           Â Â Â Â Â Â ((bytes?)Â ()Â #:restÂ (listofÂ bytes?)Â . ->* .Â bytes?))
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â #f
Â Â input-prefixÂ :Â bytes?Â =Â #""
procedure
(regexp-replacesÂ inputÂ replacements)Â ->Â (or/cÂ string?Â bytes?)
Â Â inputÂ :Â (or/cÂ string?Â bytes?)
Â Â replacementsÂ :Â (listof
                 Â (list/cÂ (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
                 Â Â Â Â Â Â Â Â Â (or/cÂ string?Â bytes?
                 Â Â Â Â Â Â Â Â Â Â Â Â Â ((string?)Â ()Â #:restÂ (listofÂ string?)Â . ->* .Â string?)
                 Â Â Â Â Â Â Â Â Â Â Â Â Â ((bytes?)Â ()Â #:restÂ (listofÂ bytes?)Â . ->* .Â bytes?))))
procedure
(regexp-replace-quoteÂ str)Â ->Â string?
Â Â strÂ :Â string?
(regexp-replace-quoteÂ bstr)Â ->Â bytes?
Â Â bstrÂ :Â bytes?
procedure
(keyword?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(keyword->stringÂ keyword)Â ->Â string?
Â Â keywordÂ :Â keyword?
procedure
(string->keywordÂ str)Â ->Â keyword?
Â Â strÂ :Â string?
procedure
(keyword<?Â a-keywordÂ b-keywordÂ ...)Â ->Â boolean?
Â Â a-keywordÂ :Â keyword?
Â Â b-keywordÂ :Â keyword?
procedure
(keyword->immutable-stringÂ sym)Â ->Â (and/cÂ string?Â immutable?)
Â Â symÂ :Â keyword?
procedure
(pair?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(null?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(consÂ aÂ d)Â ->Â pair?
Â Â aÂ :Â any/c
Â Â dÂ :Â any/c
procedure
(carÂ p)Â ->Â any/c
Â Â pÂ :Â pair?
procedure
(cdrÂ p)Â ->Â any/c
Â Â pÂ :Â pair?
value
nullÂ :Â null?
procedure
(list?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(listÂ vÂ ...)Â ->Â list?
Â Â vÂ :Â any/c
procedure
(list*Â vÂ ...Â tail)Â ->Â any/c
Â Â vÂ :Â any/c
Â Â tailÂ :Â any/c
procedure
(build-listÂ nÂ proc)Â ->Â list?
Â Â nÂ :Â exact-nonnegative-integer?
Â Â procÂ :Â (exact-nonnegative-integer?Â . -> .Â any)
procedure
(lengthÂ lst)Â ->Â exact-nonnegative-integer?
Â Â lstÂ :Â list?
procedure
(list-refÂ lstÂ pos)Â ->Â any/c
Â Â lstÂ :Â pair?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(list-tailÂ lstÂ pos)Â ->Â any/c
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(appendÂ lstÂ ...)Â ->Â list?
Â Â lstÂ :Â list?
(appendÂ lstÂ ...Â v)Â ->Â any/c
Â Â lstÂ :Â list?
Â Â vÂ :Â any/c
procedure
(reverseÂ lst)Â ->Â list?
Â Â lstÂ :Â list?
procedure
(mapÂ procÂ lstÂ ...+)Â ->Â list?
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(andmapÂ procÂ lstÂ ...+)Â ->Â any
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(ormapÂ procÂ lstÂ ...+)Â ->Â any
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(for-eachÂ procÂ lstÂ ...+)Â ->Â void?
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(foldlÂ procÂ initÂ lstÂ ...+)Â ->Â any/c
Â Â procÂ :Â procedure?
Â Â initÂ :Â any/c
Â Â lstÂ :Â list?
procedure
(foldrÂ procÂ initÂ lstÂ ...+)Â ->Â any/c
Â Â procÂ :Â procedure?
Â Â initÂ :Â any/c
Â Â lstÂ :Â list?
procedure
(filterÂ predÂ lst)Â ->Â list?
Â Â predÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(removeÂ vÂ lstÂ [proc])Â ->Â list?
Â Â vÂ :Â any/c
Â Â lstÂ :Â list?
Â Â procÂ :Â procedure?Â =Â equal?
procedure
(remqÂ vÂ lst)Â ->Â list?
Â Â vÂ :Â any/c
Â Â lstÂ :Â list?
procedure
(remvÂ vÂ lst)Â ->Â list?
Â Â vÂ :Â any/c
Â Â lstÂ :Â list?
procedure
(remwÂ vÂ lst)Â ->Â list?
Â Â vÂ :Â any/c
Â Â lstÂ :Â list?
procedure
(remove*Â v-lstÂ lstÂ [proc])Â ->Â list?
Â Â v-lstÂ :Â list?
Â Â lstÂ :Â list?
Â Â procÂ :Â procedure?Â =Â equal?
procedure
(remq*Â v-lstÂ lst)Â ->Â list?
Â Â v-lstÂ :Â list?
Â Â lstÂ :Â list?
procedure
(remv*Â v-lstÂ lst)Â ->Â list?
Â Â v-lstÂ :Â list?
Â Â lstÂ :Â list?
procedure
(remw*Â v-lstÂ lst)Â ->Â list?
Â Â v-lstÂ :Â list?
Â Â lstÂ :Â list?
procedure
(sortÂ  lst                        Â Â  Â Â 
Â     Â  less-than?                 Â Â  Â Â 
Â     Â [#:keyÂ extract-key          Â Â  Â Â 
Â     Â  #:cache-keys?Â cache-keys?])Â ->Â list?
Â Â lstÂ :Â list?
Â Â less-than?Â :Â (any/cÂ any/cÂ . -> .Â any/c)
Â Â extract-keyÂ :Â (any/cÂ . -> .Â any/c)Â =Â (lambdaÂ (x)Â x)
Â Â cache-keys?Â :Â boolean?Â =Â #f
procedure
(memberÂ vÂ lstÂ [is-equal?])Â ->Â (or/cÂ #fÂ list?Â any/c)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ list?Â any/c)
Â Â is-equal?Â :Â (any/cÂ any/cÂ ->Â any/c)Â =Â equal?
procedure
(memwÂ vÂ lst)Â ->Â (or/cÂ #fÂ list?Â any/c)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ list?Â any/c)
procedure
(memvÂ vÂ lst)Â ->Â (or/cÂ #fÂ list?Â any/c)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ list?Â any/c)
procedure
(memqÂ vÂ lst)Â ->Â (or/cÂ #fÂ list?Â any/c)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ list?Â any/c)
procedure
(memfÂ procÂ lst)Â ->Â (or/cÂ #fÂ list?Â any/c)
Â Â procÂ :Â procedure?
Â Â lstÂ :Â (or/cÂ list?Â any/c)
procedure
(findfÂ procÂ lst)Â ->Â any/c
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(assocÂ vÂ lstÂ [is-equal?])Â ->Â (or/cÂ pair?Â #f)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ (listofÂ pair?)Â any/c)
Â Â is-equal?Â :Â (any/cÂ any/cÂ ->Â any/c)Â =Â equal?
procedure
(asswÂ vÂ lst)Â ->Â (or/cÂ pair?Â #f)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ (listofÂ pair?)Â any/c)
procedure
(assvÂ vÂ lst)Â ->Â (or/cÂ pair?Â #f)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ (listofÂ pair?)Â any/c)
procedure
(assqÂ vÂ lst)Â ->Â (or/cÂ pair?Â #f)
Â Â vÂ :Â any/c
Â Â lstÂ :Â (or/cÂ (listofÂ pair?)Â any/c)
procedure
(assfÂ procÂ lst)Â ->Â (or/cÂ pair?Â #f)
Â Â procÂ :Â procedure?
Â Â lstÂ :Â (or/cÂ (listofÂ pair?)Â any/c)
procedure
(caarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ pair?Â any/c)
procedure
(cadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ pair?)
procedure
(cdarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ pair?Â any/c)
procedure
(cddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ pair?)
procedure
(caaarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ pair?Â any/c)Â any/c)
procedure
(caadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ pair?Â any/c))
procedure
(cadarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ any/cÂ pair?)Â any/c)
procedure
(caddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ any/cÂ pair?))
procedure
(cdaarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ pair?Â any/c)Â any/c)
procedure
(cdadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ pair?Â any/c))
procedure
(cddarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ any/cÂ pair?)Â any/c)
procedure
(cdddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ any/cÂ pair?))
procedure
(caaaarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ (cons/cÂ pair?Â any/c)Â any/c)Â any/c)
procedure
(caaadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ (cons/cÂ pair?Â any/c)Â any/c))
procedure
(caadarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ any/cÂ (cons/cÂ pair?Â any/c))Â any/c)
procedure
(caaddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ any/cÂ (cons/cÂ pair?Â any/c)))
procedure
(cadaarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ (cons/cÂ any/cÂ pair?)Â any/c)Â any/c)
procedure
(cadadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ (cons/cÂ any/cÂ pair?)Â any/c))
procedure
(caddarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ any/cÂ (cons/cÂ any/cÂ pair?))Â any/c)
procedure
(cadddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ any/cÂ (cons/cÂ any/cÂ pair?)))
procedure
(cdaaarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ (cons/cÂ pair?Â any/c)Â any/c)Â any/c)
procedure
(cdaadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ (cons/cÂ pair?Â any/c)Â any/c))
procedure
(cdadarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ any/cÂ (cons/cÂ pair?Â any/c))Â any/c)
procedure
(cdaddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ any/cÂ (cons/cÂ pair?Â any/c)))
procedure
(cddaarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ (cons/cÂ any/cÂ pair?)Â any/c)Â any/c)
procedure
(cddadrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ (cons/cÂ any/cÂ pair?)Â any/c))
procedure
(cdddarÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ (cons/cÂ any/cÂ (cons/cÂ any/cÂ pair?))Â any/c)
procedure
(cddddrÂ v)Â ->Â any/c
Â Â vÂ :Â (cons/cÂ any/cÂ (cons/cÂ any/cÂ (cons/cÂ any/cÂ pair?)))
value
emptyÂ :Â null?
procedure
(cons?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(empty?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(firstÂ lst)Â ->Â any/c
Â Â lstÂ :Â list?
procedure
(restÂ lst)Â ->Â list?
Â Â lstÂ :Â list?
procedure
(secondÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(thirdÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(fourthÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(fifthÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(sixthÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(seventhÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(eighthÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(ninthÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(tenthÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(lastÂ lst)Â ->Â any
Â Â lstÂ :Â list?
procedure
(last-pairÂ p)Â ->Â pair?
Â Â pÂ :Â pair?
procedure
(make-listÂ kÂ v)Â ->Â list?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(list-updateÂ lstÂ posÂ updater)Â ->Â list?
Â Â lstÂ :Â list?
Â Â posÂ :Â (and/cÂ (>=/cÂ 0)Â (</cÂ (lengthÂ lst)))
Â Â updaterÂ :Â (->Â any/cÂ any/c)
procedure
(list-setÂ lstÂ posÂ value)Â ->Â list?
Â Â lstÂ :Â list?
Â Â posÂ :Â (and/cÂ (>=/cÂ 0)Â (</cÂ (lengthÂ lst)))
Â Â valueÂ :Â any/c
procedure
(index-ofÂ lstÂ vÂ [is-equal?])Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â lstÂ :Â list?
Â Â vÂ :Â any/c
Â Â is-equal?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(index-whereÂ lstÂ proc)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â lstÂ :Â list?
Â Â procÂ :Â (any/cÂ . -> .Â any/c)
procedure
(indexes-ofÂ lstÂ vÂ [is-equal?])
Â ->Â (listofÂ exact-nonnegative-integer?)
Â Â lstÂ :Â list?
Â Â vÂ :Â any/c
Â Â is-equal?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(indexes-whereÂ lstÂ proc)Â ->Â (listofÂ exact-nonnegative-integer?)
Â Â lstÂ :Â list?
Â Â procÂ :Â (any/cÂ . -> .Â any/c)
procedure
(takeÂ lstÂ pos)Â ->Â list?
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(dropÂ lstÂ pos)Â ->Â any/c
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(split-atÂ lstÂ pos)Â ->Â list?Â any/c
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(takefÂ lstÂ pred)Â ->Â list?
Â Â lstÂ :Â any/c
Â Â predÂ :Â procedure?
procedure
(dropfÂ lstÂ pred)Â ->Â any/c
Â Â lstÂ :Â any/c
Â Â predÂ :Â procedure?
procedure
(splitf-atÂ lstÂ pred)Â ->Â list?Â any/c
Â Â lstÂ :Â any/c
Â Â predÂ :Â procedure?
procedure
(take-rightÂ lstÂ pos)Â ->Â any/c
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(drop-rightÂ lstÂ pos)Â ->Â list?
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(split-at-rightÂ lstÂ pos)Â ->Â list?Â any/c
Â Â lstÂ :Â any/c
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(takef-rightÂ lstÂ pred)Â ->Â any/c
Â Â lstÂ :Â any/c
Â Â predÂ :Â procedure?
procedure
(dropf-rightÂ lstÂ pred)Â ->Â list?
Â Â lstÂ :Â any/c
Â Â predÂ :Â procedure?
procedure
(splitf-at-rightÂ lstÂ pred)Â ->Â list?Â any/c
Â Â lstÂ :Â any/c
Â Â predÂ :Â procedure?
procedure
(list-prefix?Â lÂ rÂ [same?])Â ->Â boolean?
Â Â lÂ :Â list?
Â Â rÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(take-common-prefixÂ lÂ rÂ [same?])Â ->Â list?
Â Â lÂ :Â list?
Â Â rÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(drop-common-prefixÂ lÂ rÂ [same?])Â ->Â list?Â list?
Â Â lÂ :Â list?
Â Â rÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(split-common-prefixÂ lÂ rÂ [same?])Â ->Â list?Â list?Â list?
Â Â lÂ :Â list?
Â Â rÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(add-betweenÂ  lst                        Â Â  Â Â 
Â            Â  v                          Â Â  Â Â 
Â            Â [#:before-firstÂ before-firstÂ Â  Â Â 
Â            Â  #:before-lastÂ before-last  Â Â  Â Â 
Â            Â  #:after-lastÂ after-last    Â Â  Â Â 
Â            Â  #:splice?Â splice?])        Â ->Â list?
Â Â lstÂ :Â list?
Â Â vÂ :Â any/c
Â Â before-firstÂ :Â list?Â =Â '()
Â Â before-lastÂ :Â any/cÂ =Â v
Â Â after-lastÂ :Â list?Â =Â '()
Â Â splice?Â :Â any/cÂ =Â #f
procedure
(append*Â lstÂ ...Â lsts)Â ->Â list?
Â Â lstÂ :Â list?
Â Â lstsÂ :Â (listofÂ list?)
(append*Â lstÂ ...Â lsts)Â ->Â any/c
Â Â lstÂ :Â list?
Â Â lstsÂ :Â list?
procedure
(flattenÂ v)Â ->Â list?
Â Â vÂ :Â any/c
procedure
(check-duplicatesÂ  lst                       Â Â  Â Â 
Â                 Â [same?                     Â Â  Â Â 
Â                 Â  #:keyÂ extract-key         Â Â  Â Â 
Â                 Â  #:defaultÂ failure-result])Â ->Â any
Â Â lstÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
Â Â extract-keyÂ :Â (->Â any/cÂ any/c)Â =Â (lambdaÂ (x)Â x)
Â Â failure-resultÂ :Â failure-result/cÂ =Â (lambdaÂ ()Â #f)
procedure
(remove-duplicatesÂ  lst                Â Â  Â Â 
Â                  Â [same?              Â Â  Â Â 
Â                  Â  #:keyÂ extract-key])Â ->Â list?
Â Â lstÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
Â Â extract-keyÂ :Â (any/cÂ . -> .Â any/c)Â =Â (lambdaÂ (x)Â x)
procedure
(filter-mapÂ procÂ lstÂ ...+)Â ->Â list?
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(countÂ procÂ lstÂ ...+)Â ->Â exact-nonnegative-integer?
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(partitionÂ predÂ lst)Â ->Â list?Â list?
Â Â predÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(rangeÂ end)Â ->Â list?
Â Â endÂ :Â real?
(rangeÂ startÂ endÂ [step])Â ->Â list?
Â Â startÂ :Â real?
Â Â endÂ :Â real?
Â Â stepÂ :Â real?Â =Â 1
procedure
(inclusive-rangeÂ startÂ endÂ [step])Â ->Â list?
Â Â startÂ :Â real?
Â Â endÂ :Â real?
Â Â stepÂ :Â real?Â =Â 1
procedure
(append-mapÂ procÂ lstÂ ...+)Â ->Â list?
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(filter-notÂ predÂ lst)Â ->Â list?
Â Â predÂ :Â (any/cÂ . -> .Â any/c)
Â Â lstÂ :Â list?
procedure
(shuffleÂ lst)Â ->Â list?
Â Â lstÂ :Â list?
procedure
(combinationsÂ lst)Â ->Â list?
Â Â lstÂ :Â list?
(combinationsÂ lstÂ size)Â ->Â list?
Â Â lstÂ :Â list?
Â Â sizeÂ :Â exact-nonnegative-integer?
procedure
(in-combinationsÂ lst)Â ->Â sequence?
Â Â lstÂ :Â list?
(in-combinationsÂ lstÂ size)Â ->Â sequence?
Â Â lstÂ :Â list?
Â Â sizeÂ :Â exact-nonnegative-integer?
procedure
(permutationsÂ lst)Â ->Â list?
Â Â lstÂ :Â list?
procedure
(in-permutationsÂ lst)Â ->Â sequence?
Â Â lstÂ :Â list?
procedure
(argminÂ procÂ lst)Â ->Â any/c
Â Â procÂ :Â (->Â any/cÂ real?)
Â Â lstÂ :Â (and/cÂ pair?Â list?)
procedure
(argmaxÂ procÂ lst)Â ->Â any/c
Â Â procÂ :Â (->Â any/cÂ real?)
Â Â lstÂ :Â (and/cÂ pair?Â list?)
procedure
(group-byÂ keyÂ lstÂ [same?])Â ->Â (listofÂ list?)
Â Â keyÂ :Â (->Â any/cÂ any/c)
Â Â lstÂ :Â list?
Â Â same?Â :Â (any/cÂ any/cÂ . -> .Â any/c)Â =Â equal?
procedure
(cartesian-productÂ lstÂ ...)Â ->Â (listofÂ list?)
Â Â lstÂ :Â list?
procedure
(remfÂ predÂ lst)Â ->Â list?
Â Â predÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(remf*Â predÂ lst)Â ->Â list?
Â Â predÂ :Â procedure?
Â Â lstÂ :Â list?
procedure
(make-reader-graphÂ v)Â ->Â any/c
Â Â vÂ :Â any/c
procedure
(placeholder?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-placeholderÂ v)Â ->Â placeholder?
Â Â vÂ :Â any/c
procedure
(placeholder-set!Â phÂ datum)Â ->Â void?
Â Â phÂ :Â placeholder?
Â Â datumÂ :Â any/c
procedure
(placeholder-getÂ ph)Â ->Â any/c
Â Â phÂ :Â placeholder?
procedure
(hash-placeholder?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-hash-placeholderÂ assocs)Â ->Â hash-placeholder?
Â Â assocsÂ :Â (listofÂ pair?)
procedure
(make-hasheq-placeholderÂ assocs)Â ->Â hash-placeholder?
Â Â assocsÂ :Â (listofÂ pair?)
procedure
(make-hasheqv-placeholderÂ assocs)Â ->Â hash-placeholder?
Â Â assocsÂ :Â (listofÂ pair?)
procedure
(make-hashalw-placeholderÂ assocs)Â ->Â hash-placeholder?
Â Â assocsÂ :Â (listofÂ pair?)
procedure
(mpair?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(mconsÂ aÂ d)Â ->Â mpair?
Â Â aÂ :Â any/c
Â Â dÂ :Â any/c
procedure
(mcarÂ p)Â ->Â any/c
Â Â pÂ :Â mpair?
procedure
(mcdrÂ p)Â ->Â any/c
Â Â pÂ :Â mpair?
procedure
(set-mcar!Â pÂ v)Â ->Â void?
Â Â pÂ :Â mpair?
Â Â vÂ :Â any/c
procedure
(set-mcdr!Â pÂ v)Â ->Â void?
Â Â pÂ :Â mpair?
Â Â vÂ :Â any/c
procedure
(vector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-vectorÂ sizeÂ [v])Â ->Â vector?
Â Â sizeÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/cÂ =Â 0
procedure
(vectorÂ vÂ ...)Â ->Â vector?
Â Â vÂ :Â any/c
procedure
(vector-immutableÂ vÂ ...)Â ->Â (and/cÂ vector?
                            Â Â Â Â Â Â Â immutable?)
Â Â vÂ :Â any/c
procedure
(vector-lengthÂ vec)Â ->Â exact-nonnegative-integer?
Â Â vecÂ :Â vector?
procedure
(vector-refÂ vecÂ pos)Â ->Â any/c
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-set!Â vecÂ posÂ v)Â ->Â void?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(vector*-lengthÂ vec)Â ->Â exact-nonnegative-integer?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
procedure
(vector*-refÂ vecÂ pos)Â ->Â any/c
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector*-set!Â vecÂ posÂ v)Â ->Â void?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?)Â Â (not/cÂ impersonator?))
Â Â posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(vector-cas!Â vecÂ posÂ old-vÂ new-v)Â ->Â boolean?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?)Â (not/cÂ impersonator?))
Â Â posÂ :Â exact-nonnegative-integer?
Â Â old-vÂ :Â any/c
Â Â new-vÂ :Â any/c
procedure
(vector->listÂ vec)Â ->Â list?
Â Â vecÂ :Â vector?
procedure
(list->vectorÂ lst)Â ->Â vector?
Â Â lstÂ :Â list?
procedure
(vector->immutable-vectorÂ vec)Â ->Â (and/cÂ vector?Â immutable?)
Â Â vecÂ :Â vector?
procedure
(vector-fill!Â vecÂ v)Â ->Â void?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â vÂ :Â any/c
procedure
(vector-copy!Â  dest      Â Â  Â Â 
Â             Â  dest-startÂ Â  Â Â 
Â             Â  src       Â Â  Â Â 
Â             Â [src-start Â Â  Â Â 
Â             Â  src-end]) Â ->Â void?
Â Â destÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â dest-startÂ :Â exact-nonnegative-integer?
Â Â srcÂ :Â vector?
Â Â src-startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â src-endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ src)
procedure
(vector->valuesÂ vecÂ [start-posÂ end-pos])Â ->Â any
Â Â vecÂ :Â vector?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ vec)
procedure
(build-vectorÂ nÂ proc)Â ->Â vector?
Â Â nÂ :Â exact-nonnegative-integer?
Â Â procÂ :Â (exact-nonnegative-integer?Â . -> .Â any/c)
procedure
(vector-empty?Â v)Â ->Â boolean?
Â Â vÂ :Â vector?
procedure
(vector-set*!Â vecÂ posÂ vÂ ...Â ...)Â ->Â void?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(vector-mapÂ procÂ vecÂ ...+)Â ->Â vector?
Â Â procÂ :Â procedure?
Â Â vecÂ :Â vector?
procedure
(vector-map!Â procÂ vecÂ ...+)Â ->Â vector?
Â Â procÂ :Â procedure?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
procedure
(vector-appendÂ vecÂ ...)Â ->Â vector?
Â Â vecÂ :Â vector?
procedure
(vector-takeÂ vecÂ pos)Â ->Â vector?
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-take-rightÂ vecÂ pos)Â ->Â vector?
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-dropÂ vecÂ pos)Â ->Â vector?
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-drop-rightÂ vecÂ pos)Â ->Â vector?
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-split-atÂ vecÂ pos)Â ->Â vector?Â vector?
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-split-at-rightÂ vecÂ pos)Â ->Â vector?Â vector?
Â Â vecÂ :Â vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(vector-copyÂ vecÂ [startÂ end])Â ->Â vector?
Â Â vecÂ :Â vector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ v)
procedure
(vector-filterÂ predÂ vec)Â ->Â vector?
Â Â predÂ :Â procedure?
Â Â vecÂ :Â vector?
procedure
(vector-filter-notÂ predÂ vec)Â ->Â vector?
Â Â predÂ :Â procedure?
Â Â vecÂ :Â vector?
procedure
(vector-countÂ procÂ vecÂ ...+)Â ->Â exact-nonnegative-integer?
Â Â procÂ :Â procedure?
Â Â vecÂ :Â vector?
procedure
(vector-argminÂ procÂ vec)Â ->Â any/c
Â Â procÂ :Â (->Â any/cÂ real?)
Â Â vecÂ :Â vector?
procedure
(vector-argmaxÂ procÂ vec)Â ->Â any/c
Â Â procÂ :Â (->Â any/cÂ real?)
Â Â vecÂ :Â vector?
procedure
(vector-memberÂ vÂ vec)Â ->Â (or/cÂ natural-number/cÂ #f)
Â Â vÂ :Â any/c
Â Â vecÂ :Â vector?
procedure
(vector-memvÂ vÂ vec)Â ->Â (or/cÂ natural-number/cÂ #f)
Â Â vÂ :Â any/c
Â Â vecÂ :Â vector?
procedure
(vector-memqÂ vÂ vec)Â ->Â (or/cÂ natural-number/cÂ #f)
Â Â vÂ :Â any/c
Â Â vecÂ :Â vector?
procedure
(vector-sortÂ  vec                        Â Â  Â Â 
Â            Â  less-than?                 Â Â  Â Â 
Â            Â [start                      Â Â  Â Â 
Â            Â  end                        Â Â  Â Â 
Â            Â  #:keyÂ key                  Â Â  Â Â 
Â            Â  #:cache-keys?Â cache-keys?])Â ->Â vector?
Â Â vecÂ :Â vector?
Â Â less-than?Â :Â (any/cÂ any/cÂ . -> .Â any/c)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ vec)
Â Â keyÂ :Â (any/cÂ . -> .Â any/c)Â =Â (Î»Â (x)Â x)
Â Â cache-keys?Â :Â boolean?Â =Â #f
procedure
(vector-sort!Â  vec                        Â Â  Â Â 
Â             Â  less-than?                 Â Â  Â Â 
Â             Â [start                      Â Â  Â Â 
Â             Â  end                        Â Â  Â Â 
Â             Â  #:keyÂ key                  Â Â  Â Â 
Â             Â  #:cache-keys?Â cache-keys?])Â ->Â void?
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â less-than?Â :Â (any/cÂ any/cÂ . -> .Â any/c)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â exact-nonnegative-integer?Â =Â (vector-lengthÂ vec)
Â Â keyÂ :Â (any/cÂ . -> .Â any/c)Â =Â (Î»Â (x)Â x)
Â Â cache-keys?Â :Â boolean?Â =Â #f
procedure
(stencil-vector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(stencil-vector-mask-width)Â ->Â exact-nonnegative-integer?
procedure
(stencil-vectorÂ maskÂ vÂ ...)Â ->Â stencil-vector?
Â Â maskÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â vÂ :Â any/c
procedure
(stencil-vector-maskÂ vec)
Â ->Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â vecÂ :Â stencil-vector?
procedure
(stencil-vector-lengthÂ vec)
Â ->Â (integer-inÂ 0Â (sub1Â (stencil-vector-mask-width)))
Â Â vecÂ :Â stencil-vector?
procedure
(stencil-vector-refÂ vecÂ pos)Â ->Â any/c
Â Â vecÂ :Â stencil-vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(stencil-vector-set!Â vecÂ posÂ v)Â ->Â avoid?
Â Â vecÂ :Â stencil-vector?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(stencil-vector-updateÂ vec        Â Â  Â Â 
Â                      Â remove-maskÂ Â  Â Â 
Â                      Â add-mask   Â Â  Â Â 
Â                      Â vÂ ...)     Â ->Â stencil-vector?
Â Â vecÂ :Â stencil-vector?
Â Â remove-maskÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â add-maskÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â vÂ :Â any/c
procedure
(box?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(boxÂ v)Â ->Â box?
Â Â vÂ :Â any/c
procedure
(box-immutableÂ v)Â ->Â (and/cÂ box?Â immutable?)
Â Â vÂ :Â any/c
procedure
(unboxÂ box)Â ->Â any/c
Â Â boxÂ :Â box?
procedure
(set-box!Â boxÂ v)Â ->Â void?
Â Â boxÂ :Â (and/cÂ box?Â (not/cÂ immutable?))
Â Â vÂ :Â any/c
procedure
(unbox*Â box)Â ->Â any/c
Â Â boxÂ :Â (andÂ box?Â (not/cÂ impersonator?))
procedure
(set-box*!Â boxÂ v)Â ->Â void?
Â Â boxÂ :Â (and/cÂ box?Â (not/cÂ immutable?)Â (not/cÂ impersonator?))
Â Â vÂ :Â any/c
procedure
(box-cas!Â boxÂ oldÂ new)Â ->Â boolean?
Â Â boxÂ :Â (and/cÂ box?Â (not/cÂ immutable?)Â (not/cÂ impersonator?))
Â Â oldÂ :Â any/c
Â Â newÂ :Â any/c
procedure
(hash?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(hash-equal?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-equal-always?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-eqv?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-eq?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-strong?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-weak?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-ephemeron?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hashÂ keyÂ valÂ ...Â ...)
Â ->Â (and/cÂ hash?Â hash-equal?Â immutable?Â hash-strong?)
Â Â keyÂ :Â any/c
Â Â valÂ :Â any/c
procedure
(hashalwÂ keyÂ valÂ ...Â ...)
Â ->Â (and/cÂ hash?Â hash-equal-always?Â immutable?Â hash-strong?)
Â Â keyÂ :Â any/c
Â Â valÂ :Â any/c
procedure
(hasheqÂ keyÂ valÂ ...Â ...)
Â ->Â (and/cÂ hash?Â hash-eq?Â immutable?Â hash-strong?)
Â Â keyÂ :Â any/c
Â Â valÂ :Â any/c
procedure
(hasheqvÂ keyÂ valÂ ...Â ...)
Â ->Â (and/cÂ hash?Â hash-eqv?Â immutable?Â hash-strong?)
Â Â keyÂ :Â any/c
Â Â valÂ :Â any/c
procedure
(make-hashÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal?Â (not/cÂ immutable?)Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-hashalwÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal-always?Â (not/cÂ immutable?)Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-hasheqvÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eqv?Â (not/cÂ immutable?)Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-hasheqÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eq?Â (not/cÂ immutable?)Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-weak-hashÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal?Â (not/cÂ immutable?)Â hash-weak?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-weak-hashalwÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal-always?Â (not/cÂ immutable?)Â hash-weak?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-weak-hasheqvÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eqv?Â (not/cÂ immutable?)Â hash-weak?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-weak-hasheqÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eq?Â (not/cÂ immutable?)Â hash-weak?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-ephemeron-hashÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal?Â (not/cÂ immutable?)Â hash-ephemeron?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-ephemeron-hashalwÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal-always?Â (not/cÂ immutable?)Â hash-ephemeron?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-ephemeron-hasheqvÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eqv?Â (not/cÂ immutable?)Â hash-ephemeron?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-ephemeron-hasheqÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eq?Â (not/cÂ immutable?)Â hash-ephemeron?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-immutable-hashÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal?Â immutable?Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-immutable-hashalwÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-equal-always?Â immutable?Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-immutable-hasheqvÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eqv?Â immutable?Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(make-immutable-hasheqÂ [assocs])
Â ->Â (and/cÂ hash?Â hash-eq?Â immutable?Â hash-strong?)
Â Â assocsÂ :Â (listofÂ pair?)Â =Â null
procedure
(hash-set!Â hashÂ keyÂ v)Â ->Â void?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(hash-set*!Â hashÂ keyÂ vÂ ...Â ...)Â ->Â void?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(hash-setÂ hashÂ keyÂ v)Â ->Â (and/cÂ hash?Â immutable?)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(hash-set*Â hashÂ keyÂ vÂ ...Â ...)Â ->Â (and/cÂ hash?Â immutable?)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(hash-refÂ hashÂ keyÂ [failure-result])Â ->Â any
Â Â hashÂ :Â hash?
Â Â keyÂ :Â any/c
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()
                   Â Â (raiseÂ (make-exn:fail:contractÂ ....)))
procedure
(hash-ref-keyÂ hashÂ keyÂ [failure-result])Â ->Â any
Â Â hashÂ :Â hash?
Â Â keyÂ :Â any/c
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()
                   Â Â (raiseÂ (make-exn:fail:contractÂ ....)))
procedure
(hash-ref!Â hashÂ keyÂ to-set)Â ->Â any
Â Â hashÂ :Â hash?
Â Â keyÂ :Â any/c
Â Â to-setÂ :Â failure-result/c
procedure
(hash-has-key?Â hashÂ key)Â ->Â boolean?
Â Â hashÂ :Â hash?
Â Â keyÂ :Â any/c
procedure
(hash-update!Â  hash            Â Â  Â Â 
Â             Â  key             Â Â  Â Â 
Â             Â  updater         Â Â  Â Â 
Â             Â [failure-result])Â ->Â void?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
Â Â updaterÂ :Â (any/cÂ . -> .Â any/c)
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()
                   Â Â (raiseÂ (make-exn:fail:contractÂ ....)))
procedure
(hash-updateÂ hashÂ keyÂ updaterÂ [failure-result])
Â ->Â (and/cÂ hash?Â immutable?)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â keyÂ :Â any/c
Â Â updaterÂ :Â (any/cÂ . -> .Â any/c)
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()
                   Â Â (raiseÂ (make-exn:fail:contractÂ ....)))
procedure
(hash-remove!Â hashÂ key)Â ->Â void?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
procedure
(hash-removeÂ hashÂ key)Â ->Â (and/cÂ hash?Â immutable?)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â keyÂ :Â any/c
procedure
(hash-clear!Â hash)Â ->Â void?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?))
procedure
(hash-clearÂ hash)Â ->Â (and/cÂ hash?Â immutable?)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
procedure
(hash-copy-clearÂ hashÂ [#:kindÂ kind])Â ->Â hash?
Â Â hashÂ :Â hash?
Â Â kindÂ :Â (or/cÂ #fÂ 'immutableÂ 'mutableÂ 'weakÂ 'ephemeron)Â =Â #f
procedure
(hash-mapÂ hashÂ procÂ [try-order?])Â ->Â (listofÂ any/c)
Â Â hashÂ :Â hash?
Â Â procÂ :Â (any/cÂ any/cÂ . -> .Â any/c)
Â Â try-order?Â :Â any/cÂ =Â #f
procedure
(hash-map/copyÂ hashÂ procÂ [#:kindÂ kind])Â ->Â hash?
Â Â hashÂ :Â hash?
Â Â procÂ :Â (any/cÂ any/cÂ . -> .Â (valuesÂ any/cÂ any/c))
Â Â kindÂ :Â (or/cÂ #fÂ 'immutableÂ 'mutableÂ 'weakÂ 'ephemeron)Â =Â #f
procedure
(hash-keysÂ hashÂ [try-order?])Â ->Â (listofÂ any/c)
Â Â hashÂ :Â hash?
Â Â try-order?Â :Â any/cÂ =Â #f
procedure
(hash-valuesÂ hashÂ [try-order?])Â ->Â (listofÂ any/c)
Â Â hashÂ :Â hash?
Â Â try-order?Â :Â any/cÂ =Â #f
procedure
(hash->listÂ hashÂ [try-order?])Â ->Â (listofÂ (cons/cÂ any/cÂ any/c))
Â Â hashÂ :Â hash?
Â Â try-order?Â :Â any/cÂ =Â #f
procedure
(hash-keys-subset?Â hash1Â hash2)Â ->Â boolean?
Â Â hash1Â :Â hash?
Â Â hash2Â :Â hash?
procedure
(hash-for-eachÂ hashÂ procÂ [try-order?])Â ->Â void?
Â Â hashÂ :Â hash?
Â Â procÂ :Â (any/cÂ any/cÂ . -> .Â any)
Â Â try-order?Â :Â any/cÂ =Â #f
procedure
(hash-countÂ hash)Â ->Â exact-nonnegative-integer?
Â Â hashÂ :Â hash?
procedure
(hash-empty?Â hash)Â ->Â boolean?
Â Â hashÂ :Â hash?
procedure
(hash-iterate-firstÂ hash)
Â ->Â (or/cÂ #fÂ exact-nonnegative-integer?)
Â Â hashÂ :Â hash?
procedure
(hash-iterate-nextÂ hashÂ pos)
Â ->Â (or/cÂ #fÂ exact-nonnegative-integer?)
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(hash-iterate-keyÂ hashÂ pos)Â ->Â any/c
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(hash-iterate-keyÂ hashÂ posÂ bad-index-v)Â ->Â any/c
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â bad-index-vÂ :Â any/c
procedure
(hash-iterate-valueÂ hashÂ pos)Â ->Â any
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(hash-iterate-valueÂ hashÂ posÂ bad-index-v)Â ->Â any
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â bad-index-vÂ :Â any/c
procedure
(hash-iterate-pairÂ hashÂ pos)Â ->Â (consÂ any/cÂ any/c)
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(hash-iterate-pairÂ hashÂ posÂ bad-index-v)Â ->Â (consÂ any/cÂ any/c)
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â bad-index-vÂ :Â any/c
procedure
(hash-iterate-key+valueÂ hashÂ pos)Â ->Â any/cÂ any/c
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(hash-iterate-key+valueÂ hash        Â Â  Â Â 
Â                       Â pos         Â Â  Â Â 
Â                       Â bad-index-v)Â ->Â any/cÂ any/c
Â Â hashÂ :Â hash?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â bad-index-vÂ :Â any/c
procedure
(hash-copyÂ hash)Â ->Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â hashÂ :Â hash?
procedure
(hash-unionÂ  h0                         Â 
Â           Â  hÂ ...                      Â 
Â           Â [#:combineÂ combine          Â 
Â           Â  #:combine/keyÂ combine/key])Â 
Â ->Â (and/cÂ hash?Â immutable?)
Â Â h0Â :Â (and/cÂ hash?Â immutable?)
Â Â hÂ :Â hash?
Â Â combineÂ :Â (->Â any/cÂ any/cÂ any/c)
Â  Â       Â =Â (lambdaÂ _Â (errorÂ 'hash-unionÂ ....))
Â Â combine/keyÂ :Â (->Â any/cÂ any/cÂ any/cÂ any/c)
Â  Â           Â =Â (lambdaÂ (kÂ aÂ b)Â (combineÂ aÂ b))
procedure
(hash-union!Â  h0                         Â Â  Â Â 
Â            Â  hÂ ...                      Â Â  Â Â 
Â            Â [#:combineÂ combine          Â Â  Â Â 
Â            Â  #:combine/keyÂ combine/key])Â ->Â void?
Â Â h0Â :Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â hÂ :Â hash?
Â Â combineÂ :Â (->Â any/cÂ any/cÂ any/c)
Â  Â       Â =Â (lambdaÂ _Â (errorÂ 'hash-unionÂ ....))
Â Â combine/keyÂ :Â (->Â any/cÂ any/cÂ any/cÂ any/c)
Â  Â           Â =Â (lambdaÂ (kÂ aÂ b)Â (combineÂ aÂ b))
procedure
(hash-intersectÂ  h0                         Â 
Â               Â  hÂ ...                      Â 
Â               Â [#:combineÂ combine          Â 
Â               Â  #:combine/keyÂ combine/key])Â 
Â ->Â (and/cÂ hash?Â immutable?)
Â Â h0Â :Â (and/cÂ hash?Â immutable?)
Â Â hÂ :Â hash?
Â Â combineÂ :Â (->Â any/cÂ any/cÂ any/c)
Â  Â       Â =Â (lambdaÂ _Â (errorÂ 'hash-intersectÂ ...))
Â Â combine/keyÂ :Â (->Â any/cÂ any/cÂ any/cÂ any/c)
Â  Â           Â =Â (lambdaÂ (kÂ aÂ b)Â (combineÂ aÂ b))
procedure
(sequence?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(in-rangeÂ end)Â ->Â stream?
Â Â endÂ :Â real?
(in-rangeÂ startÂ endÂ [step])Â ->Â stream?
Â Â startÂ :Â real?
Â Â endÂ :Â real?
Â Â stepÂ :Â real?Â =Â 1
procedure
(in-inclusive-rangeÂ startÂ endÂ [step])Â ->Â stream?
Â Â startÂ :Â real?
Â Â endÂ :Â real?
Â Â stepÂ :Â real?Â =Â 1
procedure
(in-naturalsÂ [start])Â ->Â stream?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(in-listÂ lst)Â ->Â stream?
Â Â lstÂ :Â list?
procedure
(in-mlistÂ mlst)Â ->Â sequence?
Â Â mlstÂ :Â mlist?
procedure
(in-vectorÂ vecÂ [startÂ stopÂ step])Â ->Â sequence?
Â Â vecÂ :Â vector?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â stopÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â stepÂ :Â (and/cÂ exact-integer?Â (not/cÂ zero?))Â =Â 1
procedure
(in-stringÂ strÂ [startÂ stopÂ step])Â ->Â sequence?
Â Â strÂ :Â string?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â stopÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â stepÂ :Â (and/cÂ exact-integer?Â (not/cÂ zero?))Â =Â 1
procedure
(in-bytesÂ bstrÂ [startÂ stopÂ step])Â ->Â sequence?
Â Â bstrÂ :Â bytes?
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â stopÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â stepÂ :Â (and/cÂ exact-integer?Â (not/cÂ zero?))Â =Â 1
procedure
(in-portÂ [rÂ in])Â ->Â sequence?
Â Â rÂ :Â (input-port?Â . -> .Â any/c)Â =Â read
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(in-input-port-bytesÂ in)Â ->Â sequence?
Â Â inÂ :Â input-port?
procedure
(in-input-port-charsÂ in)Â ->Â sequence?
Â Â inÂ :Â input-port?
procedure
(in-linesÂ [inÂ mode])Â ->Â sequence?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â    Â =Â 'any
procedure
(in-bytes-linesÂ [inÂ mode])Â ->Â sequence?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â    Â =Â 'any
procedure
(in-hashÂ hash)Â ->Â sequence?
Â Â hashÂ :Â hash?
(in-hashÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â hash?
Â Â bad-index-vÂ :Â any/c
procedure
(in-hash-keysÂ hash)Â ->Â sequence?
Â Â hashÂ :Â hash?
(in-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â hash?
Â Â bad-index-vÂ :Â any/c
procedure
(in-hash-valuesÂ hash)Â ->Â sequence?
Â Â hashÂ :Â hash?
(in-hash-valuesÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â hash?
Â Â bad-index-vÂ :Â any/c
procedure
(in-hash-pairsÂ hash)Â ->Â sequence?
Â Â hashÂ :Â hash?
(in-hash-pairsÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â hash?
Â Â bad-index-vÂ :Â any/c
procedure
(in-mutable-hashÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
procedure
(in-mutable-hashÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-mutable-hash-keysÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
procedure
(in-mutable-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-mutable-hash-valuesÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
procedure
(in-mutable-hash-valuesÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-mutable-hash-pairsÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
procedure
(in-mutable-hash-pairsÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-immutable-hashÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
procedure
(in-immutable-hashÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-immutable-hash-keysÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
procedure
(in-immutable-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-immutable-hash-valuesÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
procedure
(in-immutable-hash-valuesÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-immutable-hash-pairsÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
procedure
(in-immutable-hash-pairsÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-weak-hashÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
procedure
(in-weak-hashÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-weak-hash-keysÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
procedure
(in-weak-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-weak-hash-valuesÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
procedure
(in-weak-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-weak-hash-pairsÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
procedure
(in-weak-hash-pairsÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-ephemeron-hashÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
procedure
(in-ephemeron-hashÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-ephemeron-hash-keysÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
procedure
(in-ephemeron-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-ephemeron-hash-valuesÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
procedure
(in-ephemeron-hash-keysÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-ephemeron-hash-pairsÂ hash)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
procedure
(in-ephemeron-hash-pairsÂ hashÂ bad-index-v)Â ->Â sequence?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â bad-index-vÂ :Â any/c
procedure
(in-directoryÂ [dirÂ use-dir?])Â ->Â sequence?
Â Â dirÂ :Â (or/cÂ #fÂ path-string?)Â =Â #f
Â Â use-dir?Â :Â ((and/cÂ path?Â complete-path?)Â . -> .Â any/c)
Â  Â        Â =Â (lambdaÂ (dir-path)Â #t)
procedure
(in-producerÂ producer)Â ->Â sequence?
Â Â producerÂ :Â procedure?
(in-producerÂ producerÂ stopÂ argÂ ...)Â ->Â sequence?
Â Â producerÂ :Â procedure?
Â Â stopÂ :Â any/c
Â Â argÂ :Â any/c
procedure
(in-valueÂ v)Â ->Â sequence?
Â Â vÂ :Â any/c
procedure
(in-indexedÂ seq)Â ->Â sequence?
Â Â seqÂ :Â sequence?
procedure
(in-sequencesÂ seqÂ ...)Â ->Â sequence?
Â Â seqÂ :Â sequence?
procedure
(in-cycleÂ seqÂ ...)Â ->Â sequence?
Â Â seqÂ :Â sequence?
procedure
(in-parallelÂ seqÂ ...)Â ->Â sequence?
Â Â seqÂ :Â sequence?
procedure
(in-values-sequenceÂ seq)Â ->Â sequence?
Â Â seqÂ :Â sequence?
procedure
(in-values*-sequenceÂ seq)Â ->Â sequence?
Â Â seqÂ :Â sequence?
procedure
(stop-beforeÂ seqÂ pred)Â ->Â sequence?
Â Â seqÂ :Â sequence?
Â Â predÂ :Â (any/cÂ . -> .Â any)
procedure
(stop-afterÂ seqÂ pred)Â ->Â sequence?
Â Â seqÂ :Â sequence?
Â Â predÂ :Â (any/cÂ . -> .Â any)
procedure
(make-do-sequenceÂ thunk)Â ->Â sequence?
Â Â thunkÂ :Â (or/cÂ (->Â (valuesÂ (any/cÂ . -> .Â any)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (any/cÂ . -> .Â any/c)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â any/c
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (any/cÂ . -> .Â any/c)Â #f)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (()Â ()Â #:restÂ list?Â . ->* .Â any/c)Â #f)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ ((any/c)Â ()Â #:restÂ list?Â . ->* .Â any/c)Â #f)))
          Â Â Â Â Â Â (->Â (valuesÂ (any/cÂ . -> .Â any)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (any/cÂ . -> .Â any/c)Â #f)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (any/cÂ . -> .Â any/c)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â any/c
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (any/cÂ . -> .Â any/c)Â #f)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (()Â ()Â #:restÂ list?Â . ->* .Â any/c)Â #f)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ ((any/c)Â ()Â #:restÂ list?Â . ->* .Â any/c)Â #f))))
value
prop:sequenceÂ :Â struct-type-property?
procedure
(sequence->streamÂ seq)Â ->Â stream?
Â Â seqÂ :Â sequence?
procedure
(sequence-generateÂ seq)Â ->Â (->Â boolean?)Â (->Â any)
Â Â seqÂ :Â sequence?
procedure
(sequence-generate*Â seq)
Â ->Â (or/cÂ list?Â #f)
    (->Â (valuesÂ (or/cÂ list?Â #f)Â procedure?))
Â Â seqÂ :Â sequence?
value
empty-sequenceÂ :Â sequence?
procedure
(sequence->listÂ s)Â ->Â list?
Â Â sÂ :Â sequence?
procedure
(sequence-lengthÂ s)Â ->Â exact-nonnegative-integer?
Â Â sÂ :Â sequence?
procedure
(sequence-refÂ sÂ i)Â ->Â any
Â Â sÂ :Â sequence?
Â Â iÂ :Â exact-nonnegative-integer?
procedure
(sequence-tailÂ sÂ i)Â ->Â sequence?
Â Â sÂ :Â sequence?
Â Â iÂ :Â exact-nonnegative-integer?
procedure
(sequence-appendÂ sÂ ...)Â ->Â sequence?
Â Â sÂ :Â sequence?
procedure
(sequence-mapÂ fÂ s)Â ->Â sequence?
Â Â fÂ :Â procedure?
Â Â sÂ :Â sequence?
procedure
(sequence-andmapÂ fÂ s)Â ->Â boolean?
Â Â fÂ :Â (->Â any/cÂ ...Â boolean?)
Â Â sÂ :Â sequence?
procedure
(sequence-ormapÂ fÂ s)Â ->Â boolean?
Â Â fÂ :Â (->Â any/cÂ ...Â boolean?)
Â Â sÂ :Â sequence?
procedure
(sequence-for-eachÂ fÂ s)Â ->Â void?
Â Â fÂ :Â (->Â any/cÂ ...Â any)
Â Â sÂ :Â sequence?
procedure
(sequence-foldÂ fÂ iÂ s)Â ->Â any/c
Â Â fÂ :Â (->Â any/cÂ any/cÂ ...Â any/c)
Â Â iÂ :Â any/c
Â Â sÂ :Â sequence?
procedure
(sequence-countÂ fÂ s)Â ->Â exact-nonnegative-integer?
Â Â fÂ :Â procedure?
Â Â sÂ :Â sequence?
procedure
(sequence-filterÂ fÂ s)Â ->Â sequence?
Â Â fÂ :Â (->Â any/cÂ ...Â boolean?)
Â Â sÂ :Â sequence?
procedure
(sequence-add-betweenÂ sÂ e)Â ->Â sequence?
Â Â sÂ :Â sequence?
Â Â eÂ :Â any/c
procedure
(sequence/cÂ [#:min-countÂ min-count]Â Â  Â Â 
Â           Â  elem/cÂ ...)           Â ->Â contract?
Â Â min-countÂ :Â (or/cÂ #fÂ exact-nonnegative-integer?)Â =Â #f
Â Â elem/cÂ :Â contract?
procedure
(in-syntaxÂ stx)Â ->Â sequence?
Â Â stxÂ :Â syntax?
procedure
(in-sliceÂ lengthÂ seq)Â ->Â sequence?
Â Â lengthÂ :Â exact-positive-integer?
Â Â seqÂ :Â sequence?
procedure
(stream?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(stream-empty?Â s)Â ->Â boolean?
Â Â sÂ :Â stream?
procedure
(stream-firstÂ s)Â ->Â any
Â Â sÂ :Â (and/cÂ stream?Â (not/cÂ stream-empty?))
procedure
(stream-restÂ s)Â ->Â stream?
Â Â sÂ :Â (and/cÂ stream?Â (not/cÂ stream-empty?))
syntax
(stream-consÂ first-exprÂ rest-expr)
(stream-consÂ #:eagerÂ first-exprÂ rest-expr)
(stream-consÂ first-exprÂ #:eagerÂ rest-expr)
(stream-consÂ #:eagerÂ first-exprÂ #:eagerÂ rest-expr)
syntax
(stream-lazyÂ stream-expr)
(stream-lazyÂ #:whoÂ who-exprÂ stream-expr)
procedure
(stream-forceÂ s)Â ->Â stream?
Â Â sÂ :Â stream?
syntax
(streamÂ elem-exprÂ ...)
Â 
elem-exprÂ =Â (valuesÂ single-exprÂ ...)
        Â Â |Â single-expr
syntax
(stream*Â elem-exprÂ ...Â tail-expr)
procedure
(in-streamÂ s)Â ->Â sequence?
Â Â sÂ :Â stream?
value
empty-streamÂ :Â stream?
procedure
(stream->listÂ s)Â ->Â list?
Â Â sÂ :Â stream?
procedure
(stream-lengthÂ s)Â ->Â exact-nonnegative-integer?
Â Â sÂ :Â stream?
procedure
(stream-refÂ sÂ i)Â ->Â any
Â Â sÂ :Â stream?
Â Â iÂ :Â exact-nonnegative-integer?
procedure
(stream-tailÂ sÂ i)Â ->Â stream?
Â Â sÂ :Â stream?
Â Â iÂ :Â exact-nonnegative-integer?
procedure
(stream-takeÂ sÂ i)Â ->Â stream?
Â Â sÂ :Â stream?
Â Â iÂ :Â exact-nonnegative-integer?
procedure
(stream-appendÂ sÂ ...)Â ->Â stream?
Â Â sÂ :Â stream?
procedure
(stream-mapÂ fÂ s)Â ->Â stream?
Â Â fÂ :Â procedure?
Â Â sÂ :Â stream?
procedure
(stream-andmapÂ fÂ s)Â ->Â boolean?
Â Â fÂ :Â (->Â any/cÂ ...Â boolean?)
Â Â sÂ :Â stream?
procedure
(stream-ormapÂ fÂ s)Â ->Â boolean?
Â Â fÂ :Â (->Â any/cÂ ...Â boolean?)
Â Â sÂ :Â stream?
procedure
(stream-for-eachÂ fÂ s)Â ->Â void?
Â Â fÂ :Â (->Â any/cÂ ...Â any)
Â Â sÂ :Â stream?
procedure
(stream-foldÂ fÂ iÂ s)Â ->Â any/c
Â Â fÂ :Â (->Â any/cÂ any/cÂ ...Â any/c)
Â Â iÂ :Â any/c
Â Â sÂ :Â stream?
procedure
(stream-countÂ fÂ s)Â ->Â exact-nonnegative-integer?
Â Â fÂ :Â procedure?
Â Â sÂ :Â stream?
procedure
(stream-filterÂ fÂ s)Â ->Â stream?
Â Â fÂ :Â (->Â any/cÂ ...Â boolean?)
Â Â sÂ :Â stream?
procedure
(stream-add-betweenÂ sÂ e)Â ->Â stream?
Â Â sÂ :Â stream?
Â Â eÂ :Â any/c
syntax
(for/streamÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/streamÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
value
gen:streamÂ :Â any/c
value
prop:streamÂ :Â struct-type-property?
procedure
(stream/cÂ c)Â ->Â contract?
Â Â cÂ :Â contract?
procedure
(generator?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(generatorÂ formalsÂ bodyÂ ...+)
Â 
formalsÂ =Â (idÂ ...)
      Â Â |Â (idÂ ...+Â . rest-id)
      Â Â |Â rest-id
procedure
(yieldÂ vÂ ...)Â ->Â any
Â Â vÂ :Â any/c
syntax
(infinite-generatorÂ bodyÂ ...+)
syntax
(in-generatorÂ maybe-arityÂ bodyÂ ...+)
Â 
maybe-arityÂ =Â 
          Â Â |Â #:arityÂ arity-k
procedure
(generator-stateÂ g)Â ->Â symbol?
Â Â gÂ :Â generator?
procedure
(sequence->generatorÂ s)Â ->Â (->Â any)
Â Â sÂ :Â sequence?
procedure
(sequence->repeated-generatorÂ s)Â ->Â (->Â any)
Â Â sÂ :Â sequence?
procedure
(dict?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(dict-implements?Â dÂ symÂ ...)Â ->Â boolean?
Â Â dÂ :Â dict?
Â Â symÂ :Â symbol?
procedure
(dict-implements/cÂ symÂ ...)Â ->Â flat-contract?
Â Â symÂ :Â symbol?
procedure
(dict-mutable?Â d)Â ->Â boolean?
Â Â dÂ :Â dict?
procedure
(dict-can-remove-keys?Â d)Â ->Â boolean?
Â Â dÂ :Â dict?
procedure
(dict-can-functional-set?Â d)Â ->Â boolean?
Â Â dÂ :Â dict?
syntax
gen:dict
value
prop:dictÂ :Â struct-type-property?
procedure
(dict-refÂ dictÂ keyÂ [failure-result])Â ->Â any
Â Â dictÂ :Â dict?
Â Â keyÂ :Â any/c
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()Â (raiseÂ (make-exn:failÂ ....)))
procedure
(dict-set!Â dictÂ keyÂ v)Â ->Â void?
Â Â dictÂ :Â (and/cÂ dict?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(dict-setÂ dictÂ keyÂ v)Â ->Â (and/cÂ dict?Â immutable?)
Â Â dictÂ :Â (and/cÂ dict?Â immutable?)
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(dict-remove!Â dictÂ key)Â ->Â void?
Â Â dictÂ :Â (and/cÂ dict?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
procedure
(dict-removeÂ dictÂ key)Â ->Â (and/cÂ dict?Â immutable?)
Â Â dictÂ :Â (and/cÂ dict?Â immutable?)
Â Â keyÂ :Â any/c
procedure
(dict-iterate-firstÂ dict)Â ->Â any/c
Â Â dictÂ :Â dict?
procedure
(dict-iterate-nextÂ dictÂ pos)Â ->Â any/c
Â Â dictÂ :Â dict?
Â Â posÂ :Â any/c
procedure
(dict-iterate-keyÂ dictÂ pos)Â ->Â any
Â Â dictÂ :Â dict?
Â Â posÂ :Â any/c
procedure
(dict-iterate-valueÂ dictÂ pos)Â ->Â any
Â Â dictÂ :Â dict?
Â Â posÂ :Â any/c
procedure
(dict-has-key?Â dictÂ key)Â ->Â boolean?
Â Â dictÂ :Â dict?
Â Â keyÂ :Â any/c
procedure
(dict-set*!Â dictÂ keyÂ vÂ ...Â ...)Â ->Â void?
Â Â dictÂ :Â (and/cÂ dict?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(dict-set*Â dictÂ keyÂ vÂ ...Â ...)Â ->Â (and/cÂ dict?Â immutable?)
Â Â dictÂ :Â (and/cÂ dict?Â immutable?)
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(dict-ref!Â dictÂ keyÂ to-set)Â ->Â any
Â Â dictÂ :Â dict?
Â Â keyÂ :Â any/c
Â Â to-setÂ :Â any/c
procedure
(dict-update!Â  dict            Â Â  Â Â 
Â             Â  key             Â Â  Â Â 
Â             Â  updater         Â Â  Â Â 
Â             Â [failure-result])Â ->Â void?
Â Â dictÂ :Â (and/cÂ dict?Â (not/cÂ immutable?))
Â Â keyÂ :Â any/c
Â Â updaterÂ :Â (any/cÂ . -> .Â any/c)
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()Â (raiseÂ (make-exn:failÂ ....)))
procedure
(dict-updateÂ dictÂ keyÂ updaterÂ [failure-result])
Â ->Â (and/cÂ dict?Â immutable?)
Â Â dictÂ :Â dict?
Â Â keyÂ :Â any/c
Â Â updaterÂ :Â (any/cÂ . -> .Â any/c)
Â Â failure-resultÂ :Â failure-result/c
Â  Â              Â =Â (lambdaÂ ()Â (raiseÂ (make-exn:failÂ ....)))
procedure
(dict-mapÂ dictÂ proc)Â ->Â (listofÂ any/c)
Â Â dictÂ :Â dict?
Â Â procÂ :Â (any/cÂ any/cÂ . -> .Â any/c)
procedure
(dict-map/copyÂ dictÂ proc)Â ->Â dict?
Â Â dictÂ :Â dict?
Â Â procÂ :Â (any/cÂ any/cÂ . -> .Â (valuesÂ any/cÂ any/c))
procedure
(dict-for-eachÂ dictÂ proc)Â ->Â void?
Â Â dictÂ :Â dict?
Â Â procÂ :Â (any/cÂ any/cÂ . -> .Â any)
procedure
(dict-empty?Â dict)Â ->Â boolean?
Â Â dictÂ :Â dict?
procedure
(dict-countÂ dict)Â ->Â exact-nonnegative-integer?
Â Â dictÂ :Â dict?
procedure
(dict-copyÂ dict)Â ->Â dict?
Â Â dictÂ :Â dict?
procedure
(dict-clearÂ dict)Â ->Â dict?
Â Â dictÂ :Â dict?
procedure
(dict-clear!Â dict)Â ->Â void?
Â Â dictÂ :Â dict?
procedure
(dict-keysÂ dict)Â ->Â list?
Â Â dictÂ :Â dict?
procedure
(dict-valuesÂ dict)Â ->Â list?
Â Â dictÂ :Â dict?
procedure
(dict->listÂ dict)Â ->Â list?
Â Â dictÂ :Â dict?
procedure
(in-dictÂ dict)Â ->Â sequence?
Â Â dictÂ :Â dict?
procedure
(in-dict-keysÂ dict)Â ->Â sequence?
Â Â dictÂ :Â dict?
procedure
(in-dict-valuesÂ dict)Â ->Â sequence?
Â Â dictÂ :Â dict?
procedure
(in-dict-pairsÂ dict)Â ->Â sequence?
Â Â dictÂ :Â dict?
value
prop:dict/contractÂ :Â struct-type-property?
procedure
(dict-key-contractÂ d)Â ->Â contract?
Â Â dÂ :Â dict?
procedure
(dict-value-contractÂ d)Â ->Â contract?
Â Â dÂ :Â dict?
procedure
(dict-iter-contractÂ d)Â ->Â contract?
Â Â dÂ :Â dict?
syntax
(define-custom-hash-typesÂ name
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â optional-predicate
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â comparison-expr
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â optional-hash-functions)
Â 
     optional-predicateÂ =Â 
                      Â Â |Â #:key?Â predicate-expr
                      Â Â Â Â Â 
optional-hash-functionsÂ =Â 
                      Â Â |Â hash1-expr
                      Â Â |Â hash1-exprÂ hash2-expr
procedure
(make-custom-hash-typesÂ  eql?       Â Â  Â Â 
Â                       Â [hash1      Â Â  Â Â 
Â                       Â  hash2      Â Â  Â Â 
Â                       Â  #:key?Â key?Â Â  Â Â 
Â                       Â  #:nameÂ nameÂ Â  Â Â 
Â                       Â  #:forÂ who])Â ->Â (any/cÂ . -> .Â boolean?)
                                        (any/cÂ . -> .Â boolean?)
                                        (any/cÂ . -> .Â boolean?)
                                        (any/cÂ . -> .Â boolean?)
                                        (->*Â []Â [dict?]Â dict?)
                                        (->*Â []Â [dict?]Â dict?)
                                        (->*Â []Â [dict?]Â dict?)
Â Â eql?Â :Â (or/cÂ (any/cÂ any/cÂ . -> .Â any/c)
         Â Â Â Â Â Â (any/cÂ any/cÂ (any/cÂ any/cÂ . -> .Â any/c)Â . -> .Â any/c))
Â Â hash1Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â hash2Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â key?Â :Â (any/cÂ . -> .Â boolean?)Â =Â (constÂ #true)
Â Â nameÂ :Â symbol?Â =Â 'custom-hash
Â Â whoÂ :Â symbol?Â =Â 'make-custom-hash-types
procedure
(make-custom-hashÂ  eql?         Â Â  Â Â 
Â                 Â [hash1        Â Â  Â Â 
Â                 Â  hash2        Â Â  Â Â 
Â                 Â  #:key?Â key?])Â ->Â dict?
Â Â eql?Â :Â (or/cÂ (any/cÂ any/cÂ . -> .Â any/c)
         Â Â Â Â Â Â (any/cÂ any/cÂ (any/cÂ any/cÂ . -> .Â any/c)Â . -> .Â any/c))
Â Â hash1Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â hash2Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â key?Â :Â (any/cÂ . -> .Â boolean?)Â =Â (Î»Â (x)Â #true)
procedure
(make-weak-custom-hashÂ  eql?         Â Â  Â Â 
Â                      Â [hash1        Â Â  Â Â 
Â                      Â  hash2        Â Â  Â Â 
Â                      Â  #:key?Â key?])Â ->Â dict?
Â Â eql?Â :Â (or/cÂ (any/cÂ any/cÂ . -> .Â any/c)
         Â Â Â Â Â Â (any/cÂ any/cÂ (any/cÂ any/cÂ . -> .Â any/c)Â . -> .Â any/c))
Â Â hash1Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â hash2Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â key?Â :Â (any/cÂ . -> .Â boolean?)Â =Â (Î»Â (x)Â #true)
procedure
(make-immutable-custom-hashÂ  eql?         Â Â  Â Â 
Â                           Â [hash1        Â Â  Â Â 
Â                           Â  hash2        Â Â  Â Â 
Â                           Â  #:key?Â key?])Â ->Â dict?
Â Â eql?Â :Â (or/cÂ (any/cÂ any/cÂ . -> .Â any/c)
         Â Â Â Â Â Â (any/cÂ any/cÂ (any/cÂ any/cÂ . -> .Â any/c)Â . -> .Â any/c))
Â Â hash1Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â hash2Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â key?Â :Â (any/cÂ . -> .Â boolean?)Â =Â (Î»Â (x)Â #true)
procedure
(keyword-apply/dictÂ proc              Â Â  Â Â 
Â                   Â kw-dict           Â Â  Â Â 
Â                   Â pos-argÂ ...       Â Â  Â Â 
Â                   Â pos-args          Â Â  Â Â 
Â                   Â #:<kw>Â kw-argÂ ...)Â ->Â any
Â Â procÂ :Â procedure?
Â Â kw-dictÂ :Â dict?
Â Â pos-argÂ :Â any/c
Â Â pos-argsÂ :Â (listofÂ any/c)
Â Â kw-argÂ :Â any/c
procedure
(set-equal?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-equal-always?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-eqv?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-eq?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-mutable?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-weak?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(setÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-equal?Â set?)
Â Â vÂ :Â any/c
procedure
(setalwÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-equal-always?Â set?)
Â Â vÂ :Â any/c
procedure
(seteqvÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-eqv?Â set?)
Â Â vÂ :Â any/c
procedure
(seteqÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-eq?Â set?)
Â Â vÂ :Â any/c
procedure
(mutable-setÂ vÂ ...)
Â ->Â (and/cÂ generic-set?Â set-equal?Â set-mutable?)
Â Â vÂ :Â any/c
procedure
(mutable-setalwÂ vÂ ...)
Â ->Â (and/cÂ generic-set?Â set-equal-always?Â set-mutable?)
Â Â vÂ :Â any/c
procedure
(mutable-seteqvÂ vÂ ...)
Â ->Â (and/cÂ generic-set?Â set-eqv?Â set-mutable?)
Â Â vÂ :Â any/c
procedure
(mutable-seteqÂ vÂ ...)
Â ->Â (and/cÂ generic-set?Â set-eq?Â set-mutable?)
Â Â vÂ :Â any/c
procedure
(weak-setÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-equal?Â set-weak?)
Â Â vÂ :Â any/c
procedure
(weak-setalwÂ vÂ ...)
Â ->Â (and/cÂ generic-set?Â set-equal-always?Â set-weak?)
Â Â vÂ :Â any/c
procedure
(weak-seteqvÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-eqv?Â set-weak?)
Â Â vÂ :Â any/c
procedure
(weak-seteqÂ vÂ ...)Â ->Â (and/cÂ generic-set?Â set-eq?Â set-weak?)
Â Â vÂ :Â any/c
procedure
(list->setÂ lst)Â ->Â (and/cÂ generic-set?Â set-equal?Â set?)
Â Â lstÂ :Â list?
procedure
(list->setalwÂ lst)
Â ->Â (and/cÂ generic-set?Â set-equal-always?Â set?)
Â Â lstÂ :Â list?
procedure
(list->seteqvÂ lst)Â ->Â (and/cÂ generic-set?Â set-eqv?Â set?)
Â Â lstÂ :Â list?
procedure
(list->seteqÂ lst)Â ->Â (and/cÂ generic-set?Â set-eq?Â set?)
Â Â lstÂ :Â list?
procedure
(list->mutable-setÂ lst)
Â ->Â (and/cÂ generic-set?Â set-equal?Â set-mutable?)
Â Â lstÂ :Â list?
procedure
(list->mutable-setalwÂ lst)
Â ->Â (and/cÂ generic-set?Â set-equal-always?Â set-mutable?)
Â Â lstÂ :Â list?
procedure
(list->mutable-seteqvÂ lst)
Â ->Â (and/cÂ generic-set?Â set-eqv?Â set-mutable?)
Â Â lstÂ :Â list?
procedure
(list->mutable-seteqÂ lst)
Â ->Â (and/cÂ generic-set?Â set-eq?Â set-mutable?)
Â Â lstÂ :Â list?
procedure
(list->weak-setÂ lst)
Â ->Â (and/cÂ generic-set?Â set-equal?Â set-weak?)
Â Â lstÂ :Â list?
procedure
(list->weak-setalwÂ lst)
Â ->Â (and/cÂ generic-set?Â set-equal-always?Â set-weak?)
Â Â lstÂ :Â list?
procedure
(list->weak-seteqvÂ lst)
Â ->Â (and/cÂ generic-set?Â set-eqv?Â set-weak?)
Â Â lstÂ :Â list?
procedure
(list->weak-seteqÂ lst)Â ->Â (and/cÂ generic-set?Â set-eq?Â set-weak?)
Â Â lstÂ :Â list?
syntax
(for/setÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/seteqÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/seteqvÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/setalwÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/setÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/seteqÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/seteqvÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/setalwÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/mutable-setÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/mutable-seteqÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/mutable-seteqvÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/mutable-setalwÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/mutable-setÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/mutable-seteqÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/mutable-seteqvÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/mutable-setalwÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/weak-setÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/weak-seteqÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/weak-seteqvÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for/weak-setalwÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/weak-setÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/weak-seteqÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/weak-seteqvÂ (for-clauseÂ ...)Â bodyÂ ...+)
syntax
(for*/weak-setalwÂ (for-clauseÂ ...)Â bodyÂ ...+)
procedure
(in-immutable-setÂ st)Â ->Â sequence?
Â Â stÂ :Â set?
procedure
(in-mutable-setÂ st)Â ->Â sequence?
Â Â stÂ :Â set-mutable?
procedure
(in-weak-setÂ st)Â ->Â sequence?
Â Â stÂ :Â set-weak?
procedure
(generic-set?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(set-implements?Â stÂ symÂ ...)Â ->Â boolean?
Â Â stÂ :Â generic-set?
Â Â symÂ :Â symbol?
procedure
(set-implements/cÂ symÂ ...)Â ->Â flat-contract?
Â Â symÂ :Â symbol?
procedure
(set/cÂ  elem/c                     Â Â  Â Â 
Â      Â [#:cmpÂ cmp                  Â Â  Â Â 
Â      Â  #:kindÂ kind                Â Â  Â Â 
Â      Â  #:lazy?Â lazy?              Â Â  Â Â 
Â      Â  #:equal-key/cÂ equal-key/c])Â ->Â contract?
Â Â elem/cÂ :Â chaperone-contract?
Â Â cmpÂ :Â (or/cÂ 'dont-careÂ 'equalÂ 'equal-alwaysÂ 'eqvÂ 'eq)
Â  Â   Â =Â 'dont-care
Â Â kindÂ :Â (or/cÂ 'dont-careÂ 'immutableÂ 'mutableÂ 'weakÂ 'mutable-or-weak)
Â  Â    Â =Â 'immutable
Â Â lazy?Â :Â any/cÂ =Â (notÂ (andÂ (equal?Â kindÂ 'immutable)
                  Â Â Â Â Â Â Â Â Â Â (flat-contract?Â elem/c)))
Â Â equal-key/cÂ :Â contract?Â =Â any/c
syntax
gen:set
procedure
(set-member?Â stÂ v)Â ->Â boolean?
Â Â stÂ :Â generic-set?
Â Â vÂ :Â any/c
procedure
(set-addÂ stÂ v)Â ->Â generic-set?
Â Â stÂ :Â generic-set?
Â Â vÂ :Â any/c
procedure
(set-add!Â stÂ v)Â ->Â void?
Â Â stÂ :Â generic-set?
Â Â vÂ :Â any/c
procedure
(set-removeÂ stÂ v)Â ->Â generic-set?
Â Â stÂ :Â generic-set?
Â Â vÂ :Â any/c
procedure
(set-remove!Â stÂ v)Â ->Â void?
Â Â stÂ :Â generic-set?
Â Â vÂ :Â any/c
procedure
(set-empty?Â st)Â ->Â boolean?
Â Â stÂ :Â generic-set?
procedure
(set-countÂ st)Â ->Â exact-nonnegative-integer?
Â Â stÂ :Â generic-set?
procedure
(set-firstÂ st)Â ->Â any/c
Â Â stÂ :Â (and/cÂ generic-set?Â (not/cÂ set-empty?))
procedure
(set-restÂ st)Â ->Â generic-set?
Â Â stÂ :Â (and/cÂ generic-set?Â (not/cÂ set-empty?))
procedure
(set->streamÂ st)Â ->Â stream?
Â Â stÂ :Â generic-set?
procedure
(set-copyÂ st)Â ->Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-copy-clearÂ st)Â ->Â (and/cÂ generic-set?Â set-empty?)
Â Â stÂ :Â generic-set?
procedure
(set-clearÂ st)Â ->Â (and/cÂ generic-set?Â set-empty?)
Â Â stÂ :Â generic-set?
procedure
(set-clear!Â st)Â ->Â void?
Â Â stÂ :Â generic-set?
procedure
(set-unionÂ st0Â stÂ ...)Â ->Â generic-set?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-union!Â st0Â stÂ ...)Â ->Â void?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-intersectÂ st0Â stÂ ...)Â ->Â generic-set?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-intersect!Â st0Â stÂ ...)Â ->Â void?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-subtractÂ st0Â stÂ ...)Â ->Â generic-set?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-subtract!Â st0Â stÂ ...)Â ->Â void?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-symmetric-differenceÂ st0Â stÂ ...)Â ->Â generic-set?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set-symmetric-difference!Â st0Â stÂ ...)Â ->Â void?
Â Â st0Â :Â generic-set?
Â Â stÂ :Â generic-set?
procedure
(set=?Â stÂ st2)Â ->Â boolean?
Â Â stÂ :Â generic-set?
Â Â st2Â :Â generic-set?
procedure
(subset?Â stÂ st2)Â ->Â boolean?
Â Â stÂ :Â generic-set?
Â Â st2Â :Â generic-set?
procedure
(proper-subset?Â stÂ st2)Â ->Â boolean?
Â Â stÂ :Â generic-set?
Â Â st2Â :Â generic-set?
procedure
(set->listÂ st)Â ->Â list?
Â Â stÂ :Â generic-set?
procedure
(set-mapÂ stÂ proc)Â ->Â (listofÂ any/c)
Â Â stÂ :Â generic-set?
Â Â procÂ :Â (any/cÂ . -> .Â any/c)
procedure
(set-for-eachÂ stÂ proc)Â ->Â void?
Â Â stÂ :Â generic-set?
Â Â procÂ :Â (any/cÂ . -> .Â any)
procedure
(in-setÂ st)Â ->Â sequence?
Â Â stÂ :Â generic-set?
procedure
(impersonate-hash-setÂ  st             Â 
Â                     Â  inject-proc    Â 
Â                     Â  add-proc       Â 
Â                     Â  shrink-proc    Â 
Â                     Â  extract-proc   Â 
Â                     Â [clear-proc     Â 
Â                     Â  equal-key-proc]Â 
Â                     Â  prop           Â 
Â                     Â  prop-valÂ ...   Â 
Â                     Â  ...)           Â 
Â ->Â (and/cÂ (or/cÂ set-mutable?Â set-weak?)Â impersonator?)
Â Â stÂ :Â (or/cÂ set-mutable?Â set-weak?)
Â Â inject-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â add-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â shrink-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â extract-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â clear-procÂ :Â (or/cÂ #fÂ (->Â set?Â any))Â =Â #f
Â Â equal-key-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))Â =Â #f
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-hash-setÂ  st             Â 
Â                   Â  inject-proc    Â 
Â                   Â  add-proc       Â 
Â                   Â  shrink-proc    Â 
Â                   Â  extract-proc   Â 
Â                   Â [clear-proc     Â 
Â                   Â  equal-key-proc]Â 
Â                   Â  prop           Â 
Â                   Â  prop-valÂ ...   Â 
Â                   Â  ...)           Â 
Â ->Â (and/cÂ (or/cÂ set?Â set-mutable?Â set-weak?)Â chaperone?)
Â Â stÂ :Â (or/cÂ set?Â set-mutable?Â set-weak?)
Â Â inject-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â add-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â shrink-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â extract-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))
Â Â clear-procÂ :Â (or/cÂ #fÂ (->Â set?Â any))Â =Â #f
Â Â equal-key-procÂ :Â (or/cÂ #fÂ (->Â set?Â any/cÂ any/c))Â =Â #f
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
syntax
(define-custom-set-typesÂ name
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â optional-predicate
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â comparison-expr
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â optional-hash-functions)
Â 
     optional-predicateÂ =Â 
                      Â Â |Â #:elem?Â predicate-expr
                      Â Â Â Â Â 
optional-hash-functionsÂ =Â 
                      Â Â |Â hash1-expr
                      Â Â |Â hash1-exprÂ hash2-expr
procedure
(make-custom-set-typesÂ  eql?         Â 
Â                      Â [hash1        Â 
Â                      Â  hash2        Â 
Â                      Â  #:elem?Â elem?Â 
Â                      Â  #:nameÂ name  Â 
Â                      Â  #:forÂ who])  Â 
Â ->Â (any/cÂ . -> .Â boolean?)
    (any/cÂ . -> .Â boolean?)
    (any/cÂ . -> .Â boolean?)
    (any/cÂ . -> .Â boolean?)
    (->*Â []Â [stream?]Â generic-set?)
    (->*Â []Â [stream?]Â generic-set?)
    (->*Â []Â [stream?]Â generic-set?)
Â Â eql?Â :Â (or/cÂ (any/cÂ any/cÂ . -> .Â any/c)
         Â Â Â Â Â Â (any/cÂ any/cÂ (any/cÂ any/cÂ . -> .Â any/c)Â . -> .Â any/c))
Â Â hash1Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â hash2Â :Â (or/cÂ (any/cÂ . -> .Â exact-integer?)
          Â Â Â Â Â Â (any/cÂ (any/cÂ . -> .Â exact-integer?)Â . -> .Â exact-integer?))
Â  Â     Â =Â (constÂ 1)
Â Â elem?Â :Â (any/cÂ . -> .Â boolean?)Â =Â (constÂ #true)
Â Â nameÂ :Â symbol?Â =Â 'custom-set
Â Â whoÂ :Â symbol?Â =Â 'make-custom-set-types
procedure
(procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(applyÂ procÂ vÂ ...Â lstÂ #:<kw>Â kw-argÂ ...)Â ->Â any
Â Â procÂ :Â procedure?
Â Â vÂ :Â any/c
Â Â lstÂ :Â list?
Â Â kw-argÂ :Â any/c
procedure
(composeÂ procÂ ...)Â ->Â procedure?
Â Â procÂ :Â procedure?
procedure
(compose1Â procÂ ...)Â ->Â procedure?
Â Â procÂ :Â procedure?
procedure
(procedure-renameÂ procÂ nameÂ [realm])Â ->Â procedure?
Â Â procÂ :Â procedure?
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?Â =Â 'racket
procedure
(procedure-realmÂ proc)Â ->Â symbol?
Â Â procÂ :Â procedure?
procedure
(procedure->methodÂ proc)Â ->Â procedure?
Â Â procÂ :Â procedure?
procedure
(procedure-closure-contents-eq?Â proc1 Â Â  Â Â 
Â                               Â proc2)Â ->Â boolean?
Â Â proc1Â :Â procedure?
Â Â proc2Â :Â procedure?
procedure
(keyword-applyÂ proc              Â Â  Â Â 
Â              Â kw-lst            Â Â  Â Â 
Â              Â kw-val-lst        Â Â  Â Â 
Â              Â vÂ ...             Â Â  Â Â 
Â              Â lst               Â Â  Â Â 
Â              Â #:<kw>Â kw-argÂ ...)Â ->Â any
Â Â procÂ :Â procedure?
Â Â kw-lstÂ :Â (listofÂ keyword?)
Â Â kw-val-lstÂ :Â list?
Â Â vÂ :Â any/c
Â Â lstÂ :Â list?
Â Â kw-argÂ :Â any/c
procedure
(procedure-arityÂ proc)Â ->Â normalized-arity?
Â Â procÂ :Â procedure?
procedure
(procedure-arity?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(procedure-arity-maskÂ proc)Â ->Â exact-integer?
Â Â procÂ :Â procedure?
procedure
(procedure-arity-includes?Â procÂ kÂ [kws-ok?])Â ->Â boolean?
Â Â procÂ :Â procedure?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â kws-ok?Â :Â any/cÂ =Â #f
procedure
(procedure-reduce-arityÂ  proc   Â Â  Â Â 
Â                       Â  arity  Â Â  Â Â 
Â                       Â [name   Â Â  Â Â 
Â                       Â  realm])Â ->Â procedure?
Â Â procÂ :Â procedure?
Â Â arityÂ :Â procedure-arity?
Â Â nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
procedure
(procedure-reduce-arity-maskÂ  proc   Â Â  Â Â 
Â                            Â  mask   Â Â  Â Â 
Â                            Â [name   Â Â  Â Â 
Â                            Â  realm])Â ->Â procedure?
Â Â procÂ :Â procedure?
Â Â maskÂ :Â exact-integer?
Â Â nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
procedure
(procedure-keywordsÂ proc)Â ->Â (listofÂ keyword?)
                             (or/cÂ (listofÂ keyword?)Â #f)
Â Â procÂ :Â procedure?
procedure
(procedure-result-arityÂ proc)Â ->Â (or/cÂ #fÂ procedure-arity?)
Â Â procÂ :Â procedure?
procedure
(make-keyword-procedureÂ procÂ [plain-proc])Â ->Â procedure?
Â Â procÂ :Â (((listofÂ keyword?)Â list?)Â ()Â #:restÂ list?Â . ->* .Â any)
Â Â plain-procÂ :Â procedure?
Â  Â          Â =Â (lambdaÂ argsÂ (applyÂ procÂ nullÂ nullÂ args))
procedure
(procedure-reduce-keyword-arityÂ  proc        Â Â  Â Â 
Â                               Â  arity       Â Â  Â Â 
Â                               Â  required-kwsÂ Â  Â Â 
Â                               Â  allowed-kws Â Â  Â Â 
Â                               Â [name        Â Â  Â Â 
Â                               Â  realm])     Â ->Â procedure?
Â Â procÂ :Â procedure?
Â Â arityÂ :Â procedure-arity?
Â Â required-kwsÂ :Â (listofÂ keyword?)
Â Â allowed-kwsÂ :Â (or/cÂ (listofÂ keyword?)
                Â Â Â Â Â Â #f)
Â Â nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
procedure
(procedure-reduce-keyword-arity-maskÂ  proc        Â Â  Â Â 
Â                                    Â  mask        Â Â  Â Â 
Â                                    Â  required-kwsÂ Â  Â Â 
Â                                    Â  allowed-kws Â Â  Â Â 
Â                                    Â [name        Â Â  Â Â 
Â                                    Â  realm])     Â ->Â procedure?
Â Â procÂ :Â procedure?
Â Â maskÂ :Â exact-integer?
Â Â required-kwsÂ :Â (listofÂ keyword?)
Â Â allowed-kwsÂ :Â (or/cÂ (listofÂ keyword?)
                Â Â Â Â Â Â Â #f)
Â Â nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
struct
(structÂ arity-at-leastÂ (value)
Â Â Â Â #:extra-constructor-nameÂ make-arity-at-least)
Â Â valueÂ :Â exact-nonnegative-integer?
value
prop:procedureÂ :Â struct-type-property?
procedure
(procedure-struct-type?Â type)Â ->Â boolean?
Â Â typeÂ :Â struct-type?
procedure
(procedure-extract-targetÂ proc)Â ->Â (or/cÂ #fÂ procedure?)
Â Â procÂ :Â procedure?
value
prop:arity-stringÂ :Â struct-type-property?
value
prop:checked-procedureÂ :Â struct-type-property?
procedure
(checked-procedure-check-and-extractÂ typeÂ Â  Â Â 
Â                                    Â v   Â Â  Â Â 
Â                                    Â procÂ Â  Â Â 
Â                                    Â v1  Â Â  Â Â 
Â                                    Â v2) Â ->Â any/c
Â Â typeÂ :Â struct-type?
Â Â vÂ :Â any/c
Â Â procÂ :Â (any/cÂ any/cÂ any/cÂ . -> .Â any/c)
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(procedure-specializeÂ proc)Â ->Â procedure?
Â Â procÂ :Â procedure?
procedure
(primitive?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(primitive-closure?Â v)Â ->Â boolean
Â Â vÂ :Â any/c
procedure
(primitive-result-arityÂ prim)Â ->Â procedure-arity?
Â Â primÂ :Â primitive?
procedure
(identityÂ v)Â ->Â any/c
Â Â vÂ :Â any/c
procedure
(constÂ v)Â ->Â procedure?
Â Â vÂ :Â any/c
procedure
(const*Â vÂ ...)Â ->Â procedure?
Â Â vÂ :Â any/c
syntax
(thunkÂ Â bodyÂ ...+)
syntax
(thunk*Â bodyÂ ...+)
procedure
(negateÂ proc)Â ->Â procedure?
Â Â procÂ :Â procedure?
procedure
((conjoinÂ fÂ ...)Â xÂ ...)Â ->Â any
Â Â fÂ :Â procedure?
Â Â xÂ :Â any/c
procedure
((disjoinÂ fÂ ...)Â xÂ ...)Â ->Â any
Â Â fÂ :Â procedure?
Â Â xÂ :Â any/c
procedure
(curryÂ proc)Â ->Â procedure?
Â Â procÂ :Â procedure?
(curryÂ procÂ vÂ ...+)Â ->Â any
Â Â procÂ :Â procedure?
Â Â vÂ :Â any/c
procedure
(curryrÂ proc)Â ->Â procedure?
Â Â procÂ :Â procedure?
(curryrÂ procÂ vÂ ...+)Â ->Â any
Â Â procÂ :Â procedure?
Â Â vÂ :Â any/c
procedure
(normalized-arity?Â arity)Â ->Â boolean?
Â Â arityÂ :Â any/c
procedure
(normalize-arityÂ arity)
Â ->Â (and/cÂ normalized-arity?Â (lambdaÂ (x)Â (arity=?Â xÂ arity)))
Â Â arityÂ :Â procedure-arity?
procedure
(arity=?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â procedure-arity?
Â Â bÂ :Â procedure-arity?
procedure
(arity-includes?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â procedure-arity?
Â Â bÂ :Â procedure-arity?
procedure
(void?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(voidÂ vÂ ...)Â ->Â void?
Â Â vÂ :Â any/c
value
undefinedÂ :Â any/c
syntax
(structÂ idÂ maybe-superÂ (fieldÂ ...)
Â Â Â Â Â Â Â Â struct-optionÂ ...)
Â 
  maybe-superÂ =Â 
            Â Â |Â super-id
            Â Â Â Â Â 
        fieldÂ =Â field-id
            Â Â |Â [field-idÂ field-optionÂ ...]
            Â Â Â Â Â 
struct-optionÂ =Â #:mutable
            Â Â |Â #:superÂ super-expr
            Â Â |Â #:inspectorÂ inspector-expr
            Â Â |Â #:auto-valueÂ auto-expr
            Â Â |Â #:guardÂ guard-expr
            Â Â |Â #:propertyÂ prop-exprÂ val-expr
            Â Â |Â #:transparent
            Â Â |Â #:prefab
            Â Â |Â #:sealed
            Â Â |Â #:authentic
            Â Â |Â #:nameÂ name-id
            Â Â |Â #:extra-nameÂ name-id
            Â Â |Â #:constructor-nameÂ constructor-id
            Â Â |Â #:extra-constructor-nameÂ constructor-id
            Â Â |Â #:reflection-nameÂ symbol-expr
            Â Â |Â #:methodsÂ gen:name-idÂ method-defs
            Â Â |Â #:omit-define-syntaxes
            Â Â |Â #:omit-define-values
            Â Â Â Â Â 
 field-optionÂ =Â #:mutable
            Â Â |Â #:auto
            Â Â Â Â Â 
  method-defsÂ =Â (definitionÂ ...)
syntax
(struct-field-indexÂ field-id)
syntax
(define-structÂ id-maybe-superÂ (fieldÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
Â 
id-maybe-superÂ =Â id
             Â Â |Â (idÂ super-id)
syntax
(struct/derivedÂ (idÂ . rest-form)
idÂ (fieldÂ ...)Â struct-optionÂ ...)
(struct/derivedÂ (idÂ . rest-form)
idÂ super-idÂ (fieldÂ ...)Â struct-optionÂ ...)
syntax
(define-struct/derivedÂ (idÂ . rest-form)
Â Â id-maybe-superÂ (fieldÂ ...)Â struct-optionÂ ...)
procedure
(make-struct-typeÂ  name              Â 
Â                 Â  super-type        Â 
Â                 Â  init-field-cnt    Â 
Â                 Â  auto-field-cnt    Â 
Â                 Â [auto-v            Â 
Â                 Â  props             Â 
Â                 Â  inspector         Â 
Â                 Â  proc-spec         Â 
Â                 Â  immutables        Â 
Â                 Â  guard             Â 
Â                 Â  constructor-name])Â 
Â ->Â struct-type?
    struct-constructor-procedure?
    struct-predicate-procedure?
    struct-accessor-procedure?
    struct-mutator-procedure?
Â Â nameÂ :Â symbol?
Â Â super-typeÂ :Â (or/cÂ struct-type?Â #f)
Â Â init-field-cntÂ :Â exact-nonnegative-integer?
Â Â auto-field-cntÂ :Â exact-nonnegative-integer?
Â Â auto-vÂ :Â any/cÂ =Â #f
Â Â propsÂ :Â (listofÂ (cons/cÂ struct-type-property?Â =Â null
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â any/c))
Â Â inspectorÂ :Â (or/cÂ inspector?Â #fÂ 'prefab)Â =Â (current-inspector)
Â Â proc-specÂ :Â (or/cÂ procedure?                Â =Â #f
              Â Â Â Â Â Â exact-nonnegative-integer?
              Â Â Â Â Â Â #f)
Â Â immutablesÂ :Â (listofÂ exact-nonnegative-integer?)Â =Â null
Â Â guardÂ :Â (or/cÂ procedure?Â #f)Â =Â #f
Â Â constructor-nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
procedure
(make-struct-field-accessorÂ  accessor-proc   Â Â  Â Â 
Â                           Â  field-pos       Â Â  Â Â 
Â                           Â [field/proc-name Â Â  Â Â 
Â                           Â  arg-contract-strÂ Â  Â Â 
Â                           Â  realm])         Â ->Â procedure?
Â Â accessor-procÂ :Â struct-accessor-procedure?
Â Â field-posÂ :Â exact-nonnegative-integer?
Â Â field/proc-nameÂ :Â (or/cÂ symbol?Â #f)
Â  Â               Â =Â (symbol->stringÂ (formatÂ "field~a"Â field-pos))
Â Â arg-contract-strÂ :Â (or/cÂ string?Â symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
procedure
(make-struct-field-mutatorÂ  mutator-proc    Â Â  Â Â 
Â                          Â  field-pos       Â Â  Â Â 
Â                          Â [field/proc-name Â Â  Â Â 
Â                          Â  arg-contract-strÂ Â  Â Â 
Â                          Â  realm])         Â ->Â procedure?
Â Â mutator-procÂ :Â struct-mutator-procedure?
Â Â field-posÂ :Â exact-nonnegative-integer?
Â Â field/proc-nameÂ :Â (or/cÂ symbol?Â #f)
Â  Â               Â =Â (symbol->stringÂ (formatÂ "field~a"Â field-pos))
Â Â arg-contract-strÂ :Â (or/cÂ string?Â symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
value
prop:sealedÂ :Â struct-type-property?
procedure
(make-struct-type-propertyÂ  name            Â 
Â                          Â [guard           Â 
Â                          Â  supers          Â 
Â                          Â  can-impersonate?Â 
Â                          Â  accessor-name   Â 
Â                          Â  contract-str    Â 
Â                          Â  realm])         Â 
Â ->Â struct-type-property?
    (any/cÂ . -> .Â boolean?)
    procedure?
Â Â nameÂ :Â symbol?
Â Â guardÂ :Â (or/cÂ procedure?Â #fÂ 'can-impersonate)Â =Â #f
Â Â supersÂ :Â (listofÂ (cons/cÂ struct-type-property? Â =Â null
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (any/cÂ . -> .Â any/c)))
Â Â can-impersonate?Â :Â any/cÂ =Â #f
Â Â accessor-nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
Â Â contract-strÂ :Â (or/cÂ string?Â symbol?Â #f)Â =Â #f
Â Â realmÂ :Â symbol?Â =Â 'racket
procedure
(struct-type-property?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-type-property-accessor-procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-type-property-predicate-procedure?Â  v     Â Â  Â Â 
Â                                          Â [prop])Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â propÂ :Â (or/cÂ struct-type-property?Â #f)Â =Â #f
syntax
(define-genericsÂ id
Â Â generics-optÂ ...
Â Â [method-idÂ . kw-formals*]Â ...
Â Â generics-optÂ ...)
Â 
generics-optÂ =Â #:defaultsÂ ([default-pred?Â default-implÂ ...]Â ...)
           Â Â |Â #:fast-defaultsÂ ([fast-pred?Â fast-implÂ ...]Â ...)
           Â Â |Â #:fallbacksÂ [fallback-implÂ ...]
           Â Â |Â #:defined-predicateÂ defined-pred-id
           Â Â |Â #:defined-tableÂ defined-table-id
           Â Â |Â #:derive-propertyÂ prop-exprÂ prop-value-expr
           Â Â |Â #:requiresÂ [required-method-idÂ ...]
           Â Â Â Â Â 
 kw-formals*Â =Â (arg*Â ...)
           Â Â |Â (arg*Â ...+Â . rest-id)
           Â Â |Â rest-id
           Â Â Â Â Â 
        arg*Â =Â arg-id
           Â Â |Â [arg-id]
           Â Â |Â keywordÂ arg-id
           Â Â |Â keywordÂ [arg-id]
procedure
(raise-support-errorÂ nameÂ v)Â ->Â none/c
Â Â nameÂ :Â symbol?
Â Â vÂ :Â any/c
struct
(structÂ exn:fail:supportÂ exn:failÂ ()
Â Â Â Â #:transparent)
syntax
(define/genericÂ local-idÂ method-id)
syntax
(generic-instance/cÂ gen-idÂ [method-idÂ method-ctc]Â ...)
Â 
Â Â method-ctcÂ :Â contract?
syntax
(impersonate-genericsÂ gen-idÂ val-expr
Â Â [method-idÂ method-proc-expr]Â ...
Â Â maybe-properties)
Â 
maybe-propertiesÂ =Â 
               Â Â |Â #:propertiesÂ props-expr
Â 
Â Â method-proc-exprÂ :Â (any/cÂ . -> .Â any/c)
Â Â props-exprÂ :Â (list/cÂ impersonator-property?Â any/cÂ ...Â ...)
syntax
(chaperone-genericsÂ gen-idÂ val-expr
Â Â [method-idÂ method-proc-expr]Â ...
Â Â maybe-properties)
syntax
(redirect-genericsÂ modeÂ gen-idÂ val-expr
Â Â Â [method-idÂ method-proc-expr]Â ...
Â Â Â maybe-properties)
syntax
(make-struct-type-property/generic
Â Â name-expr
Â Â maybe-guard-expr
Â Â maybe-supers-expr
Â Â maybe-can-impersonate?-expr
Â Â property-option
Â Â ...)
Â 
           maybe-guard-exprÂ =Â 
                          Â Â |Â guard-expr
                          Â Â Â Â Â 
          maybe-supers-exprÂ =Â 
                          Â Â |Â supers-expr
                          Â Â Â Â Â 
maybe-can-impersonate?-exprÂ =Â 
                          Â Â |Â can-impersonate?-expr
                          Â Â Â Â Â 
            property-optionÂ =Â #:propertyÂ prop-exprÂ val-expr
                          Â Â |Â #:methodsÂ gen:name-idÂ method-defs
                          Â Â Â Â Â 
                method-defsÂ =Â (definitionÂ ...)
Â 
Â Â name-exprÂ :Â symbol?
Â Â guard-exprÂ :Â (or/cÂ procedure?Â #fÂ 'can-impersonate)
Â Â supers-exprÂ :Â (listofÂ (cons/cÂ struct-type-property?Â (->Â any/cÂ any/c)))
Â Â can-impersonate?-exprÂ :Â any/c
Â Â prop-exprÂ :Â struct-type-property?
Â Â val-exprÂ :Â any/c
syntax
(make-generic-struct-type-property
Â Â Â gen:name-id
Â Â Â method-def
Â Â Â ...)
syntax
(struct-copyÂ idÂ struct-exprÂ fld-idÂ ...)
Â 
fld-idÂ =Â [field-idÂ expr]
     Â Â |Â [field-idÂ #:parentÂ parent-idÂ expr]
procedure
(struct->vectorÂ vÂ [opaque-v])Â ->Â vector?
Â Â vÂ :Â any/c
Â Â opaque-vÂ :Â any/cÂ =Â '...
procedure
(struct?Â v)Â ->Â any
Â Â vÂ :Â any/c
procedure
(struct-type?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-constructor-procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-predicate-procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-accessor-procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-mutator-procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(prefab-struct-keyÂ v)Â ->Â (or/cÂ #fÂ symbol?Â list?)
Â Â vÂ :Â any/c
procedure
(make-prefab-structÂ keyÂ vÂ ...)Â ->Â struct?
Â Â keyÂ :Â prefab-key?
Â Â vÂ :Â any/c
procedure
(prefab-struct-type-key+field-countÂ type)
Â ->Â (or/cÂ #fÂ (cons/cÂ prefab-key?Â (integer-inÂ 0Â 32768)))
Â Â typeÂ :Â struct-type?
procedure
(prefab-key->struct-typeÂ keyÂ field-count)Â ->Â struct-type?
Â Â keyÂ :Â prefab-key?
Â Â field-countÂ :Â (integer-inÂ 0Â 32768)
procedure
(prefab-key?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-constructor-style-printerÂ get-constructorÂ 
Â                               Â get-contents)  Â 
Â ->Â (->Â any/cÂ output-port?Â (or/cÂ #tÂ #fÂ 0Â 1)Â void?)
Â Â get-constructorÂ :Â (->Â any/cÂ (or/cÂ symbol?Â string?))
Â Â get-contentsÂ :Â (->Â any/cÂ sequence?)
procedure
(struct->listÂ vÂ [#:on-opaqueÂ on-opaque])Â ->Â (or/cÂ list?Â #f)
Â Â vÂ :Â any/c
Â Â on-opaqueÂ :Â (or/cÂ 'errorÂ 'return-falseÂ 'skip)Â =Â 'error
procedure
(struct-info?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(checked-struct-info?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-struct-infoÂ thunk)Â ->Â struct-info?
Â Â thunkÂ :Â (->Â (and/cÂ struct-info?Â list?))
procedure
(extract-struct-infoÂ v)Â ->Â (and/cÂ struct-info?Â list?)
Â Â vÂ :Â struct-info?
value
struct:struct-infoÂ :Â struct-type?
value
prop:struct-infoÂ :Â struct-type-property?
value
prop:struct-auto-infoÂ :Â struct-type-property?
procedure
(struct-auto-info?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-auto-info-listsÂ sai)
Â ->Â (list/cÂ (listofÂ identifier?)Â (listofÂ identifier?))
Â Â saiÂ :Â struct-auto-info?
value
prop:struct-field-infoÂ :Â struct-type-property?
procedure
(struct-field-info?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-field-info-listÂ sfi)Â ->Â (listofÂ symbol?)
Â Â sfiÂ :Â struct-field-info?
syntax
(interfaceÂ (super-interface-exprÂ ...)Â name-clauseÂ ...)
Â 
name-clauseÂ =Â id
          Â Â |Â (idÂ contract-expr)
syntax
(interface*Â (super-interface-exprÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â ([property-exprÂ val-expr]Â ...)
Â Â name-clauseÂ ...)
Â 
name-clauseÂ =Â id
          Â Â |Â (idÂ contract-expr)
value
object%Â :Â class?
syntax
(class*Â superclass-exprÂ (interface-exprÂ ...)
Â Â class-clause
Â Â ...)
Â 
     class-clauseÂ =Â (inspectÂ inspector-expr)
                Â Â |Â (initÂ init-declÂ ...)
                Â Â |Â (init-fieldÂ init-declÂ ...)
                Â Â |Â (fieldÂ field-declÂ ...)
                Â Â |Â (inherit-fieldÂ maybe-renamedÂ ...)
                Â Â |Â (init-restÂ id)
                Â Â |Â (init-rest)
                Â Â |Â (publicÂ maybe-renamedÂ ...)
                Â Â |Â (pubmentÂ maybe-renamedÂ ...)
                Â Â |Â (public-finalÂ maybe-renamedÂ ...)
                Â Â |Â (overrideÂ maybe-renamedÂ ...)
                Â Â |Â (overmentÂ maybe-renamedÂ ...)
                Â Â |Â (override-finalÂ maybe-renamedÂ ...)
                Â Â |Â (augmentÂ maybe-renamedÂ ...)
                Â Â |Â (augrideÂ maybe-renamedÂ ...)
                Â Â |Â (augment-finalÂ maybe-renamedÂ ...)
                Â Â |Â (privateÂ idÂ ...)
                Â Â |Â (abstractÂ idÂ ...)
                Â Â |Â (inheritÂ maybe-renamedÂ ...)
                Â Â |Â (inherit/superÂ maybe-renamedÂ ...)
                Â Â |Â (inherit/innerÂ maybe-renamedÂ ...)
                Â Â |Â (rename-superÂ renamedÂ ...)
                Â Â |Â (rename-innerÂ renamedÂ ...)
                Â Â |Â method-definition
                Â Â |Â definition
                Â Â |Â expr
                Â Â |Â (beginÂ class-clauseÂ ...)
                Â Â Â Â Â 
        init-declÂ =Â id
                Â Â |Â (renamed)
                Â Â |Â (maybe-renamedÂ default-value-expr)
                Â Â Â Â Â 
       field-declÂ =Â (maybe-renamedÂ default-value-expr)
                Â Â Â Â Â 
    maybe-renamedÂ =Â id
                Â Â |Â renamed
                Â Â Â Â Â 
          renamedÂ =Â (internal-idÂ external-id)
                Â Â Â Â Â 
method-definitionÂ =Â (define-valuesÂ (id)Â method-procedure)
                Â Â Â Â Â 
 method-procedureÂ =Â (lambdaÂ kw-formalsÂ exprÂ ...+)
                Â Â |Â (case-lambdaÂ (formalsÂ exprÂ ...+)Â ...)
                Â Â |Â (#%plain-lambdaÂ formalsÂ exprÂ ...+)
                Â Â |Â (let-valuesÂ ([(id)Â method-procedure]Â ...)
                    Â Â method-procedure)
                Â Â |Â (letrec-valuesÂ ([(id)Â method-procedure]Â ...)
                    Â Â method-procedure)
                Â Â |Â (let-valuesÂ ([(id)Â method-procedure]Â ...+)
                    Â Â id)
                Â Â |Â (letrec-valuesÂ ([(id)Â method-procedure]Â ...+)
                    Â Â id)
                Â Â |Â (chaperone-procedureÂ method-procedureÂ wrapper-proc
                    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â other-arg-exprÂ ...)
syntax
(classÂ superclass-exprÂ class-clauseÂ ...)
syntax
this
syntax
this%
syntax
(inspectÂ inspector-expr)
syntax
(initÂ init-declÂ ...)
syntax
(init-fieldÂ init-declÂ ...)
syntax
(fieldÂ field-declÂ ...)
syntax
(inherit-fieldÂ maybe-renamedÂ ...)
syntax
(init-restÂ id)
(init-rest)
syntax
(publicÂ maybe-renamedÂ ...)
syntax
(pubmentÂ maybe-renamedÂ ...)
syntax
(public-finalÂ maybe-renamedÂ ...)
syntax
(overrideÂ maybe-renamedÂ ...)
syntax
(overmentÂ maybe-renamedÂ ...)
syntax
(override-finalÂ maybe-renamedÂ ...)
syntax
(augmentÂ maybe-renamedÂ ...)
syntax
(augrideÂ maybe-renamedÂ ...)
syntax
(augment-finalÂ maybe-renamedÂ ...)
syntax
(privateÂ idÂ ...)
syntax
(abstractÂ idÂ ...)
syntax
(inheritÂ maybe-renamedÂ ...)
syntax
(inherit/superÂ maybe-renamedÂ ...)
syntax
(inherit/innerÂ maybe-renamedÂ ...)
syntax
(rename-superÂ renamedÂ ...)
syntax
(rename-innerÂ renamedÂ ...)
syntax
(public*Â (idÂ expr)Â ...)
syntax
(pubment*Â (idÂ expr)Â ...)
syntax
(public-final*Â (idÂ expr)Â ...)
syntax
(override*Â (idÂ expr)Â ...)
syntax
(overment*Â (idÂ expr)Â ...)
syntax
(override-final*Â (idÂ expr)Â ...)
syntax
(augment*Â (idÂ expr)Â ...)
syntax
(augride*Â (idÂ expr)Â ...)
syntax
(augment-final*Â (idÂ expr)Â ...)
syntax
(private*Â (idÂ expr)Â ...)
syntax
(define/publicÂ idÂ expr)
(define/publicÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/pubmentÂ idÂ expr)
(define/pubmentÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/public-finalÂ idÂ expr)
(define/public-finalÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/overrideÂ idÂ expr)
(define/overrideÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/overmentÂ idÂ expr)
(define/overmentÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/override-finalÂ idÂ expr)
(define/override-finalÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/augmentÂ idÂ expr)
(define/augmentÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/augrideÂ idÂ expr)
(define/augrideÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/augment-finalÂ idÂ expr)
(define/augment-finalÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(define/privateÂ idÂ expr)
(define/privateÂ (idÂ . formals)Â bodyÂ ...+)
syntax
(class/derivedÂ original-datum
Â Â (name-idÂ super-exprÂ (interface-exprÂ ...)Â deserialize-id-expr)
Â Â class-clause
Â Â ...)
syntax
(superÂ idÂ argÂ ...)
(superÂ idÂ argÂ ...Â . arg-list-expr)
syntax
(innerÂ default-exprÂ idÂ argÂ ...)
(innerÂ default-exprÂ idÂ argÂ ...Â . arg-list-expr)
syntax
(define-local-member-nameÂ idÂ ...)
syntax
(define-member-nameÂ idÂ key-expr)
syntax
(member-name-keyÂ identifier)
procedure
(generate-member-key)Â ->Â member-name-key?
procedure
(member-name-key?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(member-name-key=?Â a-keyÂ b-key)Â ->Â boolean?
Â Â a-keyÂ :Â member-name-key?
Â Â b-keyÂ :Â member-name-key?
procedure
(member-name-key-hash-codeÂ a-key)Â ->Â integer?
Â Â a-keyÂ :Â member-name-key?
procedure
(make-objectÂ classÂ init-vÂ ...)Â ->Â object?
Â Â classÂ :Â class?
Â Â init-vÂ :Â any/c
syntax
(newÂ class-exprÂ (idÂ by-name-expr)Â ...)
syntax
(instantiateÂ class-exprÂ (by-pos-exprÂ ...)Â (idÂ by-name-expr)Â ...)
syntax
super-make-object
syntax
(super-instantiateÂ (by-pos-exprÂ ...)Â (idÂ by-exprÂ ...)Â ...)
syntax
(super-newÂ (idÂ by-name-exprÂ ...)Â ...)

(method-idÂ argÂ ...Â . arg-list-expr)
syntax
(sendÂ obj-exprÂ method-idÂ argÂ ...)
(sendÂ obj-exprÂ method-idÂ argÂ ...Â . arg-list-expr)
syntax
(send/applyÂ obj-exprÂ method-idÂ argÂ ...Â arg-list-expr)
syntax
(send/keyword-applyÂ obj-exprÂ method-id
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â keyword-list-exprÂ value-list-expr
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â argÂ ...Â arg-list-expr)
procedure
(dynamic-sendÂ obj               Â Â  Â Â 
Â             Â method-name       Â Â  Â Â 
Â             Â vÂ ...             Â Â  Â Â 
Â             Â #:<kw>Â kw-argÂ ...)Â ->Â any
Â Â objÂ :Â object?
Â Â method-nameÂ :Â symbol?
Â Â vÂ :Â any/c
Â Â kw-argÂ :Â any/c
syntax
(send*Â obj-exprÂ msgÂ ...+)
Â 
msgÂ =Â (method-idÂ argÂ ...)
  Â Â |Â (method-idÂ argÂ ...Â . arg-list-expr)
syntax
(send+Â obj-exprÂ msgÂ ...)
Â 
msgÂ =Â (method-idÂ argÂ ...)
  Â Â |Â (method-idÂ argÂ ...Â . arg-list-expr)
syntax
(with-methodÂ ([idÂ (obj-exprÂ method-id)]Â ...)
Â Â bodyÂ ...+)
syntax
(get-fieldÂ idÂ obj-expr)
procedure
(dynamic-get-fieldÂ field-nameÂ obj)Â ->Â any/c
Â Â field-nameÂ :Â symbol?
Â Â objÂ :Â object?
syntax
(set-field!Â idÂ obj-exprÂ expr)
procedure
(dynamic-set-field!Â field-nameÂ objÂ v)Â ->Â void?
Â Â field-nameÂ :Â symbol?
Â Â objÂ :Â object?
Â Â vÂ :Â any/c
syntax
(field-bound?Â idÂ obj-expr)
syntax
(class-field-accessorÂ class-exprÂ field-id)
syntax
(class-field-mutatorÂ class-exprÂ field-id)
syntax
(genericÂ class-or-interface-exprÂ id)
syntax
(send-genericÂ obj-exprÂ generic-exprÂ argÂ ...)
(send-genericÂ obj-exprÂ generic-exprÂ argÂ ...Â . arg-list-expr)
procedure
(make-genericÂ typeÂ method-name)Â ->Â generic?
Â Â typeÂ :Â (or/cÂ class?Â interface?)
Â Â method-nameÂ :Â symbol?
syntax
(mixinÂ (interface-exprÂ ...)Â (interface-exprÂ ...)
Â Â class-clauseÂ ...)
syntax
(traitÂ trait-clauseÂ ...)
Â 
trait-clauseÂ =Â (publicÂ maybe-renamedÂ ...)
           Â Â |Â (pubmentÂ maybe-renamedÂ ...)
           Â Â |Â (public-finalÂ maybe-renamedÂ ...)
           Â Â |Â (overrideÂ maybe-renamedÂ ...)
           Â Â |Â (overmentÂ maybe-renamedÂ ...)
           Â Â |Â (override-finalÂ maybe-renamedÂ ...)
           Â Â |Â (augmentÂ maybe-renamedÂ ...)
           Â Â |Â (augrideÂ maybe-renamedÂ ...)
           Â Â |Â (augment-finalÂ maybe-renamedÂ ...)
           Â Â |Â (inheritÂ maybe-renamedÂ ...)
           Â Â |Â (inherit/superÂ maybe-renamedÂ ...)
           Â Â |Â (inherit/innerÂ maybe-renamedÂ ...)
           Â Â |Â method-definition
           Â Â |Â (fieldÂ field-declarationÂ ...)
           Â Â |Â (inherit-fieldÂ maybe-renamedÂ ...)
procedure
(trait?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(trait->mixinÂ tr)Â ->Â (class?Â . -> .Â class?)
Â Â trÂ :Â trait?
procedure
(trait-sumÂ trÂ ...+)Â ->Â trait?
Â Â trÂ :Â trait?
syntax
(trait-excludeÂ trait-exprÂ id)
syntax
(trait-exclude-fieldÂ trait-exprÂ id)
syntax
(trait-aliasÂ trait-exprÂ idÂ new-id)
syntax
(trait-renameÂ trait-exprÂ idÂ new-id)
syntax
(trait-rename-fieldÂ trait-exprÂ idÂ new-id)
syntax
(class/cÂ maybe-opaqueÂ member-specÂ ...)
Â 
maybe-opaqueÂ =Â 
           Â Â |Â #:opaque
           Â Â |Â #:opaqueÂ #:ignore-local-member-names
           Â Â Â Â Â 
 member-specÂ =Â method-spec
           Â Â |Â (fieldÂ field-specÂ ...)
           Â Â |Â (initÂ field-specÂ ...)
           Â Â |Â (init-fieldÂ field-specÂ ...)
           Â Â |Â (inheritÂ method-specÂ ...)
           Â Â |Â (inherit-fieldÂ field-specÂ ...)
           Â Â |Â (superÂ method-specÂ ...)
           Â Â |Â (innerÂ method-specÂ ...)
           Â Â |Â (overrideÂ method-specÂ ...)
           Â Â |Â (augmentÂ method-specÂ ...)
           Â Â |Â (augrideÂ method-specÂ ...)
           Â Â |Â (absentÂ absent-specÂ ...)
           Â Â Â Â Â 
 method-specÂ =Â method-id
           Â Â |Â (method-idÂ method-contract-expr)
           Â Â Â Â Â 
  field-specÂ =Â field-id
           Â Â |Â (field-idÂ contract-expr)
           Â Â Â Â Â 
 absent-specÂ =Â method-id
           Â Â |Â (fieldÂ field-idÂ ...)
syntax
(absentÂ absent-specÂ ...)
syntax
(->mÂ domÂ ...Â range)
syntax
(->*mÂ (mandatory-domÂ ...)Â (optional-domÂ ...)Â restÂ range)
syntax
(case->mÂ (->Â domÂ ...Â restÂ range)Â ...)
syntax
(->dmÂ (mandatory-dependent-domÂ ...)
Â Â Â Â Â Â (optional-dependent-domÂ ...)
Â Â Â Â Â Â dependent-rest
Â Â Â Â Â Â pre-cond
Â Â Â Â Â Â dep-range)
syntax
(object/cÂ member-specÂ ...)
Â 
member-specÂ =Â method-spec
          Â Â |Â (fieldÂ field-specÂ ...)
          Â Â Â Â Â 
method-specÂ =Â method-id
          Â Â |Â (method-idÂ method-contract)
          Â Â Â Â Â 
 field-specÂ =Â field-id
          Â Â |Â (field-idÂ contract-expr)
procedure
(instanceof/cÂ class-contract)Â ->Â contract?
Â Â class-contractÂ :Â contract?
procedure
(dynamic-object/cÂ method-names    Â Â  Â Â 
Â                 Â method-contractsÂ Â  Â Â 
Â                 Â field-names     Â Â  Â Â 
Â                 Â field-contracts)Â ->Â contract?
Â Â method-namesÂ :Â (listofÂ symbol?)
Â Â method-contractsÂ :Â (listofÂ contract?)
Â Â field-namesÂ :Â (listofÂ symbol?)
Â Â field-contractsÂ :Â (listofÂ contract?)
syntax
(object-contractÂ member-specÂ ...)
Â 
            member-specÂ =Â (method-idÂ method-contract)
                      Â Â |Â (fieldÂ field-idÂ contract-expr)
                      Â Â Â Â Â 
        method-contractÂ =Â (->Â domÂ ...Â range)
                      Â Â |Â (->*Â (mandatory-domÂ ...)
                          Â Â Â Â Â (optional-domÂ ...)
                          Â Â Â Â Â rest
                          Â Â Â Â Â range)
                      Â Â |Â (->dÂ (mandatory-dependent-domÂ ...)
                          Â Â Â Â Â (optional-dependent-domÂ ...)
                          Â Â Â Â Â dependent-rest
                          Â Â Â Â Â pre-cond
                          Â Â Â Â Â dep-range)
                      Â Â Â Â Â 
                    domÂ =Â dom-expr
                      Â Â |Â keywordÂ dom-expr
                      Â Â Â Â Â 
                  rangeÂ =Â range-expr
                      Â Â |Â (valuesÂ range-exprÂ ...)
                      Â Â |Â any
                      Â Â Â Â Â 
          mandatory-domÂ =Â dom-expr
                      Â Â |Â keywordÂ dom-expr
                      Â Â Â Â Â 
           optional-domÂ =Â dom-expr
                      Â Â |Â keywordÂ dom-expr
                      Â Â Â Â Â 
                   restÂ =Â 
                      Â Â |Â #:restÂ rest-expr
                      Â Â Â Â Â 
mandatory-dependent-domÂ =Â [idÂ dom-expr]
                      Â Â |Â keywordÂ [idÂ dom-expr]
                      Â Â Â Â Â 
 optional-dependent-domÂ =Â [idÂ dom-expr]
                      Â Â |Â keywordÂ [idÂ dom-expr]
                      Â Â Â Â Â 
         dependent-restÂ =Â 
                      Â Â |Â #:restÂ idÂ rest-expr
                      Â Â Â Â Â 
               pre-condÂ =Â 
                      Â Â |Â #:pre-condÂ boolean-expr
                      Â Â Â Â Â 
              dep-rangeÂ =Â any
                      Â Â |Â [idÂ range-expr]Â post-cond
                      Â Â |Â (valuesÂ [idÂ range-expr]Â ...)Â post-cond
                      Â Â Â Â Â 
              post-condÂ =Â 
                      Â Â |Â #:post-condÂ boolean-expr
value
mixin-contractÂ :Â contract?
procedure
(make-mixin-contractÂ typeÂ ...)Â ->Â contract?
Â Â typeÂ :Â (or/cÂ class?Â interface?)
procedure
(is-a?/cÂ type)Â ->Â flat-contract?
Â Â typeÂ :Â (or/cÂ class?Â interface?)
procedure
(implementation?/cÂ interface)Â ->Â flat-contract?
Â Â interfaceÂ :Â interface?
procedure
(subclass?/cÂ class)Â ->Â flat-contract?
Â Â classÂ :Â class?
interface
equal<%>Â :Â interface?
syntax
(define-serializable-class*Â class-idÂ superclass-expr
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (interface-exprÂ ...)
Â Â class-clauseÂ ...)
syntax
(define-serializable-classÂ class-idÂ superclass-expr
Â Â class-clauseÂ ...)
interface
externalizable<%>Â :Â interface?
value
printable<%>Â :Â interface?
value
writable<%>Â :Â interface?
procedure
(object?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(class?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(interface?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(generic?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(object=?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â object?
Â Â bÂ :Â object?
procedure
(object-or-false=?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â (or/cÂ object?Â #f)
Â Â bÂ :Â (or/cÂ object?Â #f)
procedure
(object=-hash-codeÂ o)Â ->Â fixnum?
Â Â oÂ :Â object?
procedure
(object->vectorÂ objectÂ [opaque-v])Â ->Â vector?
Â Â objectÂ :Â object?
Â Â opaque-vÂ :Â any/cÂ =Â #f
procedure
(class->interfaceÂ class)Â ->Â interface?
Â Â classÂ :Â class?
procedure
(object-interfaceÂ object)Â ->Â interface?
Â Â objectÂ :Â object?
procedure
(is-a?Â vÂ type)Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â typeÂ :Â (or/cÂ interface?Â class?)
procedure
(subclass?Â vÂ cls)Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â clsÂ :Â class?
procedure
(implementation?Â vÂ intf)Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â intfÂ :Â interface?
procedure
(interface-extension?Â vÂ intf)Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â intfÂ :Â interface?
procedure
(method-in-interface?Â symÂ intf)Â ->Â boolean?
Â Â symÂ :Â symbol?
Â Â intfÂ :Â interface?
procedure
(interface->method-namesÂ intf)Â ->Â (listofÂ symbol?)
Â Â intfÂ :Â interface?
procedure
(object-method-arity-includes?Â objectÂ Â  Â Â 
Â                              Â sym   Â Â  Â Â 
Â                              Â cnt)  Â ->Â boolean?
Â Â objectÂ :Â object?
Â Â symÂ :Â symbol?
Â Â cntÂ :Â exact-nonnegative-integer?
procedure
(field-namesÂ object)Â ->Â (listofÂ symbol?)
Â Â objectÂ :Â object?
procedure
(object-infoÂ object)Â ->Â (or/cÂ class?Â #f)Â boolean?
Â Â objectÂ :Â object?
procedure
(class-infoÂ class)
Â ->Â symbol?
    exact-nonnegative-integer?
    (listofÂ symbol?)
    (any/cÂ exact-nonnegative-integer?Â . -> .Â any/c)
    (any/cÂ exact-nonnegative-integer?Â any/cÂ . -> .Â any/c)
    (or/cÂ class?Â #f)
    boolean?
Â Â classÂ :Â class?
struct
(structÂ exn:fail:objectÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:object)
procedure
(class-sealÂ class           Â Â  Â Â 
Â           Â key             Â Â  Â Â 
Â           Â unsealed-inits  Â Â  Â Â 
Â           Â unsealed-fields Â Â  Â Â 
Â           Â unsealed-methodsÂ Â  Â Â 
Â           Â inst-proc       Â Â  Â Â 
Â           Â member-proc)    Â ->Â class?
Â Â classÂ :Â class?
Â Â keyÂ :Â symbol?
Â Â unsealed-initsÂ :Â (listofÂ symbol?)
Â Â unsealed-fieldsÂ :Â (listofÂ symbol?)
Â Â unsealed-methodsÂ :Â (listofÂ symbol?)
Â Â inst-procÂ :Â (->Â class?Â any)
Â Â member-procÂ :Â (->Â class?Â (listofÂ symbol?)Â any)
procedure
(class-unsealÂ classÂ keyÂ wrong-key-proc)Â ->Â class?
Â Â classÂ :Â class?
Â Â keyÂ :Â symbol?
Â Â wrong-key-procÂ :Â (->Â class?Â any)
syntax
(surrogateÂ use-wrapper-procÂ method-specÂ ...)
Â 
use-wrapper-procÂ =Â #:use-wrapper-proc
               Â Â |Â 
               Â Â Â Â Â 
     method-specÂ =Â (augmentÂ default-exprÂ method-idÂ arg-specÂ ...)
               Â Â |Â (overrideÂ method-idÂ arg-specÂ ...)
               Â Â Â Â Â 
        arg-specÂ =Â (idÂ ...)
               Â Â |Â id
syntax
(unit
Â Â (importÂ tagged-sig-specÂ ...)
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â init-depends-decl
Â Â unit-body-expr-or-defn
Â Â ...)
Â 
  tagged-sig-specÂ =Â sig-spec
                Â Â |Â (tagÂ idÂ sig-spec)
                Â Â Â Â Â 
         sig-specÂ =Â sig-id
                Â Â |Â (prefixÂ idÂ sig-spec)
                Â Â |Â (renameÂ sig-specÂ (idÂ id)Â ...)
                Â Â |Â (onlyÂ sig-specÂ idÂ ...)
                Â Â |Â (exceptÂ sig-specÂ idÂ ...)
                Â Â Â Â Â 
init-depends-declÂ =Â 
                Â Â |Â (init-dependÂ tagged-sig-idÂ ...)
                Â Â Â Â Â 
    tagged-sig-idÂ =Â sig-id
                Â Â |Â (tagÂ idÂ sig-id)
syntax
(define-signatureÂ sig-idÂ extension-decl
Â Â (sig-elemÂ ...))
Â 
extension-declÂ =Â 
             Â Â |Â extendsÂ sig-id
             Â Â Â Â Â 
      sig-elemÂ =Â id
             Â Â |Â (define-syntaxesÂ (idÂ ...)Â expr)
             Â Â |Â (define-valuesÂ (idÂ ...)Â expr)
             Â Â |Â (define-values-for-exportÂ (idÂ ...)Â expr)
             Â Â |Â (contractedÂ [idÂ contract]Â ...)
             Â Â |Â (openÂ sig-spec)
             Â Â |Â (structÂ idÂ (fieldÂ ...)Â struct-optionÂ ...)
             Â Â |Â (sig-form-idÂ . datum)
             Â Â Â Â Â 
         fieldÂ =Â id
             Â Â |Â [idÂ #:mutable]
             Â Â Â Â Â 
 struct-optionÂ =Â #:mutable
             Â Â |Â #:constructor-nameÂ constructor-id
             Â Â |Â #:extra-constructor-nameÂ constructor-id
             Â Â |Â #:omit-constructor
             Â Â |Â #:omit-define-syntaxes
             Â Â |Â #:omit-define-values
syntax
(openÂ sig-spec)
syntax
(define-values-for-exportÂ (idÂ ...)Â expr)
syntax
(contractedÂ [idÂ contract]Â ...)
syntax
(onlyÂ sig-specÂ idÂ ...)
syntax
(exceptÂ sig-specÂ idÂ ...)
syntax
(renameÂ sig-specÂ (idÂ id)Â ...)
syntax
(prefixÂ idÂ sig-spec)
syntax
(importÂ tagged-sig-specÂ ...)
syntax
(exportÂ tagged-sig-specÂ ...)
syntax
(linkÂ linkage-declÂ ...)
syntax
(tagÂ idÂ sig-spec)
(tagÂ idÂ sig-id)
syntax
(init-dependÂ tagged-sig-idÂ ...)
syntax
extends
syntax
(invoke-unitÂ unit-expr)
(invoke-unitÂ unit-exprÂ (importÂ tagged-sig-specÂ ...))
syntax
(define-values/invoke-unitÂ unit-expr
Â Â (importÂ tagged-sig-specÂ ...)
Â Â Â (exportÂ tagged-sig-specÂ ...)
Â Â maybe-results-clause)
Â 
maybe-results-clauseÂ =Â 
                   Â Â |Â (valuesÂ result-idÂ ...)
                   Â Â |Â (valuesÂ result-idÂ ...Â . rest-results-id)
syntax
(compound-unit
Â Â (importÂ link-bindingÂ ...)
Â Â (exportÂ tagged-link-idÂ ...)
Â Â (linkÂ linkage-declÂ ...))
Â 
  link-bindingÂ =Â (link-idÂ :Â tagged-sig-id)
             Â Â Â Â Â 
tagged-link-idÂ =Â (tagÂ idÂ link-id)
             Â Â |Â link-id
             Â Â Â Â Â 
  linkage-declÂ =Â ((link-bindingÂ ...)Â unit-exprÂ tagged-link-idÂ ...)
syntax
(define-unitÂ unit-id
Â Â (importÂ tagged-sig-specÂ ...)
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â init-depends-decl
Â Â unit-body-expr-or-defn
Â Â ...)
syntax
(compound-unit/infer
Â Â (importÂ tagged-infer-link-importÂ ...)
Â Â (exportÂ tagged-infer-link-exportÂ ...)
Â Â (linkÂ infer-linkage-declÂ ...))
Â 
tagged-infer-link-importÂ =Â tagged-sig-id
                       Â Â |Â (link-idÂ :Â tagged-sig-id)
                       Â Â Â Â Â 
tagged-infer-link-exportÂ =Â (tagÂ idÂ infer-link-export)
                       Â Â |Â infer-link-export
                       Â Â Â Â Â 
       infer-link-exportÂ =Â link-id
                       Â Â |Â sig-id
                       Â Â Â Â Â 
      infer-linkage-declÂ =Â ((link-bindingÂ ...)Â unit-id
                           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â tagged-link-idÂ ...)
                       Â Â |Â unit-id
syntax
(define-compound-unitÂ id
Â Â (importÂ link-bindingÂ ...)
Â Â (exportÂ tagged-link-idÂ ...)
Â Â (linkÂ linkage-declÂ ...))
syntax
(define-compound-unit/inferÂ id
Â Â (importÂ link-bindingÂ ...)
Â Â (exportÂ tagged-infer-link-exportÂ ...)
Â Â (linkÂ infer-linkage-declÂ ...))
syntax
(define-unit-bindingÂ unit-id
Â Â unit-expr
Â Â (importÂ tagged-sig-specÂ ...+)
Â Â (exportÂ tagged-sig-specÂ ...+)
Â Â init-depends-decl)
syntax
(invoke-unit/inferÂ unit-spec)
Â 
unit-specÂ =Â unit-id
        Â Â |Â (linkÂ link-unit-idÂ ...)
syntax
(define-values/invoke-unit/infer
Â Â unit-spec
Â Â maybe-exports
Â Â maybe-results-clause)
(define-values/invoke-unit/infer
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â unit-spec)
Â 
           unit-specÂ =Â unit-id
                   Â Â |Â (linkÂ link-unit-idÂ ...)
                   Â Â Â Â Â 
       maybe-exportsÂ =Â 
                   Â Â |Â (exportÂ tagged-sig-specÂ ...)
                   Â Â Â Â Â 
maybe-results-clauseÂ =Â 
                   Â Â |Â (valuesÂ result-idÂ ...)
                   Â Â |Â (valuesÂ result-idÂ ...Â . rest-results-id)
syntax
(unit-from-contextÂ tagged-sig-spec)
syntax
(define-unit-from-contextÂ idÂ tagged-sig-spec)
syntax
(unit/new-import-export
Â Â (importÂ tagged-sig-specÂ ...)
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â init-depends-decl
Â Â ((tagged-sig-specÂ ...)Â unit-exprÂ tagged-sig-spec))
syntax
(define-unit/new-import-exportÂ unit-id
Â Â (importÂ tagged-sig-specÂ ...)
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â init-depends-decl
Â Â ((tagged-sig-specÂ ...)Â unit-exprÂ tagged-sig-spec))
syntax
(unit/s
Â Â (importÂ tagged-sig-specÂ ...)
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â init-depends-decl
Â Â unit-id)
syntax
(define-unit/sÂ name-id
Â Â (importÂ tagged-sig-specÂ ...)
Â Â (exportÂ tagged-sig-specÂ ...)
Â Â init-depends-decl
Â Â unit-id)
syntax
(define-signature-formÂ sig-form-idÂ expr)
(define-signature-formÂ (sig-form-idÂ id)Â bodyÂ ...+)
(define-signature-formÂ (sig-form-idÂ idÂ intro-id)Â bodyÂ ...+)
syntax
(struct/ctcÂ idÂ ([fieldÂ contract-expr]Â ...)Â struct-optionÂ ...)
Â 
        fieldÂ =Â id
            Â Â |Â [idÂ #:mutable]
            Â Â Â Â Â 
struct-optionÂ =Â #:mutable
            Â Â |Â #:omit-constructor
            Â Â |Â #:omit-define-syntaxes
            Â Â |Â #:omit-define-values
procedure
(unit?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(provide-signature-elementsÂ sig-specÂ ...)
syntax
(unit/c
Â Â (importÂ sig-spec-blockÂ ...)
Â Â (exportÂ sig-spec-blockÂ ...)
Â Â init-depends-decl
Â Â optional-body-ctc)
Â 
   sig-spec-blockÂ =Â (tagged-sig-specÂ [idÂ contract]Â ...)
                Â Â |Â tagged-sig-spec
                Â Â Â Â Â 
init-depends-declÂ =Â 
                Â Â |Â (init-dependÂ tagged-sig-idÂ ...)
                Â Â Â Â Â 
optional-body-ctcÂ =Â 
                Â Â |Â contract
                Â Â |Â (valuesÂ contractÂ ...)
syntax
(define-unit/contractÂ unit-id
Â Â (importÂ sig-spec-blockÂ ...)
Â Â (exportÂ sig-spec-blockÂ ...)
Â Â init-depends-decl
Â Â optional-body-ctc
Â Â unit-body-expr-or-defn
Â Â ...)
Â 
   sig-spec-blockÂ =Â (tagged-sig-specÂ [idÂ contract]Â ...)
                Â Â |Â tagged-sig-spec
                Â Â Â Â Â 
optional-body-ctcÂ =Â 
                Â Â |Â #:invoke/contractÂ contract
                Â Â |Â #:invoke/contractÂ (valuesÂ contractÂ ...)
procedure
(unit-static-signaturesÂ unit-identifierÂ 
Â                       Â err-syntax)    Â 
Â ->Â (list/cÂ (cons/cÂ (or/cÂ symbol?Â #f)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â identifier?))
    (list/cÂ (cons/cÂ (or/cÂ symbol?Â #f)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â identifier?))
Â Â unit-identifierÂ :Â identifier?
Â Â err-syntaxÂ :Â syntax?
procedure
(signature-membersÂ sig-identifierÂ Â  Â Â 
Â                  Â err-syntax)   Â ->Â (or/cÂ identifier?Â #f)
                                     (listofÂ identifier?)
                                     (listofÂ identifier?)
                                     (listofÂ identifier?)
Â Â sig-identifierÂ :Â identifier?
Â Â err-syntaxÂ :Â syntax?
procedure
(unit-static-init-dependenciesÂ unit-identifierÂ 
Â                              Â err-syntax)    Â 
Â ->Â (list/cÂ (cons/cÂ (or/cÂ symbol?Â #f)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â identifier?))
Â Â unit-identifierÂ :Â identifier?
Â Â err-syntaxÂ :Â syntax?
procedure
(flat-contract-with-explanationÂ  get-explanationÂ 
Â                               Â [#:nameÂ name])  Â 
Â ->Â flat-contract?
Â Â get-explanationÂ :Â (->Â any/cÂ (or/cÂ boolean?Â (->Â blame?Â any)))
Â Â nameÂ :Â any/cÂ =Â (object-nameÂ get-explanation)
procedure
(flat-named-contractÂ  name         Â Â  Â Â 
Â                    Â  flat-contractÂ Â  Â Â 
Â                    Â [generator])  Â ->Â flat-contract?
Â Â nameÂ :Â any/c
Â Â flat-contractÂ :Â flat-contract?
Â Â generatorÂ :Â (or/cÂ #fÂ (->Â exact-nonnegative-integer?Â (->Â any/c)))
Â  Â         Â =Â #f
value
any/cÂ :Â flat-contract?
value
none/cÂ :Â flat-contract?
procedure
(or/cÂ contractÂ ...)Â ->Â contract?
Â Â contractÂ :Â contract?
procedure
(first-or/cÂ contractÂ ...)Â ->Â contract?
Â Â contractÂ :Â contract?
procedure
(and/cÂ contractÂ ...)Â ->Â contract?
Â Â contractÂ :Â contract?
procedure
(not/cÂ flat-contract)Â ->Â flat-contract?
Â Â flat-contractÂ :Â flat-contract?
procedure
(=/cÂ z)Â ->Â flat-contract?
Â Â zÂ :Â real?
procedure
(</cÂ n)Â ->Â flat-contract?
Â Â nÂ :Â real?
procedure
(>/cÂ n)Â ->Â flat-contract?
Â Â nÂ :Â real?
procedure
(<=/cÂ n)Â ->Â flat-contract?
Â Â nÂ :Â real?
procedure
(>=/cÂ n)Â ->Â flat-contract?
Â Â nÂ :Â real?
procedure
(between/cÂ nÂ m)Â ->Â flat-contract?
Â Â nÂ :Â real?
Â Â mÂ :Â real?
procedure
(real-inÂ nÂ m)Â ->Â flat-contract?
Â Â nÂ :Â real?
Â Â mÂ :Â real?
procedure
(integer-inÂ jÂ k)Â ->Â flat-contract?
Â Â jÂ :Â (or/cÂ exact-integer?Â #f)
Â Â kÂ :Â (or/cÂ exact-integer?Â #f)
procedure
(char-inÂ aÂ b)Â ->Â flat-contract?
Â Â aÂ :Â char?
Â Â bÂ :Â char?
value
natural-number/cÂ :Â flat-contract?
procedure
(string-len/cÂ len)Â ->Â flat-contract?
Â Â lenÂ :Â real?
value
false/cÂ :Â flat-contract?
value
printable/cÂ :Â flat-contract?
procedure
(one-of/cÂ vÂ ...+)Â ->Â flat-contract?
Â Â vÂ :Â any/c
procedure
(symbolsÂ symÂ ...+)Â ->Â flat-contract?
Â Â symÂ :Â symbol?
procedure
(vectorofÂ  c                    Â Â  Â Â 
Â         Â [#:immutableÂ immutableÂ Â  Â Â 
Â         Â  #:flat?Â flat?        Â Â  Â Â 
Â         Â  #:eagerÂ eager])      Â ->Â contract?
Â Â cÂ :Â contract?
Â Â immutableÂ :Â (or/cÂ #tÂ #fÂ 'dont-care)Â =Â 'dont-care
Â Â flat?Â :Â boolean?Â =Â #f
Â Â eagerÂ :Â (or/cÂ #tÂ #fÂ exact-nonnegative-integer?)Â =Â #t
procedure
(vector-immutableofÂ c)Â ->Â contract?
Â Â cÂ :Â contract?
procedure
(vector/cÂ  c                    Â Â  Â Â 
Â         Â  ...                  Â Â  Â Â 
Â         Â [#:immutableÂ immutableÂ Â  Â Â 
Â         Â  #:flat?Â flat?])      Â ->Â contract?
Â Â cÂ :Â contract?
Â Â immutableÂ :Â (or/cÂ #tÂ #fÂ 'dont-care)Â =Â 'dont-care
Â Â flat?Â :Â boolean?Â =Â #f
procedure
(vector-immutable/cÂ cÂ ...)Â ->Â contract?
Â Â cÂ :Â contract?
procedure
(box/cÂ  in-c                 Â Â  Â Â 
Â      Â [c                    Â Â  Â Â 
Â      Â  #:immutableÂ immutableÂ Â  Â Â 
Â      Â  #:flat?Â flat?])      Â ->Â contract?
Â Â in-cÂ :Â contract?
Â Â cÂ :Â contract?Â =Â in-c
Â Â immutableÂ :Â (or/cÂ #tÂ #fÂ 'dont-care)Â =Â 'dont-care
Â Â flat?Â :Â boolean?Â =Â #f
procedure
(box-immutable/cÂ c)Â ->Â contract?
Â Â cÂ :Â contract?
procedure
(listofÂ c)Â ->Â list-contract?
Â Â cÂ :Â contract?
procedure
(non-empty-listofÂ c)Â ->Â list-contract?
Â Â cÂ :Â contract?
procedure
(list*ofÂ ele-cÂ [last-c])Â ->Â contract?
Â Â ele-cÂ :Â contract?
Â Â last-cÂ :Â contract?Â =Â ele-c
procedure
(cons/cÂ car-cÂ cdr-c)Â ->Â contract?
Â Â car-cÂ :Â contract?
Â Â cdr-cÂ :Â contract?
syntax
(cons/dcÂ [car-idÂ contract-expr]Â [cdr-idÂ (car-id)Â contract-expr]Â cons/dc-option)
(cons/dcÂ [car-idÂ (cdr-id)Â contract-expr]Â [cdr-idÂ contract-expr]Â cons/dc-option)
Â 
cons/dc-optionÂ =Â 
             Â Â |Â #:flat
             Â Â |Â #:chaperone
             Â Â |Â #:impersonator
procedure
(list/cÂ cÂ ...)Â ->Â list-contract?
Â Â cÂ :Â contract?
procedure
(*list/cÂ prefixÂ suffixÂ ...)Â ->Â list-contract?
Â Â prefixÂ :Â contract?
Â Â suffixÂ :Â contract?
procedure
(syntax/cÂ c)Â ->Â flat-contract?
Â Â cÂ :Â flat-contract?
syntax
(struct/cÂ struct-idÂ contract-exprÂ ...)
syntax
(struct/dcÂ struct-idÂ field-specÂ ...Â maybe-inv)
Â 
         field-specÂ =Â [field-nameÂ maybe-lazyÂ contract-expr]
                  Â Â |Â [field-nameÂ (dep-field-nameÂ ...)
                      Â Â Â Â Â Â Â Â Â Â Â Â maybe-lazy
                      Â Â Â Â Â Â Â Â Â Â Â Â maybe-contract-type
                      Â Â Â Â Â Â Â Â Â Â Â Â maybe-dep-state
                      Â Â Â Â Â Â Â Â Â Â Â Â contract-expr]
                  Â Â Â Â Â 
         field-nameÂ =Â field-id
                  Â Â |Â (#:selectorÂ selector-id)
                  Â Â |Â (field-idÂ #:parentÂ struct-id)
                  Â Â Â Â Â 
         maybe-lazyÂ =Â 
                  Â Â |Â #:lazy
                  Â Â Â Â Â 
maybe-contract-typeÂ =Â 
                  Â Â |Â #:flat
                  Â Â |Â #:chaperone
                  Â Â |Â #:impersonator
                  Â Â Â Â Â 
    maybe-dep-stateÂ =Â 
                  Â Â |Â #:depends-on-state
                  Â Â Â Â Â 
          maybe-invÂ =Â 
                  Â Â |Â #:invÂ (dep-field-nameÂ ...)Â invariant-expr
procedure
(parameter/cÂ  in                             Â Â  Â Â 
Â            Â [out                            Â Â  Â Â 
Â            Â  #:impersonator?Â impersonator?])Â ->Â contract?
Â Â inÂ :Â contract?
Â Â outÂ :Â contract?Â =Â in
Â Â impersonator?Â :Â any/cÂ =Â #t
procedure
(procedure-arity-includes/cÂ n)Â ->Â flat-contract?
Â Â nÂ :Â exact-nonnegative-integer?
procedure
(hash/cÂ  key                  Â Â  Â Â 
Â       Â  val                  Â Â  Â Â 
Â       Â [#:immutableÂ immutableÂ Â  Â Â 
Â       Â  #:flat?Â flat?])      Â ->Â contract?
Â Â keyÂ :Â chaperone-contract?
Â Â valÂ :Â contract?
Â Â immutableÂ :Â (or/cÂ #tÂ #fÂ 'dont-care)Â =Â 'dont-care
Â Â flat?Â :Â boolean?Â =Â #f
syntax
(hash/dcÂ [key-idÂ key-contract-expr]Â [value-idÂ (key-id)Â value-contract-expr]
Â Â Â Â Â Â Â Â Â hash/dc-option)
Â 
hash/dc-optionÂ =Â 
             Â Â |Â #:immutableÂ immutable?-exprÂ hash/dc-option
             Â Â |Â #:kindÂ kind-exprÂ hash/dc-option
procedure
(channel/cÂ val)Â ->Â contract?
Â Â valÂ :Â contract?
syntax
(prompt-tag/cÂ contractÂ ...Â maybe-call/cc)
Â 
maybe-call/ccÂ =Â 
            Â Â |Â #:call/ccÂ contract
            Â Â |Â #:call/ccÂ (valuesÂ contractÂ ...)
Â 
Â Â contractÂ :Â contract?
procedure
(continuation-mark-key/cÂ contract)Â ->Â contract?
Â Â contractÂ :Â contract?
procedure
(evt/cÂ contractÂ ...)Â ->Â chaperone-contract?
Â Â contractÂ :Â chaperone-contract?
syntax
(flat-rec-contractÂ idÂ flat-contract-exprÂ ...)
syntax
(flat-murec-contractÂ ([idÂ flat-contract-exprÂ ...]Â ...)Â bodyÂ ...+)
syntax
any
procedure
(promise/cÂ c)Â ->Â contract?
Â Â cÂ :Â contract?
procedure
(flat-contractÂ predicate)Â ->Â flat-contract?
Â Â predicateÂ :Â (->Â any/cÂ any/c)
procedure
(flat-contract-predicateÂ v)Â ->Â (->Â any/cÂ any/c)
Â Â vÂ :Â flat-contract?
procedure
(property/cÂ accessorÂ ctcÂ [#:nameÂ name])Â ->Â flat-contract?
Â Â accessorÂ :Â (->Â any/cÂ any/c)
Â Â ctcÂ :Â flat-contract?
Â Â nameÂ :Â any/cÂ =Â (object-nameÂ accessor)
procedure
(suggest/cÂ cÂ fieldÂ message)Â ->Â contract?
Â Â cÂ :Â contract?
Â Â fieldÂ :Â string?
Â Â messageÂ :Â string?
syntax
(->Â domÂ ...Â range)
(->Â domÂ ...Â ellipsisÂ dom-exprÂ ...Â range)
Â 
     domÂ =Â dom-expr
       Â Â |Â keywordÂ dom-expr
       Â Â Â Â Â 
   rangeÂ =Â range-expr
       Â Â |Â (valuesÂ range-exprÂ ...)
       Â Â |Â any
       Â Â Â Â Â 
ellipsisÂ =Â ...
syntax
(->*Â (mandatory-domÂ ...)Â optional-domsÂ restÂ preÂ rangeÂ post)
Â 
mandatory-domÂ =Â dom-expr
            Â Â |Â keywordÂ dom-expr
            Â Â Â Â Â 
optional-domsÂ =Â 
            Â Â |Â (optional-domÂ ...)
            Â Â Â Â Â 
 optional-domÂ =Â dom-expr
            Â Â |Â keywordÂ dom-expr
            Â Â Â Â Â 
         restÂ =Â 
            Â Â |Â #:restÂ rest-expr
            Â Â Â Â Â 
          preÂ =Â 
            Â Â |Â #:preÂ pre-cond-expr
            Â Â |Â #:pre/descÂ pre-cond-expr
            Â Â Â Â Â 
        rangeÂ =Â range-expr
            Â Â |Â (valuesÂ range-exprÂ ...)
            Â Â |Â any
            Â Â Â Â Â 
         postÂ =Â 
            Â Â |Â #:postÂ post-cond-expr
            Â Â |Â #:post/descÂ post-cond-expr
syntax
(->iÂ maybe-chaperone
Â Â Â Â Â (mandatory-dependent-domÂ ...)
Â Â Â Â Â dependent-rest
Â Â Â Â Â pre-condition
Â Â Â Â Â param-value
Â Â Â Â Â dependent-range
Â Â Â Â Â post-condition)
(->iÂ maybe-chaperone
Â Â Â Â Â (mandatory-dependent-domÂ ...)
Â Â Â Â Â (optional-dependent-domÂ ...)
Â Â Â Â Â dependent-rest
Â Â Â Â Â pre-condition
Â Â Â Â Â param-value
Â Â Â Â Â dependent-range
Â Â Â Â Â post-condition)
Â 
        maybe-chaperoneÂ =Â #:chaperone
                      Â Â |Â 
                      Â Â Â Â Â 
mandatory-dependent-domÂ =Â id+ctc
                      Â Â |Â keywordÂ id+ctc
                      Â Â Â Â Â 
 optional-dependent-domÂ =Â id+ctc
                      Â Â |Â keywordÂ id+ctc
                      Â Â Â Â Â 
         dependent-restÂ =Â 
                      Â Â |Â #:restÂ id+ctc
                      Â Â Â Â Â 
          pre-conditionÂ =Â 
                      Â Â |Â #:preÂ (idÂ ...)
                          boolean-exprÂ pre-condition
                      Â Â |Â #:pre/descÂ (idÂ ...)
                          exprÂ pre-condition
                      Â Â |Â #:pre/nameÂ (idÂ ...)
                          stringÂ boolean-exprÂ pre-condition
                      Â Â Â Â Â 
            param-valueÂ =Â 
                      Â Â |Â #:paramÂ (idÂ ...)
                          param-exprÂ val-exprÂ param-value
                      Â Â Â Â Â 
        dependent-rangeÂ =Â any
                      Â Â |Â id+ctc
                      Â Â |Â un+ctc
                      Â Â |Â (valuesÂ id+ctcÂ ...)
                      Â Â |Â (valuesÂ un+ctcÂ ...)
                      Â Â Â Â Â 
         post-conditionÂ =Â 
                      Â Â |Â #:postÂ (idÂ ...)
                          boolean-exprÂ post-condition
                      Â Â |Â #:post/descÂ (idÂ ...)
                          exprÂ post-condition
                      Â Â |Â #:post/nameÂ (idÂ ...)
                          stringÂ boolean-exprÂ post-condition
                      Â Â Â Â Â 
                 id+ctcÂ =Â [idÂ contract-expr]
                      Â Â |Â [idÂ (idÂ ...)Â contract-expr]
                      Â Â Â Â Â 
                 un+ctcÂ =Â [_Â contract-expr]
                      Â Â |Â [_Â (idÂ ...)Â contract-expr]
syntax
(->dÂ (mandatory-dependent-domÂ ...)
Â Â Â Â Â dependent-rest
Â Â Â Â Â pre-condition
Â Â Â Â Â dependent-range
Â Â Â Â Â post-condition)
(->dÂ (mandatory-dependent-domÂ ...)
Â Â Â Â Â (optional-dependent-domÂ ...)
Â Â Â Â Â dependent-rest
Â Â Â Â Â pre-condition
Â Â Â Â Â dependent-range
Â Â Â Â Â post-condition)
Â 
mandatory-dependent-domÂ =Â [idÂ dom-expr]
                      Â Â |Â keywordÂ [idÂ dom-expr]
                      Â Â Â Â Â 
 optional-dependent-domÂ =Â [idÂ dom-expr]
                      Â Â |Â keywordÂ [idÂ dom-expr]
                      Â Â Â Â Â 
         dependent-restÂ =Â 
                      Â Â |Â #:restÂ idÂ rest-expr
                      Â Â Â Â Â 
          pre-conditionÂ =Â 
                      Â Â |Â #:preÂ boolean-expr
                      Â Â |Â #:pre-condÂ boolean-expr
                      Â Â Â Â Â 
        dependent-rangeÂ =Â any
                      Â Â |Â [_Â range-expr]
                      Â Â |Â (valuesÂ [_Â range-expr]Â ...)
                      Â Â |Â [idÂ range-expr]
                      Â Â |Â (valuesÂ [idÂ range-expr]Â ...)
                      Â Â Â Â Â 
         post-conditionÂ =Â 
                      Â Â |Â #:post-condÂ boolean-expr
syntax
(case->Â (->Â dom-exprÂ ...Â restÂ range)Â ...)
Â 
 restÂ =Â 
    Â Â |Â #:restÂ rest-expr
    Â Â Â Â Â 
rangeÂ =Â range-expr
    Â Â |Â (valuesÂ range-exprÂ ...)
    Â Â |Â any
procedure
(dynamic->*                                                           Â 
Â           Â [#:mandatory-domain-contractsÂ mandatory-domain-contracts  Â 
Â           Â  #:optional-domain-contractsÂ optional-domain-contracts    Â 
Â           Â  #:mandatory-keywordsÂ mandatory-keywords                  Â 
Â           Â  #:mandatory-keyword-contractsÂ mandatory-keyword-contractsÂ 
Â           Â  #:optional-keywordsÂ optional-keywords                    Â 
Â           Â  #:optional-keyword-contractsÂ optional-keyword-contracts  Â 
Â           Â  #:rest-contractÂ rest-contract]                           Â 
Â           Â  #:range-contractsÂ range-contracts)                       Â 
Â ->Â contract?
Â Â mandatory-domain-contractsÂ :Â (listofÂ contract?)Â =Â '()
Â Â optional-domain-contractsÂ :Â (listofÂ contract?)Â =Â '()
Â Â mandatory-keywordsÂ :Â (listofÂ keyword?)Â =Â '()
Â Â mandatory-keyword-contractsÂ :Â (listofÂ contract?)Â =Â '()
Â Â optional-keywordsÂ :Â (listofÂ keyword?)Â =Â '()
Â Â optional-keyword-contractsÂ :Â (listofÂ contract?)Â =Â '()
Â Â rest-contractÂ :Â (or/cÂ #fÂ contract?)Â =Â #f
Â Â range-contractsÂ :Â (or/cÂ #fÂ (listofÂ contract?))
syntax
(unconstrained-domain->Â range-exprÂ ...)
value
predicate/cÂ :Â contract?
value
the-unsupplied-argÂ :Â unsupplied-arg?
procedure
(unsupplied-arg?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(parametric->/cÂ (xÂ ...)Â c)
procedure
(new-âˆ€/cÂ [name])Â ->Â contract?
Â Â nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
procedure
(new-âˆƒ/cÂ [name])Â ->Â contract?
Â Â nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
syntax
(contract-structÂ idÂ (field-idÂ ...))

(id/dcÂ field-specÂ ...)
Â 
field-specÂ =Â [field-idÂ contract-expr]
         Â Â |Â [field-idÂ (field-idÂ ...)Â contract-expr]
syntax
(define-contract-structÂ idÂ (field-idÂ ...))
procedure
(struct-type-property/cÂ value-contract)Â ->Â contract?
Â Â value-contractÂ :Â contract?
syntax
(contract-outÂ unprotected-submoduleÂ contract-out-itemÂ ...)
Â 
unprotected-submoduleÂ =Â 
                    Â Â |Â #:unprotected-submoduleÂ submodule-name
                    Â Â Â Â Â 
    contract-out-itemÂ =Â (structÂ id/ignoredÂ ((idÂ contract-expr)Â ...)
                        Â Â struct-option)
                    Â Â |Â (renameÂ orig-idÂ idÂ contract-expr)
                    Â Â |Â (idÂ contract-expr)
                    Â Â |Â #:âˆƒÂ poly-variables
                    Â Â |Â #:existsÂ poly-variables
                    Â Â |Â #:âˆ€Â poly-variables
                    Â Â |Â #:forallÂ poly-variables
                    Â Â Â Â Â 
       poly-variablesÂ =Â id
                    Â Â |Â (idÂ ...)
                    Â Â Â Â Â 
           id/ignoredÂ =Â id
                    Â Â |Â (idÂ ignored-id)
                    Â Â Â Â Â 
        struct-optionÂ =Â 
                    Â Â |Â #:omit-constructor
syntax
(recontract-outÂ idÂ ...)
syntax
(provide/contractÂ unprotected-submoduleÂ contract-out-itemÂ ...)
syntax
(struct-guard/cÂ contract-exprÂ ...)
syntax
(with-contractÂ blame-idÂ (wc-exportÂ ...)Â free-var-listÂ ...Â bodyÂ ...+)
(with-contractÂ blame-idÂ results-specÂ free-var-listÂ ...Â bodyÂ ...+)
Â 
    wc-exportÂ =Â (idÂ contract-expr)
            Â Â Â Â Â 
  result-specÂ =Â #:resultÂ contract-expr
            Â Â |Â #:resultsÂ (contract-exprÂ ...)
            Â Â Â Â Â 
free-var-listÂ =Â 
            Â Â |Â #:freevarÂ idÂ contract-expr
            Â Â |Â #:freevarsÂ ([idÂ contract-expr]Â ...)
syntax
(define/contractÂ idÂ contract-exprÂ free-var-listÂ init-value-expr)
(define/contractÂ (headÂ args)Â contract-exprÂ free-var-listÂ bodyÂ ...+)
syntax
(struct/contractÂ struct-idÂ ([fieldÂ contract-expr]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
(struct/contractÂ struct-idÂ super-struct-id
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ([fieldÂ contract-expr]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
syntax
(define-struct/contractÂ struct-idÂ ([fieldÂ contract-expr]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
(define-struct/contractÂ (struct-idÂ super-struct-id)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ([fieldÂ contract-expr]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
syntax
(invariant-assertionÂ invariant-exprÂ expr)
syntax
current-contract-region
syntax
(define-module-boundary-contractÂ id
Â Â orig-id
Â Â contract-expr
Â Â pos-blame-party
Â Â source-loc
Â Â name-for-blame
Â Â context-limit)
Â 
pos-blame-partyÂ =Â 
              Â Â |Â #:pos-sourceÂ pos-source-expr
              Â Â Â Â Â 
     source-locÂ =Â 
              Â Â |Â #:srclocÂ srcloc-expr
              Â Â Â Â Â 
 name-for-blameÂ =Â 
              Â Â |Â #:name-for-blameÂ blame-id
              Â Â Â Â Â 
  context-limitÂ =Â 
              Â Â |Â #:context-limitÂ limit-expr
syntax
(contractÂ contract-exprÂ to-protect-expr
Â Â Â Â Â Â Â Â Â Â positive-blame-exprÂ negative-blame-expr)
(contractÂ contract-exprÂ to-protect-expr
Â Â Â Â Â Â Â Â Â Â positive-blame-exprÂ negative-blame-expr
Â Â Â Â Â Â Â Â Â Â #:context-limitÂ limit-expr)
(contractÂ contract-exprÂ to-protect-expr
Â Â Â Â Â Â Â Â Â Â positive-blame-exprÂ negative-blame-expr
Â Â Â Â Â Â Â Â Â Â value-name-exprÂ source-location-expr)
procedure
(make-contract                                                             Â 
Â              Â [#:nameÂ name                                                Â 
Â              Â  #:first-orderÂ first-order                                  Â 
Â              Â  #:late-neg-projectionÂ late-neg-proj                        Â 
Â              Â  #:collapsible-late-neg-projectionÂ collapsible-late-neg-projÂ 
Â              Â  #:val-first-projectionÂ val-first-proj                      Â 
Â              Â  #:projectionÂ proj                                          Â 
Â              Â  #:strongerÂ stronger                                        Â 
Â              Â  #:equivalentÂ equivalent                                    Â 
Â              Â  #:list-contract?Â is-list-contract?])                       Â 
Â ->Â contract?
Â Â nameÂ :Â any/cÂ =Â 'anonymous-contract
Â Â first-orderÂ :Â (->Â any/cÂ any/c)Â =Â (Î»Â (x)Â #t)
Â Â late-neg-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (->Â any/cÂ any/cÂ any/c)))
Â  Â             Â =Â #f
Â Â collapsible-late-neg-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?)))
Â  Â                         Â =Â #f
Â Â val-first-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c))))
Â  Â              Â =Â #f
Â Â projÂ :Â (->Â blame?Â (->Â any/cÂ any/c))
Â  Â    Â =Â (Î»Â (b)
         Â Â (Î»Â (x)
         Â Â Â Â (ifÂ (first-orderÂ x)
         Â Â Â Â Â Â x
         Â Â Â Â Â Â (raise-blame-error
         Â Â Â Â Â Â Â bÂ x
         Â Â Â Â Â Â Â '(expected:Â "~a"Â given:Â "~e")
         Â Â Â Â Â Â Â nameÂ x))))
Â Â strongerÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â equivalentÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â is-list-contract?Â :Â boolean?Â =Â #f
procedure
(make-chaperone-contract                                                             Â 
Â                        Â [#:nameÂ name                                                Â 
Â                        Â  #:first-orderÂ first-order                                  Â 
Â                        Â  #:late-neg-projectionÂ late-neg-proj                        Â 
Â                        Â  #:collapsible-late-neg-projectionÂ collapsible-late-neg-projÂ 
Â                        Â  #:val-first-projectionÂ val-first-proj                      Â 
Â                        Â  #:projectionÂ proj                                          Â 
Â                        Â  #:strongerÂ stronger                                        Â 
Â                        Â  #:equivalentÂ equivalent                                    Â 
Â                        Â  #:list-contract?Â is-list-contract?])                       Â 
Â ->Â chaperone-contract?
Â Â nameÂ :Â any/cÂ =Â 'anonymous-chaperone-contract
Â Â first-orderÂ :Â (->Â any/cÂ any/c)Â =Â (Î»Â (x)Â #t)
Â Â late-neg-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (->Â any/cÂ any/cÂ any/c)))
Â  Â             Â =Â #f
Â Â collapsible-late-neg-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?)))
Â  Â                         Â =Â #f
Â Â val-first-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c))))
Â  Â              Â =Â #f
Â Â projÂ :Â (->Â blame?Â (->Â any/cÂ any/c))
Â  Â    Â =Â (Î»Â (b)
         Â Â (Î»Â (x)
         Â Â Â Â (ifÂ (first-orderÂ x)
         Â Â Â Â Â Â x
         Â Â Â Â Â Â (raise-blame-error
         Â Â Â Â Â Â Â bÂ x
         Â Â Â Â Â Â Â '(expected:Â "~a"Â given:Â "~e")
         Â Â Â Â Â Â Â nameÂ x))))
Â Â strongerÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â equivalentÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â is-list-contract?Â :Â boolean?Â =Â #f
procedure
(make-flat-contract                                                             Â 
Â                   Â [#:nameÂ name                                                Â 
Â                   Â  #:first-orderÂ first-order                                  Â 
Â                   Â  #:late-neg-projectionÂ late-neg-proj                        Â 
Â                   Â  #:collapsible-late-neg-projectionÂ collapsible-late-neg-projÂ 
Â                   Â  #:val-first-projectionÂ val-first-proj                      Â 
Â                   Â  #:projectionÂ proj                                          Â 
Â                   Â  #:strongerÂ stronger                                        Â 
Â                   Â  #:equivalentÂ equivalent                                    Â 
Â                   Â  #:list-contract?Â is-list-contract?])                       Â 
Â ->Â flat-contract?
Â Â nameÂ :Â any/cÂ =Â 'anonymous-flat-contract
Â Â first-orderÂ :Â (->Â any/cÂ any/c)Â =Â (Î»Â (x)Â #t)
Â Â late-neg-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (->Â any/cÂ any/cÂ any/c)))
Â  Â             Â =Â #f
Â Â collapsible-late-neg-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?)))
Â  Â                         Â =Â #f
Â Â val-first-projÂ :Â (or/cÂ #fÂ (->Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c))))
Â  Â              Â =Â #f
Â Â projÂ :Â (->Â blame?Â (->Â any/cÂ any/c))
Â  Â    Â =Â (Î»Â (b)
         Â Â (Î»Â (x)
         Â Â Â Â (ifÂ (first-orderÂ x)
         Â Â Â Â Â Â x
         Â Â Â Â Â Â (raise-blame-error
         Â Â Â Â Â Â Â bÂ x
         Â Â Â Â Â Â Â '(expected:Â "~a"Â given:Â "~e")
         Â Â Â Â Â Â Â nameÂ x))))
Â Â strongerÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â equivalentÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â is-list-contract?Â :Â boolean?Â =Â #f
procedure
(build-compound-type-nameÂ c/sÂ ...)Â ->Â any
Â Â c/sÂ :Â any/c
procedure
(coerce-contractÂ idÂ v)Â ->Â contract?
Â Â idÂ :Â symbol?
Â Â vÂ :Â any/c
procedure
(coerce-contractsÂ idÂ vs)Â ->Â (listofÂ contract?)
Â Â idÂ :Â symbol?
Â Â vsÂ :Â (listofÂ any/c)
procedure
(coerce-chaperone-contractÂ idÂ v)Â ->Â chaperone-contract?
Â Â idÂ :Â symbol?
Â Â vÂ :Â any/c
procedure
(coerce-chaperone-contractsÂ idÂ vs)
Â ->Â (listofÂ chaperone-contract?)
Â Â idÂ :Â symbol?
Â Â vsÂ :Â (listofÂ any/c)
procedure
(coerce-flat-contractÂ idÂ v)Â ->Â flat-contract?
Â Â idÂ :Â symbol?
Â Â vÂ :Â any/c
procedure
(coerce-flat-contractsÂ idÂ v)Â ->Â (listofÂ flat-contract?)
Â Â idÂ :Â symbol?
Â Â vÂ :Â (listofÂ any/c)
procedure
(coerce-contract/fÂ v)Â ->Â (or/cÂ contract?Â #f)
Â Â vÂ :Â any/c
parameter
(skip-projection-wrapper?)Â ->Â boolean?
(skip-projection-wrapper?Â wrap?)Â ->Â void?
Â Â wrap?Â :Â boolean?
Â =Â #f
syntax
(with-contract-continuation-markÂ blameÂ bodyÂ ...)
(with-contract-continuation-markÂ blame+neg-partyÂ bodyÂ ...)
syntax
(contract-pos/neg-doublingÂ e1Â e2)
procedure
(blame?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(raise-blame-errorÂ b                            Â Â  Â Â 
Â                  Â #:missing-partyÂ missing-partyÂ Â  Â Â 
Â                  Â v                            Â Â  Â Â 
Â                  Â fmt                          Â Â  Â Â 
Â                  Â v-fmtÂ ...)                   Â ->Â none/c
Â Â bÂ :Â blame?
Â Â missing-partyÂ :Â #f
Â Â vÂ :Â any/c
Â Â fmtÂ :Â (or/cÂ string?
        Â Â Â Â Â Â (listofÂ (or/cÂ string?
        Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'givenÂ 'given:
        Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'expectedÂ 'expected:)))
Â Â v-fmtÂ :Â any/c
procedure
(blame-add-contextÂ  blame                Â Â  Â Â 
Â                  Â  context              Â Â  Â Â 
Â                  Â [#:importantÂ importantÂ Â  Â Â 
Â                  Â  #:swap?Â swap?])      Â ->Â blame?
Â Â blameÂ :Â blame?
Â Â contextÂ :Â (or/cÂ string?Â #f)
Â Â importantÂ :Â (or/cÂ string?Â #f)Â =Â #f
Â Â swap?Â :Â boolean?Â =Â #f
procedure
(blame-contextÂ blame)Â ->Â (listofÂ string?)
Â Â blameÂ :Â blame?
procedure
(blame-positiveÂ b)Â ->Â any/c
Â Â bÂ :Â blame?
procedure
(blame-negativeÂ b)Â ->Â any/c
Â Â bÂ :Â blame?
procedure
(blame-contractÂ b)Â ->Â any/c
Â Â bÂ :Â blame?
procedure
(blame-valueÂ b)Â ->Â any/c
Â Â bÂ :Â blame?
procedure
(blame-sourceÂ b)Â ->Â srcloc?
Â Â bÂ :Â blame?
procedure
(blame-swapÂ b)Â ->Â blame?
Â Â bÂ :Â blame?
procedure
(blame-original?Â b)Â ->Â boolean?
Â Â bÂ :Â blame?
procedure
(blame-swapped?Â b)Â ->Â boolean?
Â Â bÂ :Â blame?
procedure
(blame-replace-negativeÂ bÂ neg)Â ->Â blame?
Â Â bÂ :Â blame?
Â Â negÂ :Â any/c
procedure
(blame-replaced-negative?Â b)Â ->Â boolean?
Â Â bÂ :Â blame?
procedure
(blame-updateÂ bÂ posÂ neg)Â ->Â blame?
Â Â bÂ :Â blame?
Â Â posÂ :Â any/c
Â Â negÂ :Â any/c
procedure
(blame-missing-party?Â b)Â ->Â boolean?
Â Â bÂ :Â blame?
procedure
(blame-add-missing-partyÂ bÂ missing-party)
Â ->Â (and/cÂ blame?Â (not/cÂ blame-missing-party?))
Â Â bÂ :Â (and/cÂ blame?Â blame-missing-party?)
Â Â missing-partyÂ :Â any/c
struct
(structÂ exn:fail:contract:blameÂ exn:fail:contractÂ (object)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:contract:blame)
Â Â objectÂ :Â blame?
parameter
(current-blame-format)Â ->Â (->Â blame?Â any/cÂ string?Â string?)
(current-blame-formatÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â blame?Â any/cÂ string?Â string?)
value
prop:contractÂ :Â struct-type-property?
value
prop:chaperone-contractÂ :Â struct-type-property?
value
prop:flat-contractÂ :Â struct-type-property?
value
prop:contractedÂ :Â struct-type-property?
value
impersonator-prop:contractedÂ :Â impersonator-property?
value
prop:blameÂ :Â struct-type-property?
value
impersonator-prop:blameÂ :Â impersonator-property?
procedure
(build-flat-contract-property                                                             Â 
Â                             Â [#:nameÂ get-name                                            Â 
Â                             Â  #:first-orderÂ get-first-order                              Â 
Â                             Â  #:late-neg-projectionÂ late-neg-proj                        Â 
Â                             Â  #:collapsible-late-neg-projectionÂ collapsible-late-neg-projÂ 
Â                             Â  #:val-first-projectionÂ val-first-proj                      Â 
Â                             Â  #:projectionÂ get-projection                                Â 
Â                             Â  #:strongerÂ stronger                                        Â 
Â                             Â  #:equivalentÂ equivalent                                    Â 
Â                             Â  #:generateÂ generate                                        Â 
Â                             Â  #:list-contract?Â is-list-contract?])                       Â 
Â ->Â flat-contract-property?
Â Â get-nameÂ :Â (->Â contract?Â any/c)
Â  Â        Â =Â (Î»Â (c)Â 'anonymous-flat-contract)
Â Â get-first-orderÂ :Â (->Â contract?Â (->Â any/cÂ boolean?))
Â  Â               Â =Â (Î»Â (c)Â (Î»Â (x)Â #t))
Â Â late-neg-projÂ :Â (or/cÂ #fÂ (->Â contract?Â (->Â blame?Â (->Â any/cÂ any/cÂ any/c))))
Â  Â             Â =Â #f
Â Â collapsible-late-neg-projÂ :Â (or/cÂ #fÂ (->Â contract?Â (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?))))
Â  Â                         Â =Â #f
Â Â val-first-projÂ :Â (or/cÂ #fÂ (->Â contract?Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c))))
Â  Â              Â =Â #f
Â Â get-projectionÂ :Â (->Â contract?Â (->Â blame?Â (->Â any/cÂ any/c)))
Â  Â              Â =Â (Î»Â (c)
                   Â Â (Î»Â (b)
                   Â Â Â Â (Î»Â (x)
                   Â Â Â Â Â Â (ifÂ ((get-first-orderÂ c)Â x)
                   Â Â Â Â Â Â Â Â Â Â x
                   Â Â Â Â Â Â Â Â Â Â (raise-blame-error
                   Â Â Â Â Â Â Â Â Â Â Â bÂ xÂ '(expected:Â "~a"Â given:Â "~e")
                   Â Â Â Â Â Â Â Â Â Â Â (get-nameÂ c)Â x)))))
Â Â strongerÂ :Â (or/cÂ (->Â contract?Â contract?Â boolean?)Â #f)Â =Â #f
Â Â equivalentÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â generateÂ :Â (->iÂ ([cÂ contract?])
             Â Â Â Â Â [generator
             Â Â Â Â Â Â (c)
             Â Â Â Â Â Â (->Â exact-nonnegative-integer?
             Â Â Â Â Â Â Â Â Â Â (or/cÂ (->Â (or/cÂ contract-random-generate-fail?Â c))
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f))])
Â  Â        Â =Â (Î»Â (c)Â (Î»Â (fuel)Â #f))
Â Â is-list-contract?Â :Â (->Â contract?Â boolean?)Â =Â (Î»Â (c)Â #f)
procedure
(build-chaperone-contract-property                                                             Â 
Â                                  Â [#:nameÂ get-name                                            Â 
Â                                  Â  #:first-orderÂ get-first-order                              Â 
Â                                  Â  #:late-neg-projectionÂ late-neg-proj                        Â 
Â                                  Â  #:collapsible-late-neg-projectionÂ collapsible-late-neg-projÂ 
Â                                  Â  #:val-first-projectionÂ val-first-proj                      Â 
Â                                  Â  #:projectionÂ get-projection                                Â 
Â                                  Â  #:strongerÂ stronger                                        Â 
Â                                  Â  #:equivalentÂ equivalent                                    Â 
Â                                  Â  #:generateÂ generate                                        Â 
Â                                  Â  #:exerciseÂ exercise                                        Â 
Â                                  Â  #:list-contract?Â is-list-contract?])                       Â 
Â ->Â chaperone-contract-property?
Â Â get-nameÂ :Â (->Â contract?Â any/c)
Â  Â        Â =Â (Î»Â (c)Â 'anonymous-chaperone-contract)
Â Â get-first-orderÂ :Â (->Â contract?Â (->Â any/cÂ boolean?))
Â  Â               Â =Â (Î»Â (c)Â (Î»Â (x)Â #t))
Â Â late-neg-projÂ :Â (or/cÂ #fÂ (->Â contract?Â (->Â blame?Â (->Â any/cÂ any/cÂ any/c))))
Â  Â             Â =Â #f
Â Â collapsible-late-neg-projÂ :Â (or/cÂ #fÂ (->Â contract?Â (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?))))
Â  Â                         Â =Â #f
Â Â val-first-projÂ :Â (or/cÂ #fÂ (->Â contract?Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c))))
Â  Â              Â =Â #f
Â Â get-projectionÂ :Â (->Â contract?Â (->Â blame?Â (->Â any/cÂ any/c)))
Â  Â              Â =Â (Î»Â (c)
                   Â Â (Î»Â (b)
                   Â Â Â Â (Î»Â (x)
                   Â Â Â Â Â Â (ifÂ ((get-first-orderÂ c)Â x)
                   Â Â Â Â Â Â Â Â Â Â x
                   Â Â Â Â Â Â Â Â Â Â (raise-blame-error
                   Â Â Â Â Â Â Â Â Â Â Â bÂ xÂ '(expected:Â "~a"Â given:Â "~e")
                   Â Â Â Â Â Â Â Â Â Â Â (get-nameÂ c)Â x)))))
Â Â strongerÂ :Â (or/cÂ (->Â contract?Â contract?Â boolean?)Â #f)Â =Â #f
Â Â equivalentÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â generateÂ :Â (->iÂ ([cÂ contract?])
             Â Â Â Â Â [generator
             Â Â Â Â Â Â (c)
             Â Â Â Â Â Â (->Â exact-nonnegative-integer?
             Â Â Â Â Â Â Â Â Â Â (or/cÂ (->Â (or/cÂ contract-random-generate-fail?Â c))
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f))])
Â  Â        Â =Â (Î»Â (c)Â (Î»Â (fuel)Â #f))
Â Â exerciseÂ :Â (->iÂ ([cÂ contract?])
             Â Â Â Â Â [result
             Â Â Â Â Â Â (c)
             Â Â Â Â Â Â (->Â exact-nonnegative-integer?
             Â Â Â Â Â Â Â Â Â Â (values
             Â Â Â Â Â Â Â Â Â Â Â (->Â cÂ void?)
             Â Â Â Â Â Â Â Â Â Â Â (listofÂ contract?)))])
Â  Â        Â =Â (Î»Â (c)Â (Î»Â (fuel)Â (valuesÂ voidÂ '())))
Â Â is-list-contract?Â :Â (->Â contract?Â boolean?)Â =Â (Î»Â (c)Â #f)
procedure
(build-contract-property                                                             Â 
Â                        Â [#:nameÂ get-name                                            Â 
Â                        Â  #:first-orderÂ get-first-order                              Â 
Â                        Â  #:late-neg-projectionÂ late-neg-proj                        Â 
Â                        Â  #:collapsible-late-neg-projectionÂ collapsible-late-neg-projÂ 
Â                        Â  #:val-first-projectionÂ val-first-proj                      Â 
Â                        Â  #:projectionÂ get-projection                                Â 
Â                        Â  #:strongerÂ stronger                                        Â 
Â                        Â  #:equivalentÂ equivalent                                    Â 
Â                        Â  #:generateÂ generate                                        Â 
Â                        Â  #:exerciseÂ exercise                                        Â 
Â                        Â  #:list-contract?Â is-list-contract?])                       Â 
Â ->Â contract-property?
Â Â get-nameÂ :Â (->Â contract?Â any/c)Â =Â (Î»Â (c)Â 'anonymous-contract)
Â Â get-first-orderÂ :Â (->Â contract?Â (->Â any/cÂ boolean?))
Â  Â               Â =Â (Î»Â (c)Â (Î»Â (x)Â #t))
Â Â late-neg-projÂ :Â (or/cÂ #fÂ (->Â contract?Â (->Â blame?Â (->Â any/cÂ any/cÂ any/c))))
Â  Â             Â =Â #f
Â Â collapsible-late-neg-projÂ :Â (or/cÂ #fÂ (->Â contract?Â (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?))))
Â  Â                         Â =Â #f
Â Â val-first-projÂ :Â (or/cÂ #fÂ (->Â contract?Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c))))
Â  Â              Â =Â #f
Â Â get-projectionÂ :Â (->Â contract?Â (->Â blame?Â (->Â any/cÂ any/c)))
Â  Â              Â =Â (Î»Â (c)
                   Â Â (Î»Â (b)
                   Â Â Â Â (Î»Â (x)
                   Â Â Â Â Â Â (ifÂ ((get-first-orderÂ c)Â x)
                   Â Â Â Â Â Â Â Â Â Â x
                   Â Â Â Â Â Â Â Â Â Â (raise-blame-error
                   Â Â Â Â Â Â Â Â Â Â Â bÂ xÂ '(expected:Â "~a"Â given:Â "~e")
                   Â Â Â Â Â Â Â Â Â Â Â (get-nameÂ c)Â x)))))
Â Â strongerÂ :Â (or/cÂ (->Â contract?Â contract?Â boolean?)Â #f)Â =Â #f
Â Â equivalentÂ :Â (or/cÂ #fÂ (->Â contract?Â contract?Â boolean?))Â =Â #f
Â Â generateÂ :Â (->iÂ ([cÂ contract?])
             Â Â Â Â Â [generator
             Â Â Â Â Â Â (c)
             Â Â Â Â Â Â (->Â exact-nonnegative-integer?
             Â Â Â Â Â Â Â Â Â Â (or/cÂ (->Â (or/cÂ contract-random-generate-fail?Â c))
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f))])
Â  Â        Â =Â (Î»Â (c)Â (Î»Â (fuel)Â #f))
Â Â exerciseÂ :Â (->iÂ ([cÂ contract?])
             Â Â Â Â Â [result
             Â Â Â Â Â Â (c)
             Â Â Â Â Â Â (->Â exact-nonnegative-integer?
             Â Â Â Â Â Â Â Â Â Â (values
             Â Â Â Â Â Â Â Â Â Â Â (->Â cÂ void?)
             Â Â Â Â Â Â Â Â Â Â Â (listofÂ contract?)))])
Â  Â        Â =Â (Î»Â (c)Â (Î»Â (fuel)Â (valuesÂ voidÂ '())))
Â Â is-list-contract?Â :Â (->Â contract?Â boolean?)Â =Â (Î»Â (c)Â #f)
procedure
(contract-property?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(chaperone-contract-property?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(flat-contract-property?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(define/final-propÂ headerÂ bodyÂ ...)
Â 
headerÂ =Â main-id
     Â Â |Â (main-idÂ idÂ ...)
     Â Â |Â (main-idÂ idÂ ...Â . id)
syntax
(define/subexpression-pos-propÂ headerÂ bodyÂ ...)
Â 
headerÂ =Â main-id
     Â Â |Â (main-idÂ idÂ ...)
     Â Â |Â (main-idÂ idÂ ...Â . id)
procedure
(contract-stronger?Â c1Â c2)Â ->Â boolean?
Â Â c1Â :Â contract?
Â Â c2Â :Â contract?
procedure
(contract-equivalent?Â c1Â c2)Â ->Â boolean?
Â Â c1Â :Â contract?
Â Â c2Â :Â contract?
procedure
(contract-first-order-passes?Â contractÂ v)Â ->Â boolean?
Â Â contractÂ :Â contract?
Â Â vÂ :Â any/c
procedure
(contract-first-orderÂ c)Â ->Â (->Â any/cÂ boolean?)
Â Â cÂ :Â contract?
procedure
(contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(chaperone-contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(impersonator-contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(flat-contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(list-contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(contract-nameÂ c)Â ->Â any/c
Â Â cÂ :Â contract?
procedure
(value-contractÂ v)Â ->Â (or/cÂ contract?Â #f)
Â Â vÂ :Â has-contract?
procedure
(has-contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(value-blameÂ v)Â ->Â (or/cÂ blame?Â #f)
Â Â vÂ :Â has-blame?
procedure
(has-blame?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(contract-late-neg-projectionÂ c)
Â ->Â (->Â blame?Â (->Â any/cÂ (or/cÂ #fÂ any/c)Â any/c))
Â Â cÂ :Â contract?
procedure
(contract-projectionÂ c)Â ->Â (->Â blame?Â (->Â any/cÂ any/c))
Â Â cÂ :Â contract?
procedure
(contract-val-first-projectionÂ c)
Â ->Â (->Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c)))
Â Â cÂ :Â contract?
procedure
(make-none/cÂ sexp-name)Â ->Â contract?
Â Â sexp-nameÂ :Â any/c
syntax
(recursive-contractÂ contract-exprÂ recursive-contract-optionÂ ...)
(recursive-contractÂ contract-exprÂ typeÂ recursive-contract-optionÂ ...)
Â 
recursive-contract-optionÂ =Â #:list-contract?
                        Â Â |Â #:extra-delay
                        Â Â Â Â Â 
                     typeÂ =Â #:impersonator
                        Â Â |Â #:chaperone
                        Â Â |Â #:flat
syntax
(opt/cÂ contract-exprÂ maybe-name)
Â 
maybe-nameÂ =Â 
         Â Â |Â #:error-nameÂ id
syntax
(define-opt/cÂ (idÂ idÂ ...)Â expr)
value
contract-continuation-mark-keyÂ :Â continuation-mark-key?
procedure
(contract-custom-write-property-procÂ c    Â Â  Â Â 
Â                                    Â p    Â Â  Â Â 
Â                                    Â mode)Â ->Â void?
Â Â cÂ :Â contract?
Â Â pÂ :Â output-port?
Â Â modeÂ :Â (or/cÂ #fÂ #tÂ 0Â 1)
procedure
(rename-contractÂ contractÂ name)Â ->Â contract?
Â Â contractÂ :Â contract?
Â Â nameÂ :Â any/c
syntax
(contract-first-order-okay-to-give-up?)
syntax
(contract-first-order-try-less-hardÂ e)
procedure
(if/cÂ predicateÂ then-contractÂ else-contract)Â ->Â contract?
Â Â predicateÂ :Â (->Â any/cÂ any/c)
Â Â then-contractÂ :Â contract?
Â Â else-contractÂ :Â contract?
value
failure-result/cÂ :Â contract?
procedure
(get/build-val-first-projectionÂ c)
Â ->Â (->Â blame?Â (->Â any/cÂ (->Â any/cÂ any/c)))
Â Â cÂ :Â contract?
procedure
(get/build-late-neg-projectionÂ c)
Â ->Â (->Â blame?Â (->Â any/cÂ any/cÂ any/c))
Â Â cÂ :Â contract?
procedure
(get/build-collapsible-late-neg-projectionÂ c)
Â ->Â (->Â blame?Â (valuesÂ (->Â any/cÂ any/cÂ any/c)Â collapsible-contract?))
Â Â cÂ :Â contract?
value
collapsible-contract-continuation-mark-key
Â :Â continuation-mark-key?
syntax
(with-collapsible-contract-continuation-markÂ bodyÂ ...)
value
prop:collapsible-contractÂ :Â struct-type-property?
procedure
(collapsible-contract?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(mergeÂ new-ccÂ new-negÂ old-ccÂ old-neg)Â ->Â collapsible-contract?
Â Â new-ccÂ :Â collapsible-contract?
Â Â new-negÂ :Â any/c
Â Â old-ccÂ :Â collapsible-contract?
Â Â old-negÂ :Â any/c
procedure
(collapsible-guardÂ ccÂ valÂ neg-party)Â ->Â any/c
Â Â ccÂ :Â collapsible-contract?
Â Â valÂ :Â any/c
Â Â neg-partyÂ :Â any/c
procedure
(collapsible-contract-property?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(build-collapsible-contract-property                                         Â 
Â                                    Â [#:try-mergeÂ try-merge                  Â 
Â                                    Â  #:collapsible-guardÂ collapsible-guard])Â 
Â ->Â collapsible-contract-property?
Â Â try-mergeÂ :Â (or/cÂ #f                                   Â =Â #f
              Â Â Â Â Â Â (->Â collapsible-contract?
              Â Â Â Â Â Â Â Â Â Â any/c
              Â Â Â Â Â Â Â Â Â Â collapsible-contract?
              Â Â Â Â Â Â Â Â Â Â any/c
              Â Â Â Â Â Â Â Â Â Â (or/cÂ #fÂ collapsible-contract?)))
Â Â collapsible-guardÂ :Â (->Â collapsible-contract?Â any/cÂ any/cÂ any/c)
Â  Â                 Â =Â (Î»Â (ccÂ vÂ neg)
                      Â Â (error
                      Â Â Â "internal error: contract does not support `collapsible-guard`"Â cc))
struct
(struct collapsible-ho/c (latest-blame missing-party latest-ctc))
Â Â latest-blameÂ :Â blame?
Â Â missing-partyÂ :Â any/c
Â Â latest-ctcÂ :Â contract?
struct
(structÂ collapsible-leaf/cÂ (proj-list
Â       Â Â                  Â  contract-list
Â       Â Â                  Â  blame-list
Â       Â Â                  Â  missing-party-list))
Â Â proj-listÂ :Â (listofÂ (->Â any/cÂ any/cÂ any/c))
Â Â contract-listÂ :Â (listofÂ contract?)
Â Â blame-listÂ :Â (listofÂ blame?)
Â Â missing-party-listÂ :Â (listofÂ any/c)
value
impersonator-prop:collapsibleÂ :Â impersonator-property?
procedure
(has-impersonator-prop:collapsible?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(get-impersonator-prop:collapsibleÂ v)Â ->Â collapsible-property?
Â Â vÂ :Â any/c
struct
(struct collapsible-property (c-c neg-party ref))
Â Â c-cÂ :Â collapsible-contract?
Â Â neg-partyÂ :Â any/c
Â Â refÂ :Â (or/cÂ #fÂ impersonator?)
struct
(structÂ collapsible-count-propertyÂ collapsible-propertyÂ (count
Â       Â Â                                               Â  prev))
Â Â countÂ :Â natural-number/c
Â Â prevÂ :Â (or/cÂ collapsible-count-property?Â any/c)
struct
(structÂ collapsible-wrapper-propertyÂ collapsible-property
Â       Â (checking-wrapper)
Â Â checking-wrapperÂ :Â impersonator?
procedure
(make-proj-contractÂ nameÂ projÂ first-order)Â ->Â contract?
Â Â nameÂ :Â any/c
Â Â projÂ :Â (or/cÂ (->Â any/c
         Â Â Â Â Â Â Â Â Â Â any/c
         Â Â Â Â Â Â Â Â Â Â (list/cÂ any/cÂ any/c)
         Â Â Â Â Â Â Â Â Â Â contact?
         Â Â Â Â Â Â Â Â Â Â (->Â any/cÂ any/c))
         Â Â Â Â Â Â (->Â any/c
         Â Â Â Â Â Â Â Â Â Â any/c
         Â Â Â Â Â Â Â Â Â Â (list/cÂ any/cÂ any/c)
         Â Â Â Â Â Â Â Â Â Â contact?
         Â Â Â Â Â Â Â Â Â Â boolean?
         Â Â Â Â Â Â Â Â Â Â (->Â any/cÂ any/c)))
Â Â first-orderÂ :Â (->Â any/cÂ boolean?)
procedure
(raise-contract-errorÂ val     Â Â  Â Â 
Â                     Â src     Â Â  Â Â 
Â                     Â pos     Â Â  Â Â 
Â                     Â name    Â Â  Â Â 
Â                     Â fmt     Â Â  Â Â 
Â                     Â argÂ ...)Â ->Â any/c
Â Â valÂ :Â any/c
Â Â srcÂ :Â any/c
Â Â posÂ :Â any/c
Â Â nameÂ :Â any/c
Â Â fmtÂ :Â string?
Â Â argÂ :Â any/c
procedure
(contract-procÂ c)
Â ->Â (->*Â (symbol?Â symbol?Â (or/cÂ syntax?Â (list/cÂ any/cÂ any/c)))
    Â Â Â Â Â (boolean?)
    Â Â Â Â Â (->Â any/cÂ any))
Â Â cÂ :Â contract?
procedure
(contract-random-generateÂ ctcÂ [fuelÂ fail])Â ->Â any/c
Â Â ctcÂ :Â contract?
Â Â fuelÂ :Â 5Â =Â exact-nonnegative-integer?
Â Â failÂ :Â (or/cÂ #fÂ (->Â any)Â (->Â boolean?Â any))Â =Â #f
procedure
(contract-exerciseÂ [#:fuelÂ fuel         Â Â  Â Â 
Â                  Â  #:shuffle?Â shuffle?]Â Â  Â Â 
Â                  Â  valÂ ...+)           Â ->Â void?
Â Â fuelÂ :Â exact-nonnegative-integer?Â =Â 10
Â Â shuffle?Â :Â any/cÂ =Â #f
Â Â valÂ :Â any/c
procedure
(contract-random-generate/chooseÂ cÂ fuel)Â ->Â (or/cÂ #fÂ (->Â c))
Â Â cÂ :Â contract?
Â Â fuelÂ :Â exact-nonnegative-integer?
value
contract-random-generate-failÂ :Â contract-random-generate-fail?
procedure
(contract-random-generate-fail?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(contract-random-generate-env?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(contract-random-generate-stashÂ envÂ cÂ v)Â ->Â void?
Â Â envÂ :Â contract-random-generate-env?
Â Â cÂ :Â contract?
Â Â vÂ :Â c
procedure
(contract-random-generate-get-current-environment)
Â ->Â contract-random-generate-env?
syntax
(matchÂ val-exprÂ clauseÂ ...)
Â 
clauseÂ =Â [patÂ bodyÂ ...+]
     Â Â |Â [patÂ (=>Â id)Â bodyÂ ...+]
     Â Â |Â [patÂ #:whenÂ cond-exprÂ bodyÂ ...+]
syntax
(match*Â (val-exprÂ ...+)Â clause*Â ...)
Â 
clause*Â =Â [(patÂ ...+)Â bodyÂ ...+]
      Â Â |Â [(patÂ ...+)Â (=>Â id)Â bodyÂ ...+]
      Â Â |Â [(patÂ ...+)Â #:whenÂ cond-exprÂ bodyÂ ...+]
syntax
(match/valuesÂ exprÂ clause*Â clause*Â ...)
syntax
(define/matchÂ (headÂ args)
Â Â match*-clauseÂ ...)
Â 
         headÂ =Â id
            Â Â |Â (headÂ args)
            Â Â Â Â Â 
         argsÂ =Â argÂ ...
            Â Â |Â argÂ ...Â .Â rest-id
            Â Â Â Â Â 
          argÂ =Â arg-id
            Â Â |Â [arg-idÂ default-expr]
            Â Â |Â keywordÂ arg-id
            Â Â |Â keywordÂ [arg-idÂ default-expr]
            Â Â Â Â Â 
match*-clauseÂ =Â [(patÂ ...+)Â bodyÂ ...+]
            Â Â |Â [(patÂ ...+)Â (=>Â id)Â bodyÂ ...+]
            Â Â |Â [(patÂ ...+)Â #:whenÂ cond-exprÂ bodyÂ ...+]
syntax
(match-lambdaÂ clauseÂ ...)
syntax
(match-lambda*Â clauseÂ ...)
syntax
(match-lambda**Â clause*Â ...)
syntax
(match-letÂ ([patÂ expr]Â ...)Â bodyÂ ...+)
syntax
(match-let*Â ([patÂ expr]Â ...)Â bodyÂ ...+)
syntax
(match-let-valuesÂ ([(patÂ ...)Â expr]Â ...)Â bodyÂ ...+)
syntax
(match-let*-valuesÂ ([(patÂ ...)Â expr]Â ...)Â bodyÂ ...+)
syntax
(match-letrecÂ ([patÂ expr]Â ...)Â bodyÂ ...+)
syntax
(match-letrec-valuesÂ ([(patÂ ...)Â expr]Â ...)Â bodyÂ ...+)
syntax
(match-defineÂ patÂ expr)
syntax
(match-define-valuesÂ (patÂ patsÂ ...)Â expr)
procedure
(exn:misc:match?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(failure-cont)
syntax
(define-match-expanderÂ idÂ proc-expr)
(define-match-expanderÂ idÂ proc-exprÂ proc-expr)
value
prop:match-expanderÂ :Â struct-type-property?
value
prop:legacy-match-expanderÂ :Â struct-type-property?
procedure
(match-expander?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(legacy-match-expander?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(syntax-local-match-introduceÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
parameter
(match-equality-test)Â ->Â (any/cÂ any/cÂ . -> .Â any)
(match-equality-testÂ comp-proc)Â ->Â void?
Â Â comp-procÂ :Â (any/cÂ any/cÂ . -> .Â any)
syntax
(match/derivedÂ val-exprÂ original-datumÂ clauseÂ ...)
syntax
(match*/derivedÂ (val-exprÂ ...)Â original-datumÂ clause*Â ...)
syntax
(==Â valÂ comparator)
(==Â val)
syntax
(struct*Â struct-idÂ ([fieldÂ pat]Â ...))
procedure
(valuesÂ vÂ ...)Â ->Â any
Â Â vÂ :Â any/c
procedure
(call-with-valuesÂ generatorÂ receiver)Â ->Â any
Â Â generatorÂ :Â (->Â any)
Â Â receiverÂ :Â procedure?
procedure
(raiseÂ vÂ [barrier?])Â ->Â any
Â Â vÂ :Â any/c
Â Â barrier?Â :Â any/cÂ =Â #t
procedure
(errorÂ message-sym)Â ->Â any
Â Â message-symÂ :Â symbol?
(errorÂ message-strÂ vÂ ...)Â ->Â any
Â Â message-strÂ :Â string?
Â Â vÂ :Â any/c
(errorÂ who-symÂ format-strÂ vÂ ...)Â ->Â any
Â Â who-symÂ :Â symbol?
Â Â format-strÂ :Â string?
Â Â vÂ :Â any/c
procedure
(raise-user-errorÂ message-sym)Â ->Â any
Â Â message-symÂ :Â symbol?
(raise-user-errorÂ message-strÂ vÂ ...)Â ->Â any
Â Â message-strÂ :Â string?
Â Â vÂ :Â any/c
(raise-user-errorÂ who-symÂ format-strÂ vÂ ...)Â ->Â any
Â Â who-symÂ :Â symbol?
Â Â format-strÂ :Â string?
Â Â vÂ :Â any/c
procedure
(raise-argument-errorÂ nameÂ expectedÂ v)Â ->Â any
Â Â nameÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â vÂ :Â any/c
(raise-argument-errorÂ name    Â Â  Â Â 
Â                     Â expectedÂ Â  Â Â 
Â                     Â bad-pos Â Â  Â Â 
Â                     Â vÂ ...)  Â ->Â any
Â Â nameÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â bad-posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(raise-argument-error*Â nameÂ realmÂ expectedÂ v)Â ->Â any
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â vÂ :Â any/c
(raise-argument-error*Â name    Â Â  Â Â 
Â                      Â realm   Â Â  Â Â 
Â                      Â expectedÂ Â  Â Â 
Â                      Â bad-pos Â Â  Â Â 
Â                      Â vÂ ...)  Â ->Â any
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â bad-posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(raise-result-errorÂ nameÂ expectedÂ v)Â ->Â any
Â Â nameÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â vÂ :Â any/c
(raise-result-errorÂ name    Â Â  Â Â 
Â                   Â expectedÂ Â  Â Â 
Â                   Â bad-pos Â Â  Â Â 
Â                   Â vÂ ...)  Â ->Â any
Â Â nameÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â bad-posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(raise-result-error*Â nameÂ realmÂ expectedÂ v)Â ->Â any
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â vÂ :Â any/c
(raise-result-error*Â name    Â Â  Â Â 
Â                    Â realm   Â Â  Â Â 
Â                    Â expectedÂ Â  Â Â 
Â                    Â bad-pos Â Â  Â Â 
Â                    Â vÂ ...)  Â ->Â any
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â bad-posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(raise-arguments-errorÂ name   Â Â  Â Â 
Â                      Â messageÂ Â  Â Â 
Â                      Â field  Â Â  Â Â 
Â                      Â vÂ ...  Â Â  Â Â 
Â                      Â ...)   Â ->Â any
Â Â nameÂ :Â symbol?
Â Â messageÂ :Â string?
Â Â fieldÂ :Â string?
Â Â vÂ :Â any/c
procedure
(raise-arguments-error*Â name   Â Â  Â Â 
Â                       Â realm  Â Â  Â Â 
Â                       Â messageÂ Â  Â Â 
Â                       Â field  Â Â  Â Â 
Â                       Â vÂ ...  Â Â  Â Â 
Â                       Â ...)   Â ->Â any
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?
Â Â messageÂ :Â string?
Â Â fieldÂ :Â string?
Â Â vÂ :Â any/c
procedure
(raise-range-errorÂ  name             Â Â  Â Â 
Â                  Â  type-description Â Â  Â Â 
Â                  Â  index-prefix     Â Â  Â Â 
Â                  Â  index            Â Â  Â Â 
Â                  Â  in-value         Â Â  Â Â 
Â                  Â  lower-bound      Â Â  Â Â 
Â                  Â  upper-bound      Â Â  Â Â 
Â                  Â [alt-lower-bound])Â ->Â any
Â Â nameÂ :Â symbol?
Â Â type-descriptionÂ :Â string?
Â Â index-prefixÂ :Â string?
Â Â indexÂ :Â exact-integer?
Â Â in-valueÂ :Â any/c
Â Â lower-boundÂ :Â exact-integer?
Â Â upper-boundÂ :Â exact-integer?
Â Â alt-lower-boundÂ :Â (or/cÂ #fÂ exact-integer?)Â =Â #f
procedure
(raise-range-error*Â  name             Â Â  Â Â 
Â                   Â  realm            Â Â  Â Â 
Â                   Â  type-description Â Â  Â Â 
Â                   Â  index-prefix     Â Â  Â Â 
Â                   Â  index            Â Â  Â Â 
Â                   Â  in-value         Â Â  Â Â 
Â                   Â  lower-bound      Â Â  Â Â 
Â                   Â  upper-bound      Â Â  Â Â 
Â                   Â [alt-lower-bound])Â ->Â any
Â Â nameÂ :Â symbol?
Â Â realmÂ :Â symbol?
Â Â type-descriptionÂ :Â string?
Â Â index-prefixÂ :Â string?
Â Â indexÂ :Â exact-integer?
Â Â in-valueÂ :Â any/c
Â Â lower-boundÂ :Â exact-integer?
Â Â upper-boundÂ :Â exact-integer?
Â Â alt-lower-boundÂ :Â (or/cÂ #fÂ exact-integer?)Â =Â #f
procedure
(raise-type-errorÂ nameÂ expectedÂ v)Â ->Â any
Â Â nameÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â vÂ :Â any/c
(raise-type-errorÂ nameÂ expectedÂ bad-posÂ vÂ ...)Â ->Â any
Â Â nameÂ :Â symbol?
Â Â expectedÂ :Â string?
Â Â bad-posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(raise-mismatch-errorÂ name   Â Â  Â Â 
Â                     Â messageÂ Â  Â Â 
Â                     Â vÂ ...+ Â Â  Â Â 
Â                     Â ...+)  Â ->Â any
Â Â nameÂ :Â symbol?
Â Â messageÂ :Â string?
Â Â vÂ :Â any/c
procedure
(raise-arity-errorÂ nameÂ arity-vÂ arg-vÂ ...)Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â procedure?)
Â Â arity-vÂ :Â (or/cÂ exact-nonnegative-integer?
            Â Â Â Â Â Â arity-at-least?
            Â Â Â Â Â Â (listof
            Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?
            Â Â Â Â Â Â Â Â Â Â Â Â Â arity-at-least?)))
Â Â arg-vÂ :Â any/c
procedure
(raise-arity-error*Â name      Â Â  Â Â 
Â                   Â realm     Â Â  Â Â 
Â                   Â arity-v   Â Â  Â Â 
Â                   Â arg-vÂ ...)Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â procedure?)
Â Â realmÂ :Â symbol?
Â Â arity-vÂ :Â (or/cÂ exact-nonnegative-integer?
            Â Â Â Â Â Â arity-at-least?
            Â Â Â Â Â Â (listof
            Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?
            Â Â Â Â Â Â Â Â Â Â Â Â Â arity-at-least?)))
Â Â arg-vÂ :Â any/c
procedure
(raise-arity-mask-errorÂ nameÂ maskÂ arg-vÂ ...)Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â procedure?)
Â Â maskÂ :Â exact-integer?
Â Â arg-vÂ :Â any/c
procedure
(raise-arity-mask-error*Â name      Â Â  Â Â 
Â                        Â realm     Â Â  Â Â 
Â                        Â mask      Â Â  Â Â 
Â                        Â arg-vÂ ...)Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â procedure?)
Â Â realmÂ :Â symbol?
Â Â maskÂ :Â exact-integer?
Â Â arg-vÂ :Â any/c
procedure
(raise-result-arity-errorÂ name         Â Â  Â Â 
Â                         Â arity-v      Â Â  Â Â 
Â                         Â detail-str   Â Â  Â Â 
Â                         Â result-vÂ ...)Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â #f)
Â Â arity-vÂ :Â exact-nonnegative-integer?
Â Â detail-strÂ :Â (or/cÂ string?Â #f)
Â Â result-vÂ :Â any/c
procedure
(raise-result-arity-error*Â name         Â Â  Â Â 
Â                          Â realm        Â Â  Â Â 
Â                          Â arity-v      Â Â  Â Â 
Â                          Â detail-str   Â Â  Â Â 
Â                          Â result-vÂ ...)Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â #f)
Â Â realmÂ :Â symbol?
Â Â arity-vÂ :Â exact-nonnegative-integer?
Â Â detail-strÂ :Â (or/cÂ string?Â #f)
Â Â result-vÂ :Â any/c
procedure
(raise-syntax-errorÂ  name          Â Â  Â Â 
Â                   Â  message       Â Â  Â Â 
Â                   Â [expr          Â Â  Â Â 
Â                   Â  sub-expr      Â Â  Â Â 
Â                   Â  extra-sources Â Â  Â Â 
Â                   Â  message-suffixÂ Â  Â Â 
Â                   Â  #:exnÂ exn])   Â ->Â any
Â Â nameÂ :Â (or/cÂ symbol?Â #f)
Â Â messageÂ :Â string?
Â Â exprÂ :Â any/cÂ =Â #f
Â Â sub-exprÂ :Â any/cÂ =Â #f
Â Â extra-sourcesÂ :Â (listofÂ syntax?)Â =Â null
Â Â message-suffixÂ :Â string?Â =Â ""
Â Â exnÂ :Â (->Â string?               Â =Â exn:fail:syntax
        Â Â Â Â continuation-mark-set?
        Â Â Â Â (listofÂ syntax?)
        Â Â Â Â exn:fail:syntax?)
procedure
(unquoted-printing-string?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(unquoted-printing-stringÂ s)Â ->Â unquoted-printing-string?
Â Â sÂ :Â string?
procedure
(unquoted-printing-string-valueÂ ups)Â ->Â string?
Â Â upsÂ :Â unquoted-printing-string?
procedure
(call-with-exception-handlerÂ fÂ thunk)Â ->Â any
Â Â fÂ :Â (any/cÂ . -> .Â any)
Â Â thunkÂ :Â (->Â any)
parameter
(uncaught-exception-handler)Â ->Â (any/cÂ . -> .Â any)
(uncaught-exception-handlerÂ f)Â ->Â void?
Â Â fÂ :Â (any/cÂ . -> .Â any)
syntax
(with-handlersÂ ([pred-exprÂ handler-expr]Â ...)
Â Â bodyÂ ...+)
syntax
(with-handlers*Â ([pred-exprÂ handler-expr]Â ...)
Â Â bodyÂ ...+)
parameter
(error-escape-handler)Â ->Â (->Â any)
(error-escape-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â any)
parameter
(error-display-handler)Â ->Â (string?Â any/cÂ . -> .Â any)
(error-display-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (string?Â any/cÂ . -> .Â any)
parameter
(error-print-width)Â ->Â (and/cÂ exact-integer?Â (>=/cÂ 3))
(error-print-widthÂ width)Â ->Â void?
Â Â widthÂ :Â (and/cÂ exact-integer?Â (>=/cÂ 3))
parameter
(error-print-context-length)Â ->Â exact-nonnegative-integer?
(error-print-context-lengthÂ cnt)Â ->Â void?
Â Â cntÂ :Â exact-nonnegative-integer?
parameter
(error-print-source-location)Â ->Â boolean?
(error-print-source-locationÂ include?)Â ->Â void?
Â Â include?Â :Â any/c
parameter
(error-value->string-handler)
Â ->Â (any/cÂ exact-nonnegative-integer?
    Â Â Â Â Â Â Â . -> .
    Â Â Â Â Â Â Â string?)
(error-value->string-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ exact-nonnegative-integer?
         Â Â Â Â Â Â Â . -> .
         Â Â Â Â Â Â Â string?)
parameter
(error-syntax->string-handler)
Â ->Â (any/cÂ (or/cÂ exact-nonnegative-integer?Â #f)
    Â Â Â Â Â Â . -> .
    Â Â Â Â Â Â string?)
(error-syntax->string-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ (or/cÂ exact-nonnegative-integer?Â #f)
         Â Â Â Â Â Â . -> .
         Â Â Â Â Â Â string?)
struct
(structÂ exnÂ (message continuation-marks)
Â Â Â Â #:extra-constructor-nameÂ make-exn
Â Â Â Â #:transparent)
Â Â messageÂ :Â string?
Â Â continuation-marksÂ :Â continuation-mark-set?
struct
(structÂ exn:failÂ exnÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:contractÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:contract
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:contract:arityÂ exn:fail:contractÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:contract:arity
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:contract:divide-by-zeroÂ exn:fail:contractÂ ()
Â Â Â Â #:extra-constructor-name
Â Â Â Â make-exn:fail:contract:divide-by-zero
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:contract:non-fixnum-resultÂ exn:fail:contractÂ ()
Â Â Â Â #:extra-constructor-name
Â Â Â Â make-exn:fail:contract:non-fixnum-result
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:contract:continuationÂ exn:fail:contractÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:contract:continuation
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:contract:variableÂ exn:fail:contractÂ (id)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:contract:variable
Â Â Â Â #:transparent)
Â Â idÂ :Â symbol?
struct
(structÂ exn:fail:syntaxÂ exn:failÂ (exprs)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:syntax
Â Â Â Â #:transparent)
Â Â exprsÂ :Â (listofÂ syntax?)
struct
(structÂ exn:fail:syntax:unboundÂ exn:fail:syntaxÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:syntax:unbound
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:syntax:missing-moduleÂ exn:fail:syntaxÂ (path)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:syntax:missing-module
Â Â Â Â #:transparent)
Â Â pathÂ :Â module-path?
struct
(structÂ exn:fail:readÂ exn:failÂ (srclocs)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:read
Â Â Â Â #:transparent)
Â Â srclocsÂ :Â (listofÂ srcloc?)
struct
(structÂ exn:fail:read:eofÂ exn:fail:readÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:read:eof
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:read:non-charÂ exn:fail:readÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:read:non-char
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:filesystemÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:filesystem
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:filesystem:existsÂ exn:fail:filesystemÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:filesystem:exists
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:filesystem:versionÂ exn:fail:filesystemÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:filesystem:version
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:filesystem:errnoÂ exn:fail:filesystemÂ (errno)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:filesystem:errno
Â Â Â Â #:transparent)
Â Â errnoÂ :Â (cons/cÂ exact-integer?Â (or/cÂ 'posixÂ 'windowsÂ 'gai))
struct
(structÂ exn:fail:filesystem:missing-moduleÂ exn:fail:filesystem
Â       Â (path)
Â Â Â Â #:extra-constructor-name
Â Â Â Â make-exn:fail:filesystem:missing-module
Â Â Â Â #:transparent)
Â Â pathÂ :Â module-path?
struct
(structÂ exn:fail:networkÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:network
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:network:errnoÂ exn:fail:networkÂ (errno)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:network:errno
Â Â Â Â #:transparent)
Â Â errnoÂ :Â (cons/cÂ exact-integer?Â (or/cÂ 'posixÂ 'windowsÂ 'gai))
struct
(structÂ exn:fail:out-of-memoryÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:out-of-memory
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:unsupportedÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:unsupported
Â Â Â Â #:transparent)
struct
(structÂ exn:fail:userÂ exn:failÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:user
Â Â Â Â #:transparent)
struct
(structÂ exn:breakÂ exnÂ (continuation)
Â Â Â Â #:extra-constructor-nameÂ make-exn:break
Â Â Â Â #:transparent)
Â Â continuationÂ :Â continuation?
struct
(structÂ exn:break:hang-upÂ exn:breakÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:break:hang-up
Â Â Â Â #:transparent)
struct
(structÂ exn:break:terminateÂ exn:breakÂ ()
Â Â Â Â #:extra-constructor-nameÂ make-exn:break:terminate
Â Â Â Â #:transparent)
value
prop:exn:srclocsÂ :Â struct-type-property?
procedure
(exn:srclocs?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(exn:srclocs-accessorÂ v)
Â ->Â (exn:srclocs?Â . -> .Â (listofÂ srcloc))
Â Â vÂ :Â exn:srclocs?
struct
(structÂ srclocÂ (source line column position span)
Â Â Â Â #:extra-constructor-nameÂ make-srcloc
Â Â Â Â #:transparent)
Â Â sourceÂ :Â any/c
Â Â lineÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â columnÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â positionÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â spanÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
procedure
(srcloc->stringÂ srcloc)Â ->Â (or/cÂ string?Â #f)
Â Â srclocÂ :Â srcloc?
value
prop:exn:missing-moduleÂ :Â struct-type-property?
procedure
(exn:missing-module?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(exn:missing-module-accessorÂ v)
Â ->Â (exn:missing-module?Â . -> .Â module-path?)
Â Â vÂ :Â exn:srclocs?
procedure
(exn->stringÂ exn)Â ->Â string?
Â Â exnÂ :Â (or/cÂ exn?Â any/c)
procedure
(error-message->adjusted-stringÂ name          Â Â  Â Â 
Â                               Â name-realm    Â Â  Â Â 
Â                               Â message       Â Â  Â Â 
Â                               Â message-realm)Â ->Â string?
Â Â nameÂ :Â (or/cÂ symbol?Â #f)
Â Â name-realmÂ :Â symbol?
Â Â messageÂ :Â string?
Â Â message-realmÂ :Â symbol?
procedure
(error-contract->adjusted-stringÂ contract-str   Â Â  Â Â 
Â                                Â contract-realm)Â ->Â string?
Â Â contract-strÂ :Â string?
Â Â contract-realmÂ :Â symbol?
parameter
(current-error-message-adjuster)
Â ->Â (symbol?Â . -> .Â (or/cÂ procedure?Â #f))
(current-error-message-adjusterÂ proc)Â ->Â void?
Â Â procÂ :Â (symbol?Â . -> .Â (or/cÂ procedure?Â #f))
value
error-message-adjuster-keyÂ :Â symbol?
procedure
(promise?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(delayÂ bodyÂ ...+)
syntax
(lazyÂ bodyÂ ...+)
procedure
(forceÂ v)Â ->Â any
Â Â vÂ :Â any/c
procedure
(promise-forced?Â promise)Â ->Â boolean?
Â Â promiseÂ :Â promise?
procedure
(promise-running?Â promise)Â ->Â boolean?
Â Â promiseÂ :Â promise?
syntax
(delay/nameÂ bodyÂ ...+)
procedure
(promise/name?Â promise)Â ->Â boolean?
Â Â promiseÂ :Â any/c
syntax
(delay/strictÂ bodyÂ ...+)
syntax
(delay/syncÂ bodyÂ ...+)
syntax
(delay/threadÂ body/optionÂ ...+)
Â 
body/optionÂ =Â body
          Â Â |Â #:groupÂ thread-group-expr
syntax
(delay/idleÂ body/optionÂ ...+)
Â 
body/optionÂ =Â body
          Â Â |Â #:wait-forÂ wait-evt-expr
          Â Â |Â #:work-whileÂ while-evt-expr
          Â Â |Â #:tickÂ tick-secs-expr
          Â Â |Â #:useÂ use-ratio-expr
syntax
(for/list/concurrentÂ maybe-groupÂ (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
Â 
maybe-groupÂ =Â 
          Â Â |Â #:groupÂ thread-group-expr
Â 
Â Â thread-group-exprÂ :Â thread-group?
syntax
(for*/list/concurrentÂ maybe-groupÂ (for-clauseÂ ...)
Â Â body-or-breakÂ ...Â body)
procedure
(call-with-continuation-promptÂ  proc      Â Â  Â Â 
Â                              Â [prompt-tagÂ Â  Â Â 
Â                              Â  handler]  Â Â  Â Â 
Â                              Â  argÂ ...)  Â ->Â any
Â Â procÂ :Â procedure?
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
Â Â handlerÂ :Â (or/cÂ procedure?Â #f)Â =Â #f
Â Â argÂ :Â any/c
procedure
(abort-current-continuationÂ prompt-tagÂ Â  Â Â 
Â                           Â vÂ ...)    Â ->Â any
Â Â prompt-tagÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(make-continuation-prompt-tag)Â ->Â continuation-prompt-tag?
(make-continuation-prompt-tagÂ name)Â ->Â continuation-prompt-tag?
Â Â nameÂ :Â symbol?
procedure
(default-continuation-prompt-tag)Â ->Â continuation-prompt-tag?
procedure
(call-with-current-continuationÂ  proc        Â Â  Â Â 
Â                               Â [prompt-tag])Â ->Â any
Â Â procÂ :Â (continuation?Â . -> .Â any)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(call/ccÂ procÂ [prompt-tag])Â ->Â any
Â Â procÂ :Â (continuation?Â . -> .Â any)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(call-with-composable-continuationÂ  proc        Â Â  Â Â 
Â                                  Â [prompt-tag])Â ->Â any
Â Â procÂ :Â (continuation?Â . -> .Â any)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(call-with-escape-continuationÂ proc)Â ->Â any
Â Â procÂ :Â (continuation?Â . -> .Â any)
procedure
(call/ecÂ proc)Â ->Â any
Â Â procÂ :Â (continuation?Â . -> .Â any)
procedure
(call-in-continuationÂ kÂ proc)Â ->Â any
Â Â kÂ :Â continuation?
Â Â procÂ :Â (->Â any)
syntax
(let/ccÂ kÂ bodyÂ ...+)
syntax
(let/ecÂ kÂ bodyÂ ...+)
procedure
(call-with-continuation-barrierÂ thunk)Â ->Â any
Â Â thunkÂ :Â (->Â any)
procedure
(continuation-prompt-available?Â  prompt-tagÂ Â  Â Â 
Â                               Â [cont])    Â ->Â any
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â Â contÂ :Â continuation?Â =Â (call/ccÂ values)
procedure
(continuation?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(continuation-prompt-tag?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(dynamic-windÂ pre-thunk  Â Â  Â Â 
Â             Â value-thunkÂ Â  Â Â 
Â             Â post-thunk)Â ->Â any
Â Â pre-thunkÂ :Â (->Â any)
Â Â value-thunkÂ :Â (->Â any)
Â Â post-thunkÂ :Â (->Â any)
procedure
(call/promptÂ procÂ [prompt-tagÂ handler]Â argÂ ...)Â ->Â any
Â Â procÂ :Â procedure?
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
Â Â handlerÂ :Â (or/cÂ procedure?Â #f)Â =Â #f
Â Â argÂ :Â any/c
procedure
(abort/ccÂ prompt-tagÂ vÂ ...)Â ->Â any
Â Â prompt-tagÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(call/compÂ procÂ [prompt-tag])Â ->Â any
Â Â procÂ :Â (continuation?Â . -> .Â any)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(abortÂ vÂ ...)Â ->Â any
Â Â vÂ :Â any/c
syntax
(%Â expr)
(%Â exprÂ handler-expr)
(%Â exprÂ handler-exprÂ #:tagÂ tag-expr)
procedure
(fcontrolÂ vÂ #:tagÂ prompt-tag)Â ->Â any
Â Â vÂ :Â any/c
Â Â prompt-tagÂ :Â (default-continuation-prompt-tag)
syntax
(promptÂ exprÂ ...+)
syntax
(controlÂ idÂ exprÂ ...+)
syntax
(prompt-atÂ prompt-tag-exprÂ exprÂ ...+)
syntax
(control-atÂ prompt-tag-exprÂ idÂ exprÂ ...+)
syntax
(resetÂ exprÂ ...+)
syntax
(shiftÂ idÂ exprÂ ...+)
syntax
(reset-atÂ prompt-tag-exprÂ exprÂ ...+)
syntax
(shift-atÂ prompt-tag-exprÂ identifierÂ exprÂ ...+)
syntax
(prompt0Â exprÂ ...+)
syntax
(reset0Â exprÂ ...+)
syntax
(control0Â idÂ exprÂ ...+)
syntax
(shift0Â idÂ exprÂ ...+)
syntax
(prompt0-atÂ prompt-tag-exprÂ exprÂ ...+)
syntax
(reset0-atÂ prompt-tag-exprÂ exprÂ ...+)
syntax
(control0-atÂ prompt-tag-exprÂ idÂ exprÂ ...+)
syntax
(shift0-atÂ prompt-tag-exprÂ idÂ exprÂ ...+)
procedure
(spawnÂ proc)Â ->Â any
Â Â procÂ :Â ((any/cÂ . -> .Â any)Â . -> .Â any)
procedure
(splitterÂ proc)Â ->Â any
Â Â procÂ :Â (((->Â any)Â . -> .Â any)
         Â ((continuation?Â . -> .Â any)Â . -> .Â any)
         Â . -> .Â any)
procedure
(new-prompt)Â ->Â any
syntax
(setÂ prompt-exprÂ exprÂ ...+)
syntax
(cuptoÂ prompt-exprÂ idÂ exprÂ ...+)
procedure
(continuation-marksÂ contÂ [prompt-tag])Â ->Â continuation-mark-set?
Â Â contÂ :Â (or/cÂ continuation?Â thread?Â #f)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(current-continuation-marksÂ [prompt-tag])
Â ->Â continuation-mark-set?
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(continuation-mark-set->listÂ  mark-set    Â Â  Â Â 
Â                            Â  key-v       Â Â  Â Â 
Â                            Â [prompt-tag])Â ->Â list?
Â Â mark-setÂ :Â (or/cÂ continuation-mark-set?Â #f)
Â Â key-vÂ :Â any/c
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(continuation-mark-set->list*Â  mark-set    Â Â  Â Â 
Â                             Â  key-list    Â Â  Â Â 
Â                             Â [none-v      Â Â  Â Â 
Â                             Â  prompt-tag])Â ->Â (listofÂ vector?)
Â Â mark-setÂ :Â (or/cÂ continuation-mark-set?Â #f)
Â Â key-listÂ :Â (listofÂ any/c)
Â Â none-vÂ :Â any/cÂ =Â #f
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(continuation-mark-set->iteratorÂ  mark-set    Â 
Â                                Â  key-list    Â 
Â                                Â [none-v      Â 
Â                                Â  prompt-tag])Â 
Â ->Â (->Â (valuesÂ (or/cÂ vector?Â #f)Â procedure?))
Â Â mark-setÂ :Â (or/cÂ continuation-mark-set?Â #f)
Â Â key-listÂ :Â (listofÂ any/c)
Â Â none-vÂ :Â any/cÂ =Â #f
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(continuation-mark-set-firstÂ  mark-set    Â Â  Â Â 
Â                            Â  key-v       Â Â  Â Â 
Â                            Â [none-v      Â Â  Â Â 
Â                            Â  prompt-tag])Â ->Â any
Â Â mark-setÂ :Â (or/cÂ continuation-mark-set?Â #f)
Â Â key-vÂ :Â any/c
Â Â none-vÂ :Â any/cÂ =Â #f
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â  Â          Â =Â (default-continuation-prompt-tag)
procedure
(call-with-immediate-continuation-markÂ  key-v      Â Â  Â Â 
Â                                      Â  proc       Â Â  Â Â 
Â                                      Â [default-v])Â ->Â any
Â Â key-vÂ :Â any/c
Â Â procÂ :Â (any/cÂ . -> .Â any)
Â Â default-vÂ :Â any/cÂ =Â #f
procedure
(make-continuation-mark-key)Â ->Â continuation-mark-key?
(make-continuation-mark-keyÂ sym)Â ->Â continuation-mark-key?
Â Â symÂ :Â symbol?
procedure
(continuation-mark-key?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(continuation-mark-set?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(continuation-mark-set->contextÂ  mark-set Â Â  Â Â 
Â                               Â [realms?])Â ->Â list?
Â Â mark-setÂ :Â continuation-mark-set?
Â Â realms?Â :Â any/cÂ =Â #f
procedure
(break-enabled)Â ->Â boolean?
(break-enabledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
syntax
(parameterize-breakÂ boolean-exprÂ bodyÂ ...+)
procedure
(current-break-parameterization)Â ->Â break-parameterization?
procedure
(call-with-break-parameterizationÂ break-paramÂ Â  Â Â 
Â                                 Â thunk)     Â ->Â any
Â Â break-paramÂ :Â break-parameterization?
Â Â thunkÂ :Â (->Â any)
procedure
(break-parameterization?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(exitÂ [v])Â ->Â any
Â Â vÂ :Â any/cÂ =Â #t
parameter
(exit-handler)Â ->Â (any/cÂ . -> .Â any)
(exit-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ . -> .Â any)
parameter
(executable-yield-handler)Â ->Â (byte?Â . -> .Â any)
(executable-yield-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (byte?Â . -> .Â any)
procedure
(assert-unreachable)Â ->Â none/c
syntax
(with-assert-unreachable
Â Â bodyÂ ...+)
procedure
(threadÂ thunk)Â ->Â thread?
Â Â thunkÂ :Â (->Â any)
procedure
(thread?Â v)Â ->Â thread?
Â Â vÂ :Â any/c
procedure
(current-thread)Â ->Â thread?
procedure
(thread/suspend-to-killÂ thunk)Â ->Â thread?
Â Â thunkÂ :Â (->Â any)
procedure
(call-in-nested-threadÂ thunkÂ [cust])Â ->Â any
Â Â thunkÂ :Â (->Â any)
Â Â custÂ :Â custodian?Â =Â (current-custodian)
procedure
(thread-suspendÂ thd)Â ->Â void?
Â Â thdÂ :Â thread?
procedure
(thread-resumeÂ thdÂ [benefactor])Â ->Â void?
Â Â thdÂ :Â thread?
Â Â benefactorÂ :Â (or/cÂ thread?Â custodian?Â #f)Â =Â #f
procedure
(kill-threadÂ thd)Â ->Â void?
Â Â thdÂ :Â thread?
procedure
(break-threadÂ thdÂ [kind])Â ->Â void?
Â Â thdÂ :Â thread?
Â Â kindÂ :Â (or/cÂ #fÂ 'hang-upÂ 'terminate)Â =Â #f
procedure
(sleepÂ [secs])Â ->Â void?
Â Â secsÂ :Â (>=/cÂ 0)Â =Â 0
procedure
(thread-running?Â thd)Â ->Â any
Â Â thdÂ :Â thread?
procedure
(thread-dead?Â thd)Â ->Â any
Â Â thdÂ :Â thread?
procedure
(thread-waitÂ thd)Â ->Â void?
Â Â thdÂ :Â thread?
procedure
(thread-dead-evtÂ thd)Â ->Â evt?
Â Â thdÂ :Â thread?
procedure
(thread-resume-evtÂ thd)Â ->Â evt?
Â Â thdÂ :Â thread?
procedure
(thread-suspend-evtÂ thd)Â ->Â evt?
Â Â thdÂ :Â thread?
procedure
(thread-sendÂ thdÂ vÂ [fail-thunk])Â ->Â any
Â Â thdÂ :Â thread?
Â Â vÂ :Â any/c
Â Â fail-thunkÂ :Â (or/cÂ (->Â any)Â #f)
Â  Â          Â =Â (lambdaÂ ()Â (raise-mismatch-errorÂ ....))
procedure
(thread-receive)Â ->Â any/c
procedure
(thread-try-receive)Â ->Â any/c
procedure
(thread-receive-evt)Â ->Â evt?
procedure
(thread-rewind-receiveÂ lst)Â ->Â void?
Â Â lstÂ :Â list?
procedure
(evt?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(syncÂ evtÂ ...)Â ->Â any
Â Â evtÂ :Â evt?
procedure
(sync/timeoutÂ timeoutÂ evtÂ ...)Â ->Â any
Â Â timeoutÂ :Â (or/cÂ #fÂ (and/cÂ real?Â (not/cÂ negative?))Â (->Â any))
Â Â evtÂ :Â evt?
procedure
(sync/enable-breakÂ evtÂ ...)Â ->Â any
Â Â evtÂ :Â evt?
procedure
(sync/timeout/enable-breakÂ timeoutÂ evtÂ ...)Â ->Â any
Â Â timeoutÂ :Â (or/cÂ #fÂ (and/cÂ real?Â (not/cÂ negative?))Â (->Â any))
Â Â evtÂ :Â evt?
procedure
(choice-evtÂ evtÂ ...)Â ->Â evt?
Â Â evtÂ :Â evt?
procedure
(wrap-evtÂ evtÂ wrap)Â ->Â evt?
Â Â evtÂ :Â evt?
Â Â wrapÂ :Â (any/cÂ ...Â . -> .Â any)
procedure
(handle-evtÂ evtÂ handle)Â ->Â handle-evt?
Â Â evtÂ :Â evt?
Â Â handleÂ :Â (any/cÂ ...Â . -> .Â any)
procedure
(guard-evtÂ maker)Â ->Â evt?
Â Â makerÂ :Â (->Â (or/cÂ evt?Â any/c))
procedure
(nack-guard-evtÂ maker)Â ->Â evt?
Â Â makerÂ :Â (evt?Â . -> .Â (or/cÂ evt?Â any/c))
procedure
(poll-guard-evtÂ maker)Â ->Â evt?
Â Â makerÂ :Â (boolean?Â . -> .Â (or/cÂ evt?Â any/c))
procedure
(replace-evtÂ evtÂ maker)Â ->Â evt?
Â Â evtÂ :Â evt?
Â Â makerÂ :Â (any/cÂ ...Â . -> .Â (or/cÂ evt?Â any/c))
value
always-evtÂ :Â evt?
value
never-evtÂ :Â evt?
procedure
(system-idle-evt)Â ->Â evt?
procedure
(alarm-evtÂ msecsÂ [monotonic?])Â ->Â evt?
Â Â msecsÂ :Â real?
Â Â monotonic?Â :Â any/cÂ =Â #f
procedure
(handle-evt?Â evt)Â ->Â boolean?
Â Â evtÂ :Â evt?
value
prop:evtÂ :Â struct-type-property?
parameter
(current-evt-pseudo-random-generator)
Â ->Â pseudo-random-generator?
(current-evt-pseudo-random-generatorÂ generator)Â ->Â void?
Â Â generatorÂ :Â pseudo-random-generator?
procedure
(channel?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-channel)Â ->Â channel?
procedure
(channel-getÂ ch)Â ->Â any
Â Â chÂ :Â channel?
procedure
(channel-try-getÂ ch)Â ->Â any
Â Â chÂ :Â channel?
procedure
(channel-putÂ chÂ v)Â ->Â void?
Â Â chÂ :Â channel?
Â Â vÂ :Â any/c
procedure
(channel-put-evtÂ chÂ v)Â ->Â channel-put-evt?
Â Â chÂ :Â channel?
Â Â vÂ :Â any/c
procedure
(channel-put-evt?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(semaphore?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-semaphoreÂ [init])Â ->Â semaphore?
Â Â initÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(semaphore-postÂ sema)Â ->Â void?
Â Â semaÂ :Â semaphore?
procedure
(semaphore-waitÂ sema)Â ->Â void?
Â Â semaÂ :Â semaphore?
procedure
(semaphore-try-wait?Â sema)Â ->Â boolean?
Â Â semaÂ :Â semaphore?
procedure
(semaphore-wait/enable-breakÂ sema)Â ->Â void?
Â Â semaÂ :Â semaphore?
procedure
(semaphore-peek-evtÂ sema)Â ->Â semaphore-peek-evt?
Â Â semaÂ :Â semaphore?
procedure
(semaphore-peek-evt?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(call-with-semaphoreÂ  sema           Â Â  Â Â 
Â                    Â  proc           Â Â  Â Â 
Â                    Â [try-fail-thunk]Â Â  Â Â 
Â                    Â  argÂ ...)       Â ->Â any
Â Â semaÂ :Â semaphore?
Â Â procÂ :Â procedure?
Â Â try-fail-thunkÂ :Â (or/cÂ (->Â any)Â #f)Â =Â #f
Â Â argÂ :Â any/c
procedure
(call-with-semaphore/enable-breakÂ  sema           Â Â  Â Â 
Â                                 Â  proc           Â Â  Â Â 
Â                                 Â [try-fail-thunk]Â Â  Â Â 
Â                                 Â  argÂ ...)       Â ->Â any
Â Â semaÂ :Â semaphore?
Â Â procÂ :Â procedure?
Â Â try-fail-thunkÂ :Â (or/cÂ (->Â any)Â #f)Â =Â #f
Â Â argÂ :Â any/c
procedure
(async-channel?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-async-channelÂ [limit])Â ->Â async-channel?
Â Â limitÂ :Â (or/cÂ exact-positive-integer?Â #f)Â =Â #f
procedure
(async-channel-getÂ ach)Â ->Â any/c
Â Â achÂ :Â async-channel?
procedure
(async-channel-try-getÂ ach)Â ->Â any/c
Â Â achÂ :Â async-channel?
procedure
(async-channel-putÂ achÂ v)Â ->Â void?
Â Â achÂ :Â async-channel?
Â Â vÂ :Â any/c
procedure
(async-channel-put-evtÂ achÂ v)Â ->Â evt?
Â Â achÂ :Â async-channel?
Â Â vÂ :Â any/c
procedure
(async-channel/cÂ c)Â ->Â contract?
Â Â cÂ :Â contract?
procedure
(impersonate-async-channelÂ channel     Â 
Â                          Â get-proc    Â 
Â                          Â put-proc    Â 
Â                          Â prop        Â 
Â                          Â prop-valÂ ...Â 
Â                          Â ...)        Â 
Â ->Â (and/cÂ async-channel?Â impersonator?)
Â Â channelÂ :Â async-channel?
Â Â get-procÂ :Â (any/cÂ . -> .Â any/c)
Â Â put-procÂ :Â (any/cÂ . -> .Â any/c)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any
procedure
(chaperone-async-channelÂ channel     Â 
Â                        Â get-proc    Â 
Â                        Â put-proc    Â 
Â                        Â prop        Â 
Â                        Â prop-valÂ ...Â 
Â                        Â ...)        Â 
Â ->Â (and/cÂ async-channel?Â chaperone?)
Â Â channelÂ :Â async-channel?
Â Â get-procÂ :Â (any/cÂ . -> .Â any/c)
Â Â put-procÂ :Â (any/cÂ . -> .Â any/c)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any
procedure
(thread-cell?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-thread-cellÂ vÂ [preserved?])Â ->Â thread-cell?
Â Â vÂ :Â any/c
Â Â preserved?Â :Â any/cÂ =Â #f
procedure
(thread-cell-refÂ cell)Â ->Â any
Â Â cellÂ :Â thread-cell?
procedure
(thread-cell-set!Â cellÂ v)Â ->Â any
Â Â cellÂ :Â thread-cell?
Â Â vÂ :Â any/c
procedure
(current-preserved-thread-cell-values)Â ->Â thread-cell-values?
(current-preserved-thread-cell-valuesÂ thread-cell-vals)Â ->Â void?
Â Â thread-cell-valsÂ :Â thread-cell-values?
procedure
(thread-cell-values?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-parameterÂ vÂ [guardÂ name])Â ->Â parameter?
Â Â vÂ :Â any/c
Â Â guardÂ :Â (or/cÂ (any/cÂ . -> .Â any)Â #f)Â =Â #f
Â Â nameÂ :Â symbol?Â =Â 'parameter-procedure
syntax
(parameterizeÂ ([parameter-exprÂ value-expr]Â ...)
Â Â bodyÂ ...+)
Â 
Â Â parameter-exprÂ :Â parameter?
syntax
(parameterize*Â ((parameter-exprÂ value-expr)Â ...)
Â Â bodyÂ ...+)
procedure
(make-derived-parameterÂ parameterÂ Â  Â Â 
Â                       Â guard    Â Â  Â Â 
Â                       Â wrap)    Â ->Â parameter?
Â Â parameterÂ :Â parameter?
Â Â guardÂ :Â (any/cÂ . -> .Â any)
Â Â wrapÂ :Â (any/cÂ . -> .Â any)
procedure
(parameter?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(parameter-procedure=?Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â parameter?
Â Â bÂ :Â parameter?
procedure
(current-parameterization)Â ->Â parameterization?
procedure
(call-with-parameterizationÂ parameterizationÂ Â  Â Â 
Â                           Â thunk)          Â ->Â any
Â Â parameterizationÂ :Â parameterization?
Â Â thunkÂ :Â (->Â any)
procedure
(parameterization?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(futureÂ thunk)Â ->Â future?
Â Â thunkÂ :Â (->Â any)
procedure
(touchÂ f)Â ->Â any
Â Â fÂ :Â future?
procedure
(futures-enabled?)Â ->Â boolean?
procedure
(current-future)Â ->Â (or/cÂ #fÂ future?)
procedure
(future?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(would-be-futureÂ thunk)Â ->Â future?
Â Â thunkÂ :Â (->Â any)
procedure
(processor-count)Â ->Â exact-positive-integer?
syntax
(for/asyncÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
syntax
(for*/asyncÂ (for-clauseÂ ...)Â body-or-breakÂ ...Â body)
procedure
(make-fsemaphoreÂ init)Â ->Â fsemaphore?
Â Â initÂ :Â exact-nonnegative-integer?
procedure
(fsemaphore?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(fsemaphore-postÂ fsema)Â ->Â void?
Â Â fsemaÂ :Â fsemaphore?
procedure
(fsemaphore-waitÂ fsema)Â ->Â void?
Â Â fsemaÂ :Â fsemaphore?
procedure
(fsemaphore-try-wait?Â fsema)Â ->Â boolean?
Â Â fsemaÂ :Â fsemaphore?
procedure
(fsemaphore-countÂ fsema)Â ->Â exact-nonnegative-integer?
Â Â fsemaÂ :Â fsemaphore?
procedure
(place-enabled?)Â ->Â boolean?
procedure
(place?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(place-channel?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(dynamic-placeÂ  module-path    Â Â  Â Â 
Â              Â  start-name     Â Â  Â Â 
Â              Â [#:atÂ location  Â Â  Â Â 
Â              Â  #:namedÂ named])Â ->Â place?
Â Â module-pathÂ :Â (or/cÂ module-path?Â path?)
Â Â start-nameÂ :Â symbol?
Â Â locationÂ :Â (or/cÂ #fÂ place-location?)Â =Â #f
Â Â namedÂ :Â any/cÂ =Â #f
procedure
(dynamic-place*Â  module-pathÂ Â  Â Â 
Â               Â  start-name Â Â  Â Â 
Â               Â [#:inÂ in    Â Â  Â Â 
Â               Â  #:outÂ out  Â Â  Â Â 
Â               Â  #:errÂ err])Â ->Â place?
                                (or/cÂ output-port?Â #f)
                                (or/cÂ input-port?Â #f)
                                (or/cÂ input-port?Â #f)
Â Â module-pathÂ :Â (or/cÂ module-path?Â path?)
Â Â start-nameÂ :Â symbol?
Â Â inÂ :Â (or/cÂ input-port?Â #f)Â =Â #f
Â Â outÂ :Â (or/cÂ output-port?Â #f)Â =Â (current-output-port)
Â Â errÂ :Â (or/cÂ output-port?Â #f)Â =Â (current-error-port)
procedure
(place-waitÂ p)Â ->Â exact-integer?
Â Â pÂ :Â place?
procedure
(place-dead-evtÂ p)Â ->Â evt?
Â Â pÂ :Â place?
procedure
(place-killÂ p)Â ->Â void?
Â Â pÂ :Â place?
procedure
(place-breakÂ pÂ [kind])Â ->Â void?
Â Â pÂ :Â place?
Â Â kindÂ :Â (or/cÂ #fÂ 'hang-upÂ 'terminate)Â =Â #f
procedure
(place-channel)Â ->Â place-channel?Â place-channel?
procedure
(place-channel-putÂ pchÂ v)Â ->Â void
Â Â pchÂ :Â place-channel?
Â Â vÂ :Â place-message-allowed?
procedure
(place-channel-getÂ pch)Â ->Â place-message-allowed?
Â Â pchÂ :Â place-channel?
procedure
(place-channel-put/getÂ pchÂ v)Â ->Â any/c
Â Â pchÂ :Â place-channel?
Â Â vÂ :Â any/c
procedure
(place-message-allowed?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
value
prop:place-locationÂ :Â struct-type-property?
procedure
(place-location?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
syntax
(placeÂ idÂ bodyÂ ...+)
syntax
(place*Â maybe-portÂ ...
Â Â Â Â Â Â Â Â id
Â Â Â Â Â Â Â Â bodyÂ ...+)
Â 
maybe-portÂ =Â 
         Â Â |Â #:inÂ in-expr
         Â Â |Â #:outÂ out-expr
         Â Â |Â #:errÂ err-expr
syntax
(place/contextÂ idÂ bodyÂ ...+)
procedure
(processor-count)Â ->Â exact-positive-integer?
procedure
(engineÂ proc)Â ->Â engine?
Â Â procÂ :Â ((any/cÂ . -> .Â void?)Â . -> .Â any/c)
procedure
(engine?Â v)Â ->Â any
Â Â vÂ :Â any/c
procedure
(engine-runÂ untilÂ engine)Â ->Â boolean?
Â Â untilÂ :Â (or/cÂ evt?Â real?)
Â Â engineÂ :Â engine?
procedure
(engine-resultÂ engine)Â ->Â any
Â Â engineÂ :Â engine?
procedure
(engine-killÂ engine)Â ->Â void?
Â Â engineÂ :Â engine?
procedure
(memory-order-acquire)Â ->Â void?
procedure
(memory-order-release)Â ->Â void?
syntax
(syntax-caseÂ stx-exprÂ (literal-idÂ ...)
Â Â clauseÂ ...)
Â 
      clauseÂ =Â [patternÂ result-expr]
           Â Â |Â [patternÂ fender-exprÂ result-expr]
           Â Â Â Â Â 
     patternÂ =Â np-pattern
           Â Â |Â (patternÂ ...)
           Â Â |Â (patternÂ ...+Â . np-pattern)
           Â Â |Â (patternÂ ...Â patternÂ ellipsisÂ patternÂ ...Â . np-pattern)
           Â Â Â Â Â 
  np-patternÂ =Â _
           Â Â |Â id
           Â Â |Â #(patternÂ ...)
           Â Â |Â #(patternÂ ...Â patternÂ ellipsisÂ patternÂ ...)
           Â Â |Â #&pattern
           Â Â |Â #s(key-datumÂ patternÂ ...)
           Â Â |Â #s(key-datumÂ patternÂ ...Â patternÂ ellipsisÂ patternÂ ...)
           Â Â |Â (ellipsisÂ stat-pattern)
           Â Â |Â const
           Â Â Â Â Â 
stat-patternÂ =Â id
           Â Â |Â (stat-patternÂ ...)
           Â Â |Â (stat-patternÂ ...+Â . stat-pattern)
           Â Â |Â #(stat-patternÂ ...)
           Â Â |Â #&stat-pattern
           Â Â |Â #s(key-datumÂ stat-patternÂ ...)
           Â Â |Â const
           Â Â Â Â Â 
    ellipsisÂ =Â ...

_

id

(patternÂ ...)

(patternÂ ...+Â . np-pattern)

(patternÂ ...Â patternÂ ellipsisÂ patternÂ ...)

(patternÂ ...Â patternÂ ellipsisÂ patternÂ ...Â . np-pattern)

#(patternÂ ...)

#(patternÂ ...Â patternÂ ellipsisÂ patternÂ ...)

#&pattern

#s(key-datumÂ patternÂ ...)

#s(key-datumÂ patternÂ ...Â patternÂ ellipsisÂ patternÂ ...)

(ellipsisÂ stat-pattern)

const
syntax
(syntax-case*Â stx-exprÂ (literal-idÂ ...)Â id-compare-expr
Â Â clauseÂ ...)
syntax
(with-syntaxÂ ([patternÂ stx-expr]Â ...)
Â Â bodyÂ ...+)
syntax
(syntaxÂ template)
Â 
     templateÂ =Â id
            Â Â |Â (head-templateÂ ...)
            Â Â |Â (head-templateÂ ...+Â . template)
            Â Â |Â #(head-templateÂ ...)
            Â Â |Â #&template
            Â Â |Â #s(key-datumÂ head-templateÂ ...)
            Â Â |Â (~?Â templateÂ template)
            Â Â |Â (ellipsisÂ stat-template)
            Â Â |Â const
            Â Â Â Â Â 
head-templateÂ =Â template
            Â Â |Â head-templateÂ ellipsisÂ ...+
            Â Â |Â (~@Â . template)
            Â Â |Â (~?Â head-templateÂ head-template)
            Â Â |Â (~?Â head-template)
            Â Â Â Â Â 
stat-templateÂ =Â like template, but without ..., ~?, and ~@
            Â Â Â Â Â 
     ellipsisÂ =Â ...

id

(head-templateÂ ...)

(head-templateÂ ...Â . template)

#(head-templateÂ ...)

#&template

#s(key-datumÂ head-templateÂ ...)

(~?Â template1Â template2)

(ellipsisÂ stat-template)

const

template

head-templateÂ ellipsisÂ ...+
syntax
(~@Â . template)
syntax
(~?Â head-template1Â head-template2)

(~?Â head-template)
syntax
(quasisyntaxÂ template)
syntax
(unsyntaxÂ expr)
syntax
(unsyntax-splicingÂ expr)
syntax
(syntax/locÂ loc-exprÂ template)
Â 
Â Â loc-exprÂ :Â (or/cÂ #fÂ srcloc?Â syntax?
             Â Â Â Â Â Â (list/cÂ any/c
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f))
             Â Â Â Â Â Â (vector/cÂ any/c
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)))
syntax
(quasisyntax/locÂ loc-exprÂ template)
Â 
Â Â loc-exprÂ :Â (or/cÂ #fÂ srcloc?Â syntax?
             Â Â Â Â Â Â (list/cÂ any/c
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f))
             Â Â Â Â Â Â (vector/cÂ any/c
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)))
syntax
(quote-syntax/pruneÂ id)
syntax
(syntax-rulesÂ (literal-idÂ ...)
Â Â [(idÂ . pattern)Â template]Â ...)
syntax
(syntax-id-rulesÂ (literal-idÂ ...)
Â Â [patternÂ template]Â ...)
syntax
(define-syntax-ruleÂ (idÂ . pattern)Â template)
syntax
...
syntax
_
syntax
~?
syntax
~@
procedure
(syntax-pattern-variable?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(syntax?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(identifier?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(syntax-sourceÂ stx)Â ->Â any/c
Â Â stxÂ :Â syntax?
procedure
(syntax-lineÂ stx)Â ->Â (or/cÂ exact-positive-integer?Â #f)
Â Â stxÂ :Â syntax?
procedure
(syntax-columnÂ stx)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â stxÂ :Â syntax?
procedure
(syntax-positionÂ stx)Â ->Â (or/cÂ exact-positive-integer?Â #f)
Â Â stxÂ :Â syntax?
procedure
(syntax-spanÂ stx)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â stxÂ :Â syntax?
procedure
(syntax-original?Â stx)Â ->Â boolean?
Â Â stxÂ :Â syntax?
procedure
(syntax-source-moduleÂ stxÂ [source?])
Â ->Â (or/cÂ module-path-index?Â symbol?Â path?Â resolved-module-path?Â #f)
Â Â stxÂ :Â syntax?
Â Â source?Â :Â any/cÂ =Â #f
procedure
(syntax-eÂ stx)Â ->Â any/c
Â Â stxÂ :Â syntax?
procedure
(syntax->listÂ stx)Â ->Â (or/cÂ list?Â #f)
Â Â stxÂ :Â syntax?
procedure
(syntax->datumÂ stx)Â ->Â any/c
Â Â stxÂ :Â syntax?
procedure
(datum->syntaxÂ ctxtÂ vÂ [srclocÂ propÂ ignored])Â ->Â syntax?
Â Â ctxtÂ :Â (or/cÂ syntax?Â #f)
Â Â vÂ :Â any/c
Â Â srclocÂ :Â (or/cÂ #f
           Â Â Â Â Â Â syntax?
           Â Â Â Â Â Â srcloc?
           Â Â Â Â Â Â (list/cÂ any/c
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f))
           Â Â Â Â Â Â (vector/cÂ any/c
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)))
Â  Â      Â =Â #f
Â Â propÂ :Â (or/cÂ syntax?Â #f)Â =Â #f
Â Â ignoredÂ :Â (or/cÂ syntax?Â #f)Â =Â #f
procedure
(syntax-binding-set?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(syntax-binding-set)Â ->Â syntax-binding-set?
procedure
(syntax-binding-set->syntaxÂ binding-setÂ Â  Â Â 
Â                           Â datum)     Â ->Â syntax?
Â Â binding-setÂ :Â syntax-binding-set?
Â Â datumÂ :Â any/c
procedure
(syntax-binding-set-extend                                               Â 
Â                          Â  binding-set                                  Â 
Â                          Â  symbol                                       Â 
Â                          Â  phase                                        Â 
Â                          Â  mpi                                          Â 
Â                          Â [#:source-symbolÂ source-symbol                Â 
Â                          Â  #:source-phaseÂ source-phase                  Â 
Â                          Â  #:nominal-moduleÂ nominal-mpi                 Â 
Â                          Â  #:nominal-phaseÂ nominal-phase                Â 
Â                          Â  #:nominal-symbolÂ nominal-symbol              Â 
Â                          Â  #:nominal-require-phaseÂ nominal-require-phaseÂ 
Â                          Â  #:inspectorÂ inspector])                      Â 
Â ->Â syntax-binding-set?
Â Â binding-setÂ :Â syntax-binding-set?
Â Â symbolÂ :Â symbol?
Â Â phaseÂ :Â (or/cÂ exact-integer?Â #f)
Â Â mpiÂ :Â module-path-index?
Â Â source-symbolÂ :Â symbol?Â =Â symbol
Â Â source-phaseÂ :Â (or/cÂ exact-integer?Â #f)Â =Â phase
Â Â nominal-mpiÂ :Â module-path-index?Â =Â mpi
Â Â nominal-phaseÂ :Â (or/cÂ exact-integer?Â #f)Â =Â source-phase
Â Â nominal-symbolÂ :Â symbol?Â =Â source-symbol
Â Â nominal-require-phaseÂ :Â (or/cÂ exact-integer?Â #f)Â =Â 0
Â Â inspectorÂ :Â (or/cÂ inspector?Â #f)Â =Â #f
procedure
(datum-intern-literalÂ v)Â ->Â any/c
Â Â vÂ :Â any/c
procedure
(syntax-shift-phase-levelÂ stxÂ shift)Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â shiftÂ :Â (or/cÂ exact-integer?Â #f)
procedure
(generate-temporariesÂ stx-pair)Â ->Â (listofÂ identifier?)
Â Â stx-pairÂ :Â (orÂ syntax?Â list?)
procedure
(identifier-prune-lexical-contextÂ  id-stxÂ Â  Â Â 
Â                                 Â [syms])Â ->Â identifier?
Â Â id-stxÂ :Â identifier?
Â Â symsÂ :Â (listofÂ symbol?)Â =Â (listÂ (syntax-eÂ id-stx))
procedure
(identifier-prune-to-source-moduleÂ id-stx)Â ->Â identifier?
Â Â id-stxÂ :Â identifier?
procedure
(syntax-recertifyÂ new-stx  Â Â  Â Â 
Â                 Â old-stx  Â Â  Â Â 
Â                 Â inspectorÂ Â  Â Â 
Â                 Â key)     Â ->Â syntax?
Â Â new-stxÂ :Â syntax?
Â Â old-stxÂ :Â syntax?
Â Â inspectorÂ :Â inspector?
Â Â keyÂ :Â any/c
procedure
(syntax-debug-infoÂ stxÂ [phaseÂ all-bindings?])Â ->Â hash?
Â Â stxÂ :Â syntax?
Â Â phaseÂ :Â (or/cÂ exact-integer?Â #f)Â =Â (syntax-local-phase-level)
Â Â all-bindings?Â :Â any/cÂ =Â #f
procedure
(syntax-srclocÂ stx)Â ->Â (or/cÂ #fÂ srcloc?)
Â Â stxÂ :Â syntax?
procedure
(bound-identifier=?Â a-idÂ b-idÂ [phase-level])Â ->Â boolean?
Â Â a-idÂ :Â syntax?
Â Â b-idÂ :Â syntax?
Â Â phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â           Â =Â (syntax-local-phase-level)
procedure
(free-identifier=?Â  a-id           Â Â  Â Â 
Â                  Â  b-id           Â Â  Â Â 
Â                  Â [a-phase-level  Â Â  Â Â 
Â                  Â  b-phase-level])Â ->Â boolean?
Â Â a-idÂ :Â identifier?
Â Â b-idÂ :Â identifier?
Â Â a-phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â             Â =Â (syntax-local-phase-level)
Â Â b-phase-levelÂ :Â (or/cÂ exact-integer?Â #f)Â =Â a-phase-level
procedure
(free-transformer-identifier=?Â a-idÂ b-id)Â ->Â boolean?
Â Â a-idÂ :Â identifier?
Â Â b-idÂ :Â identifier?
procedure
(free-template-identifier=?Â a-idÂ b-id)Â ->Â boolean?
Â Â a-idÂ :Â identifier?
Â Â b-idÂ :Â identifier?
procedure
(free-label-identifier=?Â a-idÂ b-id)Â ->Â boolean?
Â Â a-idÂ :Â identifier?
Â Â b-idÂ :Â identifier?
procedure
(check-duplicate-identifierÂ ids)Â ->Â (or/cÂ identifier?Â #f)
Â Â idsÂ :Â (listofÂ identifier?)
procedure
(identifier-bindingÂ  id-stx           Â 
Â                   Â [phase-level      Â 
Â                   Â  top-level-symbol?Â 
Â                   Â  exact-scopes?])  Â 
Â ->Â (or/cÂ 'lexical
    Â Â Â Â Â Â #f
    Â Â Â Â Â Â (list/cÂ module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space-shift?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space?)
    Â Â Â Â Â Â (list/cÂ symbol?))
Â Â id-stxÂ :Â identifier?
Â Â phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â           Â =Â (syntax-local-phase-level)
Â Â top-level-symbol?Â :Â any/cÂ =Â #f
Â Â exact-scopes?Â :Â any/cÂ =Â #f
procedure
(identifier-transformer-bindingÂ  id-stx          Â 
Â                               Â [rt-phase-level])Â 
Â ->Â (or/cÂ 'lexical
    Â Â Â Â Â Â #f
    Â Â Â Â Â Â (listofÂ module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space-shift?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space?))
Â Â id-stxÂ :Â identifier?
Â Â rt-phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â              Â =Â (syntax-local-phase-level)
procedure
(identifier-template-bindingÂ id-stx)
Â ->Â (or/cÂ 'lexical
    Â Â Â Â Â Â #f
    Â Â Â Â Â Â (listofÂ module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space-shift?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space?))
Â Â id-stxÂ :Â identifier?
procedure
(identifier-label-bindingÂ id-stx)
Â ->Â (or/cÂ 'lexical
    Â Â Â Â Â Â #f
    Â Â Â Â Â Â (listofÂ module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space-shift?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space?))
Â Â id-stxÂ :Â identifier?
procedure
(identifier-distinct-bindingÂ  id-stx       Â 
Â                            Â  wrt-id-stx   Â 
Â                            Â [phase-level])Â 
Â ->Â (or/cÂ 'lexical
    Â Â Â Â Â Â #f
    Â Â Â Â Â Â (list/cÂ module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â module-path-index?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space-shift?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â phase+space?)
    Â Â Â Â Â Â (list/cÂ symbol?))
Â Â id-stxÂ :Â identifier?
Â Â wrt-id-stxÂ :Â identifier?
Â Â phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â           Â =Â (syntax-local-phase-level)
procedure
(identifier-binding-symbolÂ  id-stx       Â Â  Â Â 
Â                          Â [phase-level])Â ->Â symbol?
Â Â id-stxÂ :Â identifier?
Â Â phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â           Â =Â (syntax-local-phase-level)
procedure
(identifier-binding-portal-syntaxÂ  id-stx       Â 
Â                                 Â [phase-level])Â 
Â ->Â (or/cÂ #fÂ syntax?)
Â Â id-stxÂ :Â identifier?
Â Â phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â           Â =Â (syntax-local-phase-level)
procedure
(syntax-bound-symbolsÂ  stx            Â Â  Â Â 
Â                     Â [phase-level    Â Â  Â Â 
Â                     Â  exact-scopes?])Â ->Â (listofÂ symbol?)
Â Â stxÂ :Â stx?
Â Â phase-levelÂ :Â (or/cÂ exact-integer?Â #f)
Â  Â           Â =Â (syntax-local-phase-level)
Â Â exact-scopes?Â :Â any/cÂ =Â #f
procedure
(syntax-bound-phasesÂ stx)Â ->Â (listofÂ (or/cÂ exact-integer?Â #f))
Â Â stxÂ :Â stx?
procedure
(set!-transformer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-set!-transformerÂ proc)Â ->Â set!-transformer?
Â Â procÂ :Â (syntax?Â . -> .Â syntax?)
procedure
(set!-transformer-procedureÂ transformer)
Â ->Â (syntax?Â . -> .Â syntax?)
Â Â transformerÂ :Â set!-transformer?
value
prop:set!-transformerÂ :Â struct-type-property?
procedure
(rename-transformer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-rename-transformerÂ id-stx)Â ->Â rename-transformer?
Â Â id-stxÂ :Â syntax?
procedure
(rename-transformer-targetÂ transformer)Â ->Â identifier?
Â Â transformerÂ :Â rename-transformer?
value
prop:rename-transformerÂ :Â struct-type-property?
procedure
(local-expandÂ  stx         Â Â  Â Â 
Â             Â  context-v   Â Â  Â Â 
Â             Â  stop-ids    Â Â  Â Â 
Â             Â [intdef-ctx])Â ->Â syntax?
Â Â stxÂ :Â any/c
Â Â context-vÂ :Â (or/cÂ 'expressionÂ 'top-levelÂ 'moduleÂ 'module-beginÂ list?)
Â Â stop-idsÂ :Â (or/cÂ (listofÂ identifier?)Â emptyÂ #f)
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?          Â =Â #f
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
procedure
(syntax-local-expand-expressionÂ  stx           Â 
Â                               Â [opaque-only?])Â 
Â ->Â (ifÂ opaque-only?Â #fÂ syntax?)Â syntax?
Â Â stxÂ :Â any/c
Â Â opaque-only?Â :Â any/cÂ =Â #f
procedure
(local-transformer-expandÂ  stx         Â Â  Â Â 
Â                         Â  context-v   Â Â  Â Â 
Â                         Â  stop-ids    Â Â  Â Â 
Â                         Â [intdef-ctx])Â ->Â syntax?
Â Â stxÂ :Â any/c
Â Â context-vÂ :Â (or/cÂ 'expressionÂ 'top-levelÂ list?)
Â Â stop-idsÂ :Â (or/cÂ (listofÂ identifier?)Â #f)
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?          Â =Â #f
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
procedure
(local-expand/capture-liftsÂ  stx       Â Â  Â Â 
Â                           Â  context-v Â Â  Â Â 
Â                           Â  stop-ids  Â Â  Â Â 
Â                           Â [intdef-ctxÂ Â  Â Â 
Â                           Â  lift-ctx])Â ->Â syntax?
Â Â stxÂ :Â any/c
Â Â context-vÂ :Â (or/cÂ 'expressionÂ 'top-levelÂ 'moduleÂ 'module-beginÂ list?)
Â Â stop-idsÂ :Â (or/cÂ (listofÂ identifier?)Â #f)
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?          Â =Â #f
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
Â Â lift-ctxÂ :Â any/cÂ =Â (gensymÂ 'lifts)
procedure
(local-transformer-expand/capture-liftsÂ  stx       Â Â  Â Â 
Â                                       Â  context-v Â Â  Â Â 
Â                                       Â  stop-ids  Â Â  Â Â 
Â                                       Â [intdef-ctxÂ Â  Â Â 
Â                                       Â  lift-ctx])Â ->Â syntax?
Â Â stxÂ :Â any/c
Â Â context-vÂ :Â (or/cÂ 'expressionÂ 'top-levelÂ list?)
Â Â stop-idsÂ :Â (or/cÂ (listofÂ identifier?)Â #f)
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?          Â =Â #f
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
Â Â lift-ctxÂ :Â any/cÂ =Â (gensymÂ 'lifts)
procedure
(syntax-local-apply-transformerÂ transformerÂ Â  Â Â 
Â                               Â binding-id Â Â  Â Â 
Â                               Â context-v  Â Â  Â Â 
Â                               Â intdef-ctx Â Â  Â Â 
Â                               Â vÂ ...)     Â ->Â any
Â Â transformerÂ :Â procedure?
Â Â binding-idÂ :Â (or/cÂ identifier?Â #f)
Â Â context-vÂ :Â (or/cÂ 'expressionÂ 'top-levelÂ 'moduleÂ 'module-beginÂ list?)
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?Â #f)
Â Â vÂ :Â any/c
procedure
(internal-definition-context?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(syntax-local-make-definition-contextÂ [parent-ctx  Â 
Â                                     Â  add-scope?])Â 
Â ->Â internal-definition-context?
Â Â parent-ctxÂ :Â (or/cÂ internal-definition-context?Â #f)Â =Â #f
Â Â add-scope?Â :Â any/cÂ =Â #t
procedure
(internal-definition-context-add-scopesÂ intdef-ctxÂ Â  Â Â 
Â                                       Â stx)      Â ->Â syntax?
Â Â intdef-ctxÂ :Â internal-definition-context?
Â Â stxÂ :Â syntax?
procedure
(internal-definition-context-splice-binding-identifier           Â 
Â                                                      Â intdef-ctxÂ 
Â                                                      Â id)       Â 
Â ->Â syntax?
Â Â intdef-ctxÂ :Â internal-definition-context?
Â Â idÂ :Â identifier?
procedure
(syntax-local-bind-syntaxesÂ  id-list            Â 
Â                           Â  expr               Â 
Â                           Â  intdef-ctx         Â 
Â                           Â [extra-intdef-ctxs])Â 
Â ->Â (listofÂ identifier?)
Â Â id-listÂ :Â (listofÂ identifier?)
Â Â exprÂ :Â (or/cÂ syntax?Â #f)
Â Â intdef-ctxÂ :Â internal-definition-context?
Â Â extra-intdef-ctxsÂ :Â (or/cÂ internal-definition-context?
                      Â Â Â Â Â Â (listofÂ internal-definition-context?))
Â  Â                 Â =Â '()
procedure
(internal-definition-context-binding-identifiersÂ intdef-ctx)
Â ->Â (listofÂ identifier?)
Â Â intdef-ctxÂ :Â internal-definition-context?
procedure
(internal-definition-context-introduceÂ  intdef-ctxÂ Â  Â Â 
Â                                      Â  stx       Â Â  Â Â 
Â                                      Â [mode])    Â ->Â syntax?
Â Â intdef-ctxÂ :Â internal-definition-context?
Â Â stxÂ :Â syntax?
Â Â modeÂ :Â (or/cÂ 'flipÂ 'addÂ 'remove)Â =Â 'flip
procedure
(internal-definition-context-sealÂ intdef-ctx)Â ->Â void?
Â Â intdef-ctxÂ :Â internal-definition-context?
procedure
(identifier-remove-from-definition-contextÂ id-stx     Â 
Â                                          Â intdef-ctx)Â 
Â ->Â identifier?
Â Â id-stxÂ :Â identifier?
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
value
prop:expansion-contextsÂ :Â struct-type-property?
procedure
(syntax-local-valueÂ  id-stx       Â Â  Â Â 
Â                   Â [failure-thunkÂ Â  Â Â 
Â                   Â  intdef-ctx]) Â ->Â any
Â Â id-stxÂ :Â identifier?
Â Â failure-thunkÂ :Â (or/cÂ (->Â any)Â #f)Â =Â #f
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?          Â =Â #f
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
procedure
(syntax-local-value/immediateÂ  id-stx       Â Â  Â Â 
Â                             Â [failure-thunkÂ Â  Â Â 
Â                             Â  intdef-ctx]) Â ->Â any
Â Â id-stxÂ :Â syntax?
Â Â failure-thunkÂ :Â (or/cÂ (->Â any)Â #f)Â =Â #f
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?          Â =Â #f
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
procedure
(syntax-local-lift-expressionÂ stx)Â ->Â identifier?
Â Â stxÂ :Â syntax?
procedure
(syntax-local-lift-values-expressionÂ nÂ stx)
Â ->Â (listofÂ identifier?)
Â Â nÂ :Â exact-nonnegative-integer?
Â Â stxÂ :Â syntax?
procedure
(syntax-local-lift-context)Â ->Â any/c
procedure
(syntax-local-lift-moduleÂ stx)Â ->Â void?
Â Â stxÂ :Â syntax?
procedure
(syntax-local-lift-module-end-declarationÂ stx)Â ->Â void?
Â Â stxÂ :Â syntax?
procedure
(syntax-local-lift-requireÂ raw-require-specÂ Â  Â Â 
Â                          Â stx             Â Â  Â Â 
Â                          Â new-scope?)     Â ->Â syntax?
Â Â raw-require-specÂ :Â any/c
Â Â stxÂ :Â syntax?
Â Â new-scope?Â :Â #t
procedure
(syntax-local-lift-provideÂ raw-provide-spec-stx)Â ->Â void?
Â Â raw-provide-spec-stxÂ :Â syntax?
procedure
(syntax-local-name)Â ->Â any/c
procedure
(syntax-local-context)
Â ->Â (or/cÂ 'expressionÂ 'top-levelÂ 'moduleÂ 'module-beginÂ list?)
procedure
(syntax-local-phase-level)Â ->Â exact-integer?
procedure
(syntax-local-module-exportsÂ mod-path)
Â ->Â (listofÂ (cons/cÂ phase+space?Â (listofÂ symbol?)))
Â Â mod-pathÂ :Â (or/cÂ module-path?
             Â Â Â Â Â Â (syntax/cÂ module-path?))
procedure
(syntax-local-submodules)Â ->Â (listofÂ symbol?)
procedure
(syntax-local-module-interned-scope-symbols)
Â ->Â (listofÂ symbol?)
procedure
(syntax-local-get-shadowerÂ  id-stx           Â Â  Â Â 
Â                          Â [only-generated?])Â ->Â identifier?
Â Â id-stxÂ :Â identifier?
Â Â only-generated?Â :Â any/cÂ =Â #f
procedure
(syntax-local-make-delta-introducerÂ id-stx)Â ->Â procedure?
Â Â id-stxÂ :Â identifier?
procedure
(syntax-local-certifierÂ [active?])
Â ->Â ((syntax?)Â (any/cÂ (or/cÂ procedure?Â #f))
    Â . ->* .Â syntax?)
Â Â active?Â :Â boolean?Â =Â #f
procedure
(syntax-transforming?)Â ->Â boolean?
procedure
(syntax-transforming-with-lifts?)Â ->Â boolean?
procedure
(syntax-transforming-module-expression?)Â ->Â boolean?
procedure
(syntax-local-identifier-as-bindingÂ  id-stx      Â Â  Â Â 
Â                                   Â [intdef-ctx])Â ->Â identifier?
Â Â id-stxÂ :Â identifier?
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?Â #f)Â =Â #f
procedure
(syntax-local-introduceÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
procedure
(make-syntax-introducerÂ [as-use-site?])
Â ->Â ((syntax?)Â ((or/cÂ 'flipÂ 'addÂ 'remove))Â . ->* .Â syntax?)
Â Â as-use-site?Â :Â any/cÂ =Â #f
procedure
(make-interned-syntax-introducerÂ key)
Â ->Â ((syntax?)Â ((or/cÂ 'flipÂ 'addÂ 'remove))Â . ->* .Â syntax?)
Â Â keyÂ :Â (and/cÂ symbol?Â symbol-interned?)
procedure
(make-syntax-delta-introducerÂ  ext-stx      Â 
Â                             Â  base-stx     Â 
Â                             Â [phase-level])Â 
Â ->Â ((syntax?)Â ((or/cÂ 'flipÂ 'addÂ 'remove))Â . ->* .Â syntax?)
Â Â ext-stxÂ :Â identifier?
Â Â base-stxÂ :Â (or/cÂ syntax?Â #f)
Â Â phase-levelÂ :Â (or/cÂ #fÂ exact-integer?)
Â  Â           Â =Â (syntax-local-phase-level)
procedure
(syntax-local-transforming-module-provides?)Â ->Â boolean?
procedure
(syntax-local-module-defined-identifiers)
Â ->Â (and/cÂ hash?Â immutable?)
procedure
(syntax-local-module-required-identifiersÂ mod-pathÂ 
Â                                         Â shift)  Â 
Â ->Â (or/cÂ (listofÂ (cons/cÂ phase+space?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ identifier?)))
    Â Â Â Â Â Â #f)
Â Â mod-pathÂ :Â (or/cÂ module-path?Â #f)
Â Â shiftÂ :Â (or/cÂ #tÂ phase+space-shift?)
value
prop:liberal-define-contextÂ :Â struct-type-property?
procedure
(liberal-define-context?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(expand-importÂ require-spec)
Â ->Â (listofÂ import?)Â (listofÂ import-source?)
Â Â require-specÂ :Â syntax?
procedure
(make-require-transformerÂ proc)Â ->Â require-transformer?
Â Â procÂ :Â (syntax?Â . -> .Â (values
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ import?)
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ import-source?)))
value
prop:require-transformerÂ :Â struct-type-property?
procedure
(require-transformer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
struct
(structÂ importÂ (local-id
Â       Â Â      Â  src-sym
Â       Â Â      Â  src-mod-path
Â       Â Â      Â  mode
Â       Â Â      Â  req-mode
Â       Â Â      Â  orig-mode
Â       Â Â      Â  orig-stx)
Â Â Â Â #:extra-constructor-nameÂ make-import)
Â Â local-idÂ :Â identifier?
Â Â src-symÂ :Â symbol?
Â Â src-mod-pathÂ :Â (or/cÂ module-path?
                 Â Â Â Â Â Â (syntax/cÂ module-path?))
Â Â modeÂ :Â phase+space?
Â Â req-modeÂ :Â phase+space-shift?
Â Â orig-modeÂ :Â phase+space?
Â Â orig-stxÂ :Â syntax?
struct
(structÂ import-sourceÂ (mod-path-stx mode)
Â Â Â Â #:extra-constructor-nameÂ make-import-source)
Â Â mod-path-stxÂ :Â (syntax/cÂ module-path?)
Â Â modeÂ :Â phase+space-shift?
parameter
(current-require-module-path)Â ->Â (or/cÂ #fÂ module-path-index?)
(current-require-module-pathÂ module-path)Â ->Â void?
Â Â module-pathÂ :Â (or/cÂ #fÂ module-path-index?)
procedure
(convert-relative-module-pathÂ module-path)
Â ->Â (or/cÂ module-path?
    Â Â Â Â Â Â (syntax/cÂ module-path?))
Â Â module-pathÂ :Â (or/cÂ module-path?
                Â Â Â Â Â Â (syntax/cÂ module-path?))
procedure
(syntax-local-require-certifier)
Â ->Â ((syntax?)Â (or/cÂ #fÂ (syntax?Â . -> .Â syntax?))
    Â . ->* .Â syntax?)
procedure
(expand-exportÂ provide-specÂ modes)Â ->Â (listofÂ export?)
Â Â provide-specÂ :Â syntax?
Â Â modesÂ :Â (listofÂ phase+space?)
procedure
(pre-expand-exportÂ provide-specÂ modes)Â ->Â syntax?
Â Â provide-specÂ :Â syntax?
Â Â modesÂ :Â (listofÂ phase+space?)
procedure
(make-provide-transformerÂ proc)Â ->Â provide-transformer?
Â Â procÂ :Â (syntax?Â (listofÂ phase+space?)
         Â . -> .Â (listofÂ export?))
(make-provide-transformerÂ procÂ pre-proc)
Â ->Â (and/cÂ provide-transformer?Â provide-pre-transformer?)
Â Â procÂ :Â (syntax?Â (listofÂ phase+space?)
         Â . -> .Â (listofÂ export?))
Â Â pre-procÂ :Â (syntax?Â (listofÂ phase+space?)
             Â . -> .Â syntax?)
procedure
(make-provide-pre-transformerÂ pre-proc)
Â ->Â provide-pre-transformer?
Â Â pre-procÂ :Â (syntax?Â (listofÂ phase+space?)
             Â . -> .Â syntax?)
value
prop:provide-transformerÂ :Â struct-type-property?
value
prop:provide-pre-transformerÂ :Â struct-type-property?
procedure
(provide-transformer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(provide-pre-transformer?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
struct
(structÂ exportÂ (local-id out-sym mode protect? orig-stx)
Â Â Â Â #:extra-constructor-nameÂ make-export)
Â Â local-idÂ :Â identifier?
Â Â out-symÂ :Â symbol?
Â Â modeÂ :Â phase+space?
Â Â protect?Â :Â any/c
Â Â orig-stxÂ :Â syntax?
procedure
(syntax-local-provide-certifier)
Â ->Â ((syntax?)Â (or/cÂ #fÂ (syntax?Â . -> .Â syntax?))
    Â . ->* .Â syntax?)
procedure
(syntax-procedure-alias-propertyÂ stx)
Â ->Â (or/cÂ #f
    Â Â Â Â Â Â (letrecÂ ([val?Â (recursive-contract
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (cons/cÂ identifier?Â identifier?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ val?Â val?)))])
    Â Â Â Â Â Â Â Â val?))
Â Â stxÂ :Â syntax?
procedure
(syntax-procedure-converted-arguments-propertyÂ stx)
Â ->Â (or/cÂ #f
    Â Â Â Â Â Â (letrecÂ ([val?Â (recursive-contract
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (cons/cÂ identifier?Â identifier?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ val?Â val?)))])
    Â Â Â Â Â Â Â Â val?))
Â Â stxÂ :Â syntax?
procedure
(portal-syntax?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-portal-syntaxÂ stx)Â ->Â portal-syntax?
Â Â stxÂ :Â syntax?
procedure
(portal-syntax-contentÂ portal)Â ->Â syntax?
Â Â portalÂ :Â portal-syntax?
syntax
(define-syntax-parameterÂ idÂ expr)
syntax
(syntax-parameterizeÂ ([idÂ expr]Â ...)Â body-exprÂ ...+)
syntax
(define-rename-transformer-parameterÂ idÂ expr)
procedure
(syntax-parameter-valueÂ id-stx)Â ->Â any
Â Â id-stxÂ :Â syntax?
procedure
(make-parameter-rename-transformerÂ id-stx)Â ->Â any
Â Â id-stxÂ :Â syntax?
syntax
splicing-let
syntax
splicing-letrec
syntax
splicing-let-values
syntax
splicing-letrec-values
syntax
splicing-let-syntax
syntax
splicing-letrec-syntax
syntax
splicing-let-syntaxes
syntax
splicing-letrec-syntaxes
syntax
splicing-letrec-syntaxes+values
syntax
splicing-local
syntax
splicing-parameterize
syntax
splicing-syntax-parameterize
procedure
(syntax-propertyÂ stxÂ keyÂ vÂ [preserved?])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â keyÂ :Â (ifÂ preserved?Â (and/cÂ symbol?Â symbol-interned?)Â any/c)
Â Â vÂ :Â any/c
Â Â preserved?Â :Â any/cÂ =Â (eq?Â keyÂ 'paren-shape)
(syntax-propertyÂ stxÂ key)Â ->Â any
Â Â stxÂ :Â syntax?
Â Â keyÂ :Â any/c
procedure
(syntax-property-removeÂ stxÂ key)Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â keyÂ :Â any/c
procedure
(syntax-property-preserved?Â stxÂ key)Â ->Â boolean?
Â Â stxÂ :Â syntax?
Â Â keyÂ :Â (and/cÂ symbol?Â symbol-interned?)
procedure
(syntax-property-symbol-keysÂ stx)Â ->Â list?
Â Â stxÂ :Â syntax?
procedure
(syntax-track-originÂ new-stx Â Â  Â Â 
Â                    Â orig-stxÂ Â  Â Â 
Â                    Â id-stx) Â ->Â any
Â Â new-stxÂ :Â syntax?
Â Â orig-stxÂ :Â syntax?
Â Â id-stxÂ :Â identifier?
procedure
(syntax-tainted?Â stx)Â ->Â boolean?
Â Â stxÂ :Â syntax?
procedure
(syntax-armÂ stxÂ [inspectorÂ use-mode?])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â inspectorÂ :Â (or/cÂ inspector?Â #f)Â =Â #f
Â Â use-mode?Â :Â any/cÂ =Â #f
procedure
(syntax-protectÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
procedure
(syntax-disarmÂ stxÂ inspector)Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â inspectorÂ :Â (or/cÂ inspector?Â #f)
procedure
(syntax-rearmÂ stxÂ from-stxÂ [use-mode?])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â from-stxÂ :Â syntax?
Â Â use-mode?Â :Â any/cÂ =Â #f
procedure
(syntax-taintÂ stx)Â ->Â syntax?
Â Â stxÂ :Â syntax?
procedure
(expandÂ top-level-formÂ [insp])Â ->Â syntax?
Â Â top-level-formÂ :Â any/c
Â Â inspÂ :Â inspector?Â =Â (current-code-inspector)
procedure
(expand-syntaxÂ stxÂ [insp])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â inspÂ :Â inspector?Â =Â (current-code-inspector)
procedure
(expand-onceÂ top-level-formÂ [insp])Â ->Â syntax?
Â Â top-level-formÂ :Â any/c
Â Â inspÂ :Â inspector?Â =Â (current-code-inspector)
procedure
(expand-syntax-onceÂ stxÂ [insp])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â inspÂ :Â inspector?Â =Â (current-code-inspector)
procedure
(expand-to-top-formÂ top-level-formÂ [insp])Â ->Â syntax?
Â Â top-level-formÂ :Â any/c
Â Â inspÂ :Â inspector?Â =Â (current-code-inspector)
procedure
(expand-syntax-to-top-formÂ stxÂ [insp])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â inspÂ :Â inspector?Â =Â (current-code-inspector)
procedure
(syntax-serialize                                                   Â 
Â                 Â  stx                                              Â 
Â                 Â  #:preserve-property-keysÂ preserve-property-keys  Â 
Â                 Â [#:provides-namespaceÂ provides-namespace          Â 
Â                 Â  #:base-module-path-indexÂ base-module-path-index])Â 
Â ->Â any/c
Â Â stxÂ :Â syntax?
Â Â preserve-property-keysÂ :Â (listofÂ symbol?)
Â Â provides-namespaceÂ :Â (or/cÂ namespace?Â #f)
Â  Â                  Â =Â (current-namespace)
Â Â base-module-path-indexÂ :Â (or/cÂ module-path-index?Â #f)Â =Â #f
procedure
(syntax-deserialize                                                   Â 
Â                   Â  v                                                Â 
Â                   Â [#:base-module-path-indexÂ base-module-path-index])Â 
Â ->Â syntax?
Â Â vÂ :Â any/c
Â Â base-module-path-indexÂ :Â (or/cÂ module-path-index?Â #f)Â =Â #f
syntax
(includeÂ path-spec)
Â 
path-specÂ =Â string
        Â Â |Â (fileÂ string)
        Â Â |Â (libÂ stringÂ ...+)
syntax
(include-at/relative-toÂ contextÂ sourceÂ path-spec)
syntax
(include/readerÂ path-specÂ reader-expr)
syntax
(include-at/relative-to/readerÂ contextÂ sourceÂ path-specÂ reader-expr)
procedure
(format-idÂ  lctx                          Â Â  Â Â 
Â          Â  fmt                           Â Â  Â Â 
Â          Â  vÂ ...                         Â Â  Â Â 
Â          Â [#:sourceÂ src                  Â Â  Â Â 
Â          Â  #:propsÂ props                 Â Â  Â Â 
Â          Â  #:certÂ ignored                Â Â  Â Â 
Â          Â  #:subs?Â subs?                 Â Â  Â Â 
Â          Â  #:subs-introÂ subs-introducer])Â ->Â identifier?
Â Â lctxÂ :Â (or/cÂ syntax?Â #f)
Â Â fmtÂ :Â string?
Â Â vÂ :Â (or/cÂ string?Â symbol?Â keyword?Â char?Â number?
      Â Â Â Â Â Â (syntax/cÂ (or/cÂ string?Â symbol?Â keyword?Â char?Â number?)))
Â Â srcÂ :Â (or/cÂ syntax?Â #f)Â =Â #f
Â Â propsÂ :Â (or/cÂ syntax?Â #f)Â =Â #f
Â Â ignoredÂ :Â (or/cÂ syntax?Â #f)Â =Â #f
Â Â subs?Â :Â boolean?Â =Â #f
Â Â subs-introducerÂ :Â (->Â syntax?Â syntax?)
Â  Â               Â =Â (ifÂ (syntax-transforming?)Â syntax-local-introduceÂ values)
procedure
(format-symbolÂ fmtÂ vÂ ...)Â ->Â symbol?
Â Â fmtÂ :Â string?
Â Â vÂ :Â (or/cÂ string?Â symbol?Â keyword?Â char?Â number?
      Â Â Â Â Â Â (syntax/cÂ (or/cÂ string?Â symbol?Â keyword?Â char?Â number?)))
syntax
(define/with-syntaxÂ patternÂ stx-expr)
Â 
Â Â stx-exprÂ :Â syntax?
parameter
(current-syntax-context)Â ->Â (or/cÂ syntax?Â false/c)
(current-syntax-contextÂ stx)Â ->Â void?
Â Â stxÂ :Â (or/cÂ syntax?Â false/c)
procedure
(wrong-syntaxÂ stxÂ format-stringÂ vÂ ...)Â ->Â any
Â Â stxÂ :Â syntax?
Â Â format-stringÂ :Â string?
Â Â vÂ :Â any/c
parameter
(current-recorded-disappeared-uses)
Â ->Â (or/cÂ (listofÂ identifier?)Â false/c)
(current-recorded-disappeared-usesÂ ids)Â ->Â void?
Â Â idsÂ :Â (or/cÂ (listofÂ identifier?)Â false/c)
syntax
(with-disappeared-usesÂ body-exprÂ ...Â stx-expr)
Â 
Â Â stx-exprÂ :Â syntax?
procedure
(syntax-local-value/recordÂ idÂ predicate)Â ->Â any/c
Â Â idÂ :Â identifier?
Â Â predicateÂ :Â (->Â any/cÂ boolean?)
procedure
(record-disappeared-usesÂ idÂ [intro?])Â ->Â void?
Â Â idÂ :Â (or/cÂ identifier?Â (listofÂ identifier?))
Â Â intro?Â :Â boolean?Â =Â (syntax-transforming?)
procedure
(generate-temporaryÂ [name-base])Â ->Â identifier?
Â Â name-baseÂ :Â any/cÂ =Â 'g
procedure
(internal-definition-context-applyÂ intdef-ctxÂ Â  Â Â 
Â                                  Â stx)      Â ->Â syntax?
Â Â intdef-ctxÂ :Â internal-definition-context?
Â Â stxÂ :Â syntax?
procedure
(syntax-local-evalÂ stxÂ [intdef-ctx])Â ->Â any
Â Â stxÂ :Â any/c
Â Â intdef-ctxÂ :Â (or/cÂ internal-definition-context?
               Â Â Â Â Â Â #f
               Â Â Â Â Â Â (listofÂ internal-definition-context?))
Â  Â          Â =Â '()
syntax
(with-syntax*Â ([patternÂ stx-expr]Â ...)
Â Â bodyÂ ...+)
Â 
Â Â stx-exprÂ :Â syntax?
procedure
(phase?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(space?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(phase+space?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(phase+spaceÂ phaseÂ space)Â ->Â phase+space?
Â Â phaseÂ :Â phase?
Â Â spaceÂ :Â space?
procedure
(phase+space-phaseÂ p+s)Â ->Â phase?
Â Â p+sÂ :Â phase+space?
procedure
(phase+space-spaceÂ p+s)Â ->Â phase?
Â Â p+sÂ :Â phase+space?
procedure
(phase+space-shift?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(phase+space+Â p+sÂ shift)Â ->Â phase+space?
Â Â p+sÂ :Â phase+space?
Â Â shiftÂ :Â phase+space-shift?
procedure
(phase+space-shift+Â shiftÂ additional-shift)Â ->Â phase+space-shift?
Â Â shiftÂ :Â phase+space?
Â Â additional-shiftÂ :Â phase+space-shift?
parameter
(current-locale)Â ->Â (or/cÂ string?Â #f)
(current-localeÂ locale)Â ->Â void?
Â Â localeÂ :Â (or/cÂ string?Â #f)
procedure
(input-port?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(output-port?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(port?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(close-input-portÂ in)Â ->Â void?
Â Â inÂ :Â input-port?
procedure
(close-output-portÂ out)Â ->Â void?
Â Â outÂ :Â output-port?
procedure
(port-closed?Â port)Â ->Â boolean?
Â Â portÂ :Â port?
procedure
(port-closed-evtÂ port)Â ->Â evt?
Â Â portÂ :Â port?
parameter
(current-input-port)Â ->Â input-port?
(current-input-portÂ in)Â ->Â void?
Â Â inÂ :Â input-port?
parameter
(current-output-port)Â ->Â output-port?
(current-output-portÂ out)Â ->Â void?
Â Â outÂ :Â output-port?
parameter
(current-error-port)Â ->Â output-port?
(current-error-portÂ out)Â ->Â void?
Â Â outÂ :Â output-port?
procedure
(file-stream-port?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(terminal-port?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(port-waiting-peer?Â port)Â ->Â boolean?
Â Â portÂ :Â port?
value
eofÂ :Â eof-object?
procedure
(eof-object?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(flush-outputÂ [out])Â ->Â void?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(file-stream-buffer-modeÂ port)Â ->Â (or/cÂ 'noneÂ 'lineÂ 'blockÂ #f)
Â Â portÂ :Â port?
(file-stream-buffer-modeÂ portÂ mode)Â ->Â void?
Â Â portÂ :Â port?
Â Â modeÂ :Â (or/cÂ 'noneÂ 'lineÂ 'block)
procedure
(file-positionÂ port)Â ->Â exact-nonnegative-integer?
Â Â portÂ :Â port?
(file-positionÂ portÂ pos)Â ->Â void?
Â Â portÂ :Â port?
Â Â posÂ :Â (or/cÂ exact-nonnegative-integer?Â eof-object?)
procedure
(file-position*Â port)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â portÂ :Â port?
procedure
(file-truncateÂ portÂ size)Â ->Â void?
Â Â portÂ :Â (and/cÂ output-port?Â file-stream-port?)
Â Â sizeÂ :Â exact-nonnegative-integer?
procedure
(port-count-lines!Â port)Â ->Â void?
Â Â portÂ :Â port?
procedure
(port-counts-lines?Â port)Â ->Â boolean?
Â Â portÂ :Â port?
procedure
(port-next-locationÂ port)
Â ->Â (or/cÂ exact-positive-integer?Â #f)
    (or/cÂ exact-nonnegative-integer?Â #f)
    (or/cÂ exact-positive-integer?Â #f)
Â Â portÂ :Â port?
procedure
(set-port-next-location!Â port     Â Â  Â Â 
Â                        Â line     Â Â  Â Â 
Â                        Â column   Â Â  Â Â 
Â                        Â position)Â ->Â void?
Â Â portÂ :Â port?
Â Â lineÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â columnÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â positionÂ :Â (or/cÂ exact-positive-integer?Â #f)
parameter
(port-count-lines-enabled)Â ->Â boolean?
(port-count-lines-enabledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
procedure
(open-input-fileÂ  path                       Â Â  Â Â 
Â                Â [#:modeÂ mode-flag           Â Â  Â Â 
Â                Â  #:for-module?Â for-module?])Â ->Â input-port?
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â for-module?Â :Â any/cÂ =Â #f
procedure
(open-output-fileÂ  path                                        Â 
Â                 Â [#:modeÂ mode-flag                            Â 
Â                 Â  #:existsÂ exists-flag                        Â 
Â                 Â  #:permissionsÂ permissions]                  Â 
Â                 Â  #:replace-permissions?Â replace-permissions?)Â 
Â ->Â output-port?
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'updateÂ 'can-update
                Â Â Â Â Â Â 'replaceÂ 'truncate
                Â Â Â Â Â Â 'must-truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
Â Â permissionsÂ :Â (integer-inÂ 0Â 65535)Â =Â #o666
Â Â replace-permissions?Â :Â #f
procedure
(open-input-output-file                                              Â 
Â                       Â  path                                        Â 
Â                       Â [#:modeÂ mode-flag                            Â 
Â                       Â  #:existsÂ exists-flag                        Â 
Â                       Â  #:permissionsÂ permissions]                  Â 
Â                       Â  #:replace-permissions?Â replace-permissions?)Â 
Â ->Â input-port?Â output-port?
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'updateÂ 'can-update
                Â Â Â Â Â Â 'replaceÂ 'truncate
                Â Â Â Â Â Â 'must-truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
Â Â permissionsÂ :Â (integer-inÂ 0Â 65535)Â =Â #o666
Â Â replace-permissions?Â :Â #f
procedure
(call-with-input-fileÂ  path              Â Â  Â Â 
Â                     Â  proc              Â Â  Â Â 
Â                     Â [#:modeÂ mode-flag])Â ->Â any
Â Â pathÂ :Â path-string?
Â Â procÂ :Â (input-port?Â . -> .Â any)
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(call-with-output-file                                              Â 
Â                      Â  path                                        Â 
Â                      Â  proc                                        Â 
Â                      Â [#:modeÂ mode-flag                            Â 
Â                      Â  #:existsÂ exists-flag                        Â 
Â                      Â  #:permissionsÂ permissions]                  Â 
Â                      Â  #:replace-permissions?Â replace-permissions?)Â 
Â ->Â any
Â Â pathÂ :Â path-string?
Â Â procÂ :Â (output-port?Â . -> .Â any)
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'updateÂ 'can-update
                Â Â Â Â Â Â 'replaceÂ 'truncate
                Â Â Â Â Â Â 'must-truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
Â Â permissionsÂ :Â (integer-inÂ 0Â 65535)Â =Â #o666
Â Â replace-permissions?Â :Â #f
procedure
(call-with-input-file*Â  path              Â Â  Â Â 
Â                      Â  proc              Â Â  Â Â 
Â                      Â [#:modeÂ mode-flag])Â ->Â any
Â Â pathÂ :Â path-string?
Â Â procÂ :Â (input-port?Â . -> .Â any)
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(call-with-output-file*                                              Â 
Â                       Â  path                                        Â 
Â                       Â  proc                                        Â 
Â                       Â [#:modeÂ mode-flag                            Â 
Â                       Â  #:existsÂ exists-flag                        Â 
Â                       Â  #:permissionsÂ permissions]                  Â 
Â                       Â  #:replace-permissions?Â replace-permissions?)Â 
Â ->Â any
Â Â pathÂ :Â path-string?
Â Â procÂ :Â (output-port?Â . -> .Â any)
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'updateÂ 'can-update
                Â Â Â Â Â Â 'replaceÂ 'truncate
                Â Â Â Â Â Â 'must-truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
Â Â permissionsÂ :Â (integer-inÂ 0Â 65535)Â =Â #o666
Â Â replace-permissions?Â :Â #f
procedure
(with-input-from-fileÂ  path              Â Â  Â Â 
Â                     Â  thunk             Â Â  Â Â 
Â                     Â [#:modeÂ mode-flag])Â ->Â any
Â Â pathÂ :Â path-string?
Â Â thunkÂ :Â (->Â any)
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(with-output-to-file                                              Â 
Â                    Â  path                                        Â 
Â                    Â  thunk                                       Â 
Â                    Â [#:modeÂ mode-flag                            Â 
Â                    Â  #:existsÂ exists-flag                        Â 
Â                    Â  #:permissionsÂ permissions]                  Â 
Â                    Â  #:replace-permissions?Â replace-permissions?)Â 
Â ->Â any
Â Â pathÂ :Â path-string?
Â Â thunkÂ :Â (->Â any)
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'updateÂ 'can-update
                Â Â Â Â Â Â 'replaceÂ 'truncate
                Â Â Â Â Â Â 'must-truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
Â Â permissionsÂ :Â (integer-inÂ 0Â 65535)Â =Â #o666
Â Â replace-permissions?Â :Â #f
procedure
(port-try-file-lock?Â portÂ mode)Â ->Â boolean?
Â Â portÂ :Â file-stream-port?
Â Â modeÂ :Â (or/cÂ 'sharedÂ 'exclusive)
procedure
(port-file-unlockÂ port)Â ->Â void?
Â Â portÂ :Â file-stream-port?
procedure
(port-file-identityÂ port)Â ->Â exact-positive-integer?
Â Â portÂ :Â file-stream-port?
procedure
(string-port?Â p)Â ->Â boolean?
Â Â pÂ :Â port?
procedure
(open-input-bytesÂ bstrÂ [name])Â ->Â (and/cÂ input-port?Â string-port?)
Â Â bstrÂ :Â bytes?
Â Â nameÂ :Â any/cÂ =Â 'string
procedure
(open-input-stringÂ strÂ [name])Â ->Â (and/cÂ input-port?Â string-port?)
Â Â strÂ :Â string?
Â Â nameÂ :Â any/cÂ =Â 'string
procedure
(open-output-bytesÂ [name])Â ->Â (and/cÂ output-port?Â string-port?)
Â Â nameÂ :Â any/cÂ =Â 'string
procedure
(open-output-stringÂ [name])Â ->Â (and/cÂ output-port?Â string-port?)
Â Â nameÂ :Â any/cÂ =Â 'string
procedure
(get-output-bytesÂ  out      Â Â  Â Â 
Â                 Â [reset?   Â Â  Â Â 
Â                 Â  start-posÂ Â  Â Â 
Â                 Â  end-pos])Â ->Â bytes?
Â Â outÂ :Â (and/cÂ output-port?Â string-port?)
Â Â reset?Â :Â any/cÂ =Â #f
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â #f
procedure
(get-output-stringÂ out)Â ->Â string?
Â Â outÂ :Â (and/cÂ output-port?Â string-port?)
procedure
(make-pipeÂ [limitÂ input-nameÂ output-name])
Â ->Â input-port?Â output-port?
Â Â limitÂ :Â exact-positive-integer?Â =Â #f
Â Â input-nameÂ :Â any/cÂ =Â 'pipe
Â Â output-nameÂ :Â any/cÂ =Â 'pipe
procedure
(pipe-content-lengthÂ pipe-port)Â ->Â exact-nonnegative-integer?
Â Â pipe-portÂ :Â port?
value
prop:input-portÂ :Â struct-type-property?
value
prop:output-portÂ :Â struct-type-property?
procedure
(make-input-portÂ  name            Â Â  Â Â 
Â                Â  read-in         Â Â  Â Â 
Â                Â  peek            Â Â  Â Â 
Â                Â  close           Â Â  Â Â 
Â                Â [get-progress-evtÂ Â  Â Â 
Â                Â  commit          Â Â  Â Â 
Â                Â  get-location    Â Â  Â Â 
Â                Â  count-lines!    Â Â  Â Â 
Â                Â  init-position   Â Â  Â Â 
Â                Â  buffer-mode])   Â ->Â input-port?
Â Â nameÂ :Â any/c
Â Â read-inÂ :Â (or/c
            Â (bytes?
            Â Â . -> .Â (or/cÂ exact-nonnegative-integer?
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?))
            Â input-port?)
Â Â peekÂ :Â (or/c
         Â (bytes?Â exact-nonnegative-integer?Â (or/cÂ evt?Â #f)
         Â Â Â Â Â Â Â Â Â . -> .Â (or/cÂ exact-nonnegative-integer?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f))
         Â input-port?
         Â #f)
Â Â closeÂ :Â (->Â any)
Â Â get-progress-evtÂ :Â (or/cÂ (->Â evt?)Â #f)Â =Â #f
Â Â commitÂ :Â (or/cÂ (exact-positive-integer?Â evt?Â evt?Â . -> .Â any)
           Â Â Â Â Â Â #f)
Â  Â      Â =Â #f
Â Â get-locationÂ :Â (or/c
                 Â (->
                 Â Â (valuesÂ (or/cÂ exact-positive-integer?Â #f)
                 Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
                 Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)))
                 Â #f)
Â  Â            Â =Â #f
Â Â count-lines!Â :Â (->Â any)Â =Â void
Â Â init-positionÂ :Â (or/cÂ exact-positive-integer?
                  Â Â Â Â Â Â port?
                  Â Â Â Â Â Â #f
                  Â Â Â Â Â Â (->Â (or/cÂ exact-positive-integer?Â #f)))
Â  Â             Â =Â 1
Â Â buffer-modeÂ :Â (or/cÂ (case->Â ((or/cÂ 'blockÂ 'none)Â . -> .Â any)
                Â Â Â Â Â Â Â Â Â Â Â Â Â Â (->Â (or/cÂ 'blockÂ 'noneÂ #f)))
                Â Â Â Â Â Â #f)
Â  Â           Â =Â #f
procedure
(make-output-portÂ  name                 Â Â  Â Â 
Â                 Â  evt                  Â Â  Â Â 
Â                 Â  write-out            Â Â  Â Â 
Â                 Â  close                Â Â  Â Â 
Â                 Â [write-out-special    Â Â  Â Â 
Â                 Â  get-write-evt        Â Â  Â Â 
Â                 Â  get-write-special-evtÂ Â  Â Â 
Â                 Â  get-location         Â Â  Â Â 
Â                 Â  count-lines!         Â Â  Â Â 
Â                 Â  init-position        Â Â  Â Â 
Â                 Â  buffer-mode])        Â ->Â output-port?
Â Â nameÂ :Â any/c
Â Â evtÂ :Â evt?
Â Â write-outÂ :Â (or/c
              Â (bytes?Â exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â boolean?
              Â Â Â Â Â Â Â Â Â boolean?
              Â Â Â Â Â Â Â Â Â . -> .
              Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?))
              Â output-port?)
Â Â closeÂ :Â (->Â any)
Â Â write-out-specialÂ :Â (or/cÂ (any/cÂ boolean?Â boolean?Â =Â #f
                      Â Â Â Â Â Â Â Â Â Â Â Â Â . -> .
                      Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ any/c
                      Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f
                      Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?))
                      Â Â Â Â Â Â output-port?
                      Â Â Â Â Â Â #f)
Â Â get-write-evtÂ :Â (or/c                              Â =Â #f
                  Â (bytes?Â exact-nonnegative-integer?
                  Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?
                  Â Â Â Â Â Â Â Â Â . -> .
                  Â Â Â Â Â Â Â Â Â evt?)
                  Â #f)
Â Â get-write-special-evtÂ :Â (or/c               Â =Â #f
                          Â (any/cÂ . -> .Â evt?)
                          Â #f)
Â Â get-locationÂ :Â (or/c
                 Â (->
                 Â Â (valuesÂ (or/cÂ exact-positive-integer?Â #f)
                 Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
                 Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)))
                 Â #f)
Â  Â            Â =Â #f
Â Â count-lines!Â :Â (->Â any)Â =Â void
Â Â init-positionÂ :Â (or/cÂ exact-positive-integer?
                  Â Â Â Â Â Â port?
                  Â Â Â Â Â Â #f
                  Â Â Â Â Â Â (->Â (or/cÂ exact-positive-integer?Â #f)))
Â  Â             Â =Â 1
Â Â buffer-modeÂ :Â (or/cÂ (case->
                Â Â Â Â Â Â Â ((or/cÂ 'blockÂ 'lineÂ 'none)Â . -> .Â any)
                Â Â Â Â Â Â Â (->Â (or/cÂ 'blockÂ 'lineÂ 'noneÂ #f)))
                Â Â Â Â Â Â #f)
Â  Â           Â =Â #f
procedure
(port->listÂ [rÂ in])Â ->Â (listofÂ any/c)
Â Â rÂ :Â (input-port?Â . -> .Â any/c)Â =Â read
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(port->stringÂ [inÂ #:close?Â close?])Â ->Â string?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â close?Â :Â any/cÂ =Â #f
procedure
(port->bytesÂ [inÂ #:close?Â close?])Â ->Â bytes?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â close?Â :Â any/cÂ =Â #f
procedure
(port->linesÂ [in                   Â Â  Â Â 
Â            Â  #:line-modeÂ line-modeÂ Â  Â Â 
Â            Â  #:close?Â close?])    Â ->Â (listofÂ string?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â line-modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â         Â =Â 'any
Â Â close?Â :Â any/cÂ =Â #f
procedure
(port->bytes-linesÂ [in                   Â Â  Â Â 
Â                  Â  #:line-modeÂ line-modeÂ Â  Â Â 
Â                  Â  #:close?Â close?])    Â ->Â (listofÂ bytes?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â line-modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â         Â =Â 'any
Â Â close?Â :Â any/cÂ =Â #f
procedure
(display-linesÂ  lst                    Â Â  Â Â 
Â              Â [out                    Â Â  Â Â 
Â              Â  #:separatorÂ separator])Â ->Â void?
Â Â lstÂ :Â list?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â separatorÂ :Â any/cÂ =Â #"\n"
procedure
(call-with-output-stringÂ proc)Â ->Â string?
Â Â procÂ :Â (output-port?Â . -> .Â any)
procedure
(call-with-output-bytesÂ proc)Â ->Â bytes?
Â Â procÂ :Â (output-port?Â . -> .Â any)
procedure
(with-output-to-stringÂ proc)Â ->Â string?
Â Â procÂ :Â (->Â any)
procedure
(with-output-to-bytesÂ proc)Â ->Â bytes?
Â Â procÂ :Â (->Â any)
procedure
(call-with-input-stringÂ strÂ proc)Â ->Â any
Â Â strÂ :Â string?
Â Â procÂ :Â (input-port?Â . -> .Â any)
procedure
(call-with-input-bytesÂ bstrÂ proc)Â ->Â any
Â Â bstrÂ :Â bytes?
Â Â procÂ :Â (input-port?Â . -> .Â any)
procedure
(with-input-from-stringÂ strÂ proc)Â ->Â any
Â Â strÂ :Â string?
Â Â procÂ :Â (->Â any)
procedure
(with-input-from-bytesÂ bstrÂ proc)Â ->Â any
Â Â bstrÂ :Â bytes?
Â Â procÂ :Â (->Â any)
procedure
(input-port-appendÂ  close-at-eof?Â Â  Â Â 
Â                  Â  inÂ ...       Â Â  Â Â 
Â                  Â [#:nameÂ name])Â ->Â input-port?
Â Â close-at-eof?Â :Â any/c
Â Â inÂ :Â input-port?
Â Â nameÂ :Â any/cÂ =Â (mapÂ object-nameÂ in)
procedure
(make-input-port/read-to-peekÂ  name         Â Â  Â Â 
Â                             Â  read-in      Â Â  Â Â 
Â                             Â  fast-peek    Â Â  Â Â 
Â                             Â  close        Â Â  Â Â 
Â                             Â [get-location Â Â  Â Â 
Â                             Â  count-lines! Â Â  Â Â 
Â                             Â  init-positionÂ Â  Â Â 
Â                             Â  buffer-mode  Â Â  Â Â 
Â                             Â  buffering?   Â Â  Â Â 
Â                             Â  on-consumed])Â ->Â input-port?
Â Â nameÂ :Â any/c
Â Â read-inÂ :Â (bytes?
            Â . -> .Â (or/cÂ exact-nonnegative-integer?
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?))
Â Â fast-peekÂ :Â (or/cÂ #f
              Â Â Â Â Â Â (bytes?Â exact-nonnegative-integer?
              Â Â Â Â Â Â Â (bytes?Â exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â . -> .Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f))
              Â Â Â Â Â Â Â . -> .Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â #f)))
Â Â closeÂ :Â (->Â any)
Â Â get-locationÂ :Â (or/c                                  Â =Â #f
                 Â (->
                 Â Â (values
                 Â Â Â (or/cÂ exact-positive-integer?Â #f)
                 Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
                 Â Â Â (or/cÂ exact-positive-integer?Â #f)))
                 Â #f)
Â Â count-lines!Â :Â (->Â any)Â =Â void
Â Â init-positionÂ :Â exact-positive-integer?Â =Â 1
Â Â buffer-modeÂ :Â (or/cÂ (case->Â ((or/cÂ 'blockÂ 'none)Â . -> .Â any)
                Â Â Â Â Â Â Â Â Â Â Â Â Â Â (->Â (or/cÂ 'blockÂ 'noneÂ #f)))
                Â Â Â Â Â Â #f)
Â  Â           Â =Â #f
Â Â buffering?Â :Â any/cÂ =Â #f
Â Â on-consumedÂ :Â (or/cÂ ((or/cÂ exact-nonnegative-integer?Â eof-object?
                Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?Â evt?)
                Â Â Â Â Â Â Â . -> .Â any)
                Â Â Â Â Â Â #f)
Â  Â           Â =Â #f
procedure
(make-limited-input-portÂ  in           Â Â  Â Â 
Â                        Â  limit        Â Â  Â Â 
Â                        Â [close-orig?])Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â limitÂ :Â exact-nonnegative-integer?
Â Â close-orig?Â :Â any/cÂ =Â #t
procedure
(make-pipe-with-specialsÂ [limit     Â Â  Â Â 
Â                        Â  in-name   Â Â  Â Â 
Â                        Â  out-name])Â ->Â input-port?Â output-port?
Â Â limitÂ :Â exact-nonnegative-integer?Â =Â #f
Â Â in-nameÂ :Â any/cÂ =Â 'pipe
Â Â out-nameÂ :Â any/cÂ =Â 'pipe
procedure
(combine-outputÂ a-outÂ b-out)Â ->Â output-port?
Â Â a-outÂ :Â output-port?
Â Â b-outÂ :Â output-port?
procedure
(merge-inputÂ a-inÂ b-inÂ [buffer-limit])Â ->Â input-port?
Â Â a-inÂ :Â input-port?
Â Â b-inÂ :Â input-port?
Â Â buffer-limitÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)Â =Â 4096
procedure
(open-output-nowhereÂ [nameÂ special-ok?])Â ->Â output-port?
Â Â nameÂ :Â any/cÂ =Â 'nowhere
Â Â special-ok?Â :Â any/cÂ =Â #t
procedure
(peeking-input-portÂ  in                             Â 
Â                   Â [name                           Â 
Â                   Â  skip                           Â 
Â                   Â  #:init-positionÂ init-position])Â 
Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â nameÂ :Â any/cÂ =Â (object-nameÂ in)
Â Â skipÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â init-positionÂ :Â exact-positive-integer?Â =Â 1
procedure
(reencode-input-portÂ  in               Â Â  Â Â 
Â                    Â  encoding         Â Â  Â Â 
Â                    Â [error-bytes      Â Â  Â Â 
Â                    Â  close?           Â Â  Â Â 
Â                    Â  name             Â Â  Â Â 
Â                    Â  convert-newlines?Â Â  Â Â 
Â                    Â  enc-error])      Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â encodingÂ :Â string?
Â Â error-bytesÂ :Â (or/cÂ #fÂ bytes?)Â =Â #f
Â Â close?Â :Â any/cÂ =Â #f
Â Â nameÂ :Â any/cÂ =Â (object-nameÂ in)
Â Â convert-newlines?Â :Â any/cÂ =Â #f
Â Â enc-errorÂ :Â (string?Â input-port?Â . -> .Â any)
Â  Â         Â =Â (lambdaÂ (msgÂ port)Â (errorÂ ...))
procedure
(reencode-output-portÂ  out          Â Â  Â Â 
Â                     Â  encoding     Â Â  Â Â 
Â                     Â [error-bytes  Â Â  Â Â 
Â                     Â  close?       Â Â  Â Â 
Â                     Â  name         Â Â  Â Â 
Â                     Â  newline-bytesÂ Â  Â Â 
Â                     Â  enc-error])  Â ->Â output-port?
Â Â outÂ :Â output-port?
Â Â encodingÂ :Â string?
Â Â error-bytesÂ :Â (or/cÂ #fÂ bytes?)Â =Â #f
Â Â close?Â :Â any/cÂ =Â #f
Â Â nameÂ :Â any/cÂ =Â (object-nameÂ out)
Â Â newline-bytesÂ :Â (or/cÂ #fÂ bytes?)Â =Â #f
Â Â enc-errorÂ :Â (string?Â output-port?Â . -> .Â any)
Â  Â         Â =Â (lambdaÂ (msgÂ port)Â (errorÂ ...))
procedure
(dup-input-portÂ inÂ [close?])Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â close?Â :Â any/cÂ =Â #f
procedure
(dup-output-portÂ outÂ [close?])Â ->Â output-port?
Â Â outÂ :Â output-port?
Â Â close?Â :Â any/cÂ =Â #f
procedure
(relocate-input-portÂ  in          Â Â  Â Â 
Â                    Â  line        Â Â  Â Â 
Â                    Â  column      Â Â  Â Â 
Â                    Â  position    Â Â  Â Â 
Â                    Â [close?]     Â Â  Â Â 
Â                    Â  #:nameÂ name)Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â lineÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â columnÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â positionÂ :Â exact-positive-integer?
Â Â close?Â :Â any/cÂ =Â #t
Â Â nameÂ :Â (object-nameÂ in)
procedure
(relocate-output-portÂ  out         Â Â  Â Â 
Â                     Â  line        Â Â  Â Â 
Â                     Â  column      Â Â  Â Â 
Â                     Â  position    Â Â  Â Â 
Â                     Â [close?]     Â Â  Â Â 
Â                     Â  #:nameÂ name)Â ->Â output-port?
Â Â outÂ :Â output-port?
Â Â lineÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â columnÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â positionÂ :Â exact-positive-integer?
Â Â close?Â :Â any/cÂ =Â #t
Â Â nameÂ :Â (object-nameÂ out)
procedure
(transplant-input-portÂ  in           Â Â  Â Â 
Â                      Â  get-location Â Â  Â Â 
Â                      Â  init-pos     Â Â  Â Â 
Â                      Â [close?       Â Â  Â Â 
Â                      Â  count-lines!]Â Â  Â Â 
Â                      Â  #:nameÂ name) Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â get-locationÂ :Â (or/c
                 Â (->
                 Â Â (values
                 Â Â Â (or/cÂ exact-positive-integer?Â #f)
                 Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
                 Â Â Â (or/cÂ exact-positive-integer?Â #f)))
                 Â #f)
Â Â init-posÂ :Â exact-positive-integer?
Â Â close?Â :Â any/cÂ =Â #t
Â Â count-lines!Â :Â (->Â any)Â =Â void
Â Â nameÂ :Â (object-nameÂ in)
procedure
(transplant-output-portÂ  out          Â Â  Â Â 
Â                       Â  get-location Â Â  Â Â 
Â                       Â  init-pos     Â Â  Â Â 
Â                       Â [close?       Â Â  Â Â 
Â                       Â  count-lines!]Â Â  Â Â 
Â                       Â  #:nameÂ name) Â ->Â output-port?
Â Â outÂ :Â output-port?
Â Â get-locationÂ :Â (or/c
                 Â (->
                 Â Â (values
                 Â Â Â (or/cÂ exact-positive-integer?Â #f)
                 Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
                 Â Â Â (or/cÂ exact-positive-integer?Â #f)))
                 Â #f)
Â Â init-posÂ :Â exact-positive-integer?
Â Â close?Â :Â any/cÂ =Â #t
Â Â count-lines!Â :Â (->Â any)Â =Â void
Â Â nameÂ :Â (object-nameÂ out)
procedure
(filter-read-input-portÂ  in       Â Â  Â Â 
Â                       Â  read-wrapÂ Â  Â Â 
Â                       Â  peek-wrapÂ Â  Â Â 
Â                       Â [close?]) Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â read-wrapÂ :Â (bytes?Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?)
              Â Â Â Â Â Â Â Â . -> .
              Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
              Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?))
Â Â peek-wrapÂ :Â (bytes?Â exact-nonnegative-integer?Â (or/cÂ evt?Â #f)
              Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â eof-object?
              Â Â Â Â Â Â Â Â Â procedure?
              Â Â Â Â Â Â Â Â Â evt?
              Â Â Â Â Â Â Â Â Â #f)
              Â . -> .Â (or/cÂ exact-nonnegative-integer?
              Â Â Â Â Â Â Â Â Â eof-object?
              Â Â Â Â Â Â Â Â Â procedure?
              Â Â Â Â Â Â Â Â Â evt?
              Â Â Â Â Â Â Â Â Â #f))
Â Â close?Â :Â any/cÂ =Â #t
procedure
(special-filter-input-portÂ inÂ procÂ [close?])Â ->Â input-port?
Â Â inÂ :Â input-port?
Â Â procÂ :Â (procedure?Â bytes?Â . -> .Â (or/cÂ exact-nonnegative-integer?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â eof-object?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â procedure?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â evt?))
Â Â close?Â :Â any/cÂ =Â #t
procedure
(eof-evtÂ in)Â ->Â evt?
Â Â inÂ :Â input-port?
procedure
(read-bytes-evtÂ kÂ in)Â ->Â evt?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?
procedure
(read-bytes!-evtÂ bstrÂ in)Â ->Â evt?
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â inÂ :Â input-port?
procedure
(read-bytes-avail!-evtÂ bstrÂ in)Â ->Â evt?
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â inÂ :Â input-port?
procedure
(read-string-evtÂ kÂ in)Â ->Â evt?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?
procedure
(read-string!-evtÂ strÂ in)Â ->Â evt?
Â Â strÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â inÂ :Â input-port?
procedure
(read-line-evtÂ inÂ [mode])Â ->Â evt?
Â Â inÂ :Â input-port?
Â Â modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â    Â =Â 'linefeed
procedure
(read-bytes-line-evtÂ inÂ [mode])Â ->Â evt?
Â Â inÂ :Â input-port?
Â Â modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â    Â =Â 'linefeed
procedure
(peek-bytes-evtÂ kÂ skipÂ progress-evtÂ in)Â ->Â evt?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â skipÂ :Â exact-nonnegative-integer?
Â Â progress-evtÂ :Â (or/cÂ progress-evt?Â #f)
Â Â inÂ :Â input-port?
(peek-bytes!-evtÂ bstrÂ skipÂ progress-evtÂ in)Â ->Â evt?
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â skipÂ :Â exact-nonnegative-integer?
Â Â progress-evtÂ :Â (or/cÂ progress-evt?Â #f)
Â Â inÂ :Â input-port?
(peek-bytes-avail!-evtÂ bstr        Â Â  Â Â 
Â                      Â skip        Â Â  Â Â 
Â                      Â progress-evtÂ Â  Â Â 
Â                      Â in)         Â ->Â evt?
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â skipÂ :Â exact-nonnegative-integer?
Â Â progress-evtÂ :Â (or/cÂ progress-evt?Â #f)
Â Â inÂ :Â input-port?
(peek-string-evtÂ kÂ skipÂ progress-evtÂ in)Â ->Â evt?
Â Â kÂ :Â exact-nonnegative-integer?
Â Â skipÂ :Â exact-nonnegative-integer?
Â Â progress-evtÂ :Â (or/cÂ progress-evt?Â #f)
Â Â inÂ :Â input-port?
(peek-string!-evtÂ strÂ skipÂ progress-evtÂ in)Â ->Â evt?
Â Â strÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â skipÂ :Â exact-nonnegative-integer?
Â Â progress-evtÂ :Â (or/cÂ progress-evt?Â #f)
Â Â inÂ :Â input-port?
procedure
(regexp-match-evtÂ patternÂ in)Â ->Â any
Â Â patternÂ :Â (or/cÂ string?Â bytes?Â regexp?Â byte-regexp?)
Â Â inÂ :Â input-port?
procedure
(convert-streamÂ from-encodingÂ Â  Â Â 
Â               Â in           Â Â  Â Â 
Â               Â to-encoding  Â Â  Â Â 
Â               Â out)         Â ->Â void?
Â Â from-encodingÂ :Â string?
Â Â inÂ :Â input-port?
Â Â to-encodingÂ :Â string?
Â Â outÂ :Â output-port?
procedure
(copy-portÂ inÂ outÂ ...+)Â ->Â void?
Â Â inÂ :Â input-port?
Â Â outÂ :Â output-port?
procedure
(read-charÂ [in])Â ->Â (or/cÂ char?Â eof-object?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(read-byteÂ [in])Â ->Â (or/cÂ byte?Â eof-object?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(read-lineÂ [inÂ mode])Â ->Â (or/cÂ string?Â eof-object?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â    Â =Â 'linefeed
procedure
(read-bytes-lineÂ [inÂ mode])Â ->Â (or/cÂ bytes?Â eof-object?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â    Â =Â 'linefeed
procedure
(read-stringÂ amtÂ [in])Â ->Â (or/cÂ string?Â eof-object?)
Â Â amtÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(read-bytesÂ amtÂ [in])Â ->Â (or/cÂ bytes?Â eof-object?)
Â Â amtÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(read-string!Â strÂ [inÂ start-posÂ end-pos])
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?)
Â Â strÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(read-bytes!Â bstrÂ [inÂ start-posÂ end-pos])
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?)
Â Â bstrÂ :Â bytes?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(read-bytes-avail!Â bstrÂ [inÂ start-posÂ end-pos])
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?Â procedure?)
Â Â bstrÂ :Â bytes?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(read-bytes-avail!*Â  bstr     Â 
Â                   Â [in       Â 
Â                   Â  start-posÂ 
Â                   Â  end-pos])Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?Â procedure?)
Â Â bstrÂ :Â bytes?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(read-bytes-avail!/enable-breakÂ  bstr     Â 
Â                               Â [in       Â 
Â                               Â  start-posÂ 
Â                               Â  end-pos])Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?Â procedure?)
Â Â bstrÂ :Â bytes?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(peek-stringÂ amtÂ skip-bytes-amtÂ [in])Â ->Â (or/cÂ string?Â eof-object?)
Â Â amtÂ :Â exact-nonnegative-integer?
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(peek-bytesÂ amtÂ skip-bytes-amtÂ [in])Â ->Â (or/cÂ bytes?Â eof-object?)
Â Â amtÂ :Â exact-nonnegative-integer?
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(peek-string!Â  str           Â 
Â             Â  skip-bytes-amtÂ 
Â             Â [in            Â 
Â             Â  start-pos     Â 
Â             Â  end-pos])     Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?)
Â Â strÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(peek-bytes!Â  bstr          Â 
Â            Â  skip-bytes-amtÂ 
Â            Â [in            Â 
Â            Â  start-pos     Â 
Â            Â  end-pos])     Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?)
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(peek-bytes-avail!Â  bstr          Â 
Â                  Â  skip-bytes-amtÂ 
Â                  Â [progress      Â 
Â                  Â  in            Â 
Â                  Â  start-pos     Â 
Â                  Â  end-pos])     Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?Â procedure?)
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â progressÂ :Â (or/cÂ progress-evt?Â #f)Â =Â #f
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(peek-bytes-avail!*Â  bstr          Â 
Â                   Â  skip-bytes-amtÂ 
Â                   Â [progress      Â 
Â                   Â  in            Â 
Â                   Â  start-pos     Â 
Â                   Â  end-pos])     Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?Â procedure?)
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â progressÂ :Â (or/cÂ progress-evt?Â #f)Â =Â #f
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(peek-bytes-avail!/enable-breakÂ  bstr          Â 
Â                               Â  skip-bytes-amtÂ 
Â                               Â [progress      Â 
Â                               Â  in            Â 
Â                               Â  start-pos     Â 
Â                               Â  end-pos])     Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â eof-object?Â procedure?)
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?
Â Â progressÂ :Â (or/cÂ progress-evt?Â #f)Â =Â #f
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(read-char-or-specialÂ [in           Â 
Â                     Â  special-wrap Â 
Â                     Â  source-name])Â 
Â ->Â (or/cÂ char?Â eof-object?Â any/c)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â special-wrapÂ :Â (or/cÂ (any/cÂ ->Â any/c)Â #f)Â =Â #f
Â Â source-nameÂ :Â any/cÂ =Â #f
procedure
(read-byte-or-specialÂ [in           Â 
Â                     Â  special-wrap Â 
Â                     Â  source-name])Â 
Â ->Â (or/cÂ byte?Â eof-object?Â any/c)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â special-wrapÂ :Â (or/cÂ (any/cÂ ->Â any/c)Â #f)Â =Â #f
Â Â source-nameÂ :Â any/cÂ =Â #f
procedure
(peek-charÂ [inÂ skip-bytes-amt])Â ->Â (or/cÂ char?Â eof-object?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(peek-byteÂ [inÂ skip-bytes-amt])Â ->Â (or/cÂ byte?Â eof-object?)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?Â =Â 0
procedure
(peek-char-or-specialÂ [in            Â 
Â                     Â  skip-bytes-amtÂ 
Â                     Â  special-wrap  Â 
Â                     Â  source-name]) Â 
Â ->Â (or/cÂ char?Â eof-object?Â any/c)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â special-wrapÂ :Â (or/cÂ (any/cÂ ->Â any/c)Â #fÂ 'special)Â =Â #f
Â Â source-nameÂ :Â any/cÂ =Â #f
procedure
(peek-byte-or-specialÂ [in            Â 
Â                     Â  skip-bytes-amtÂ 
Â                     Â  progress      Â 
Â                     Â  special-wrap  Â 
Â                     Â  source-name]) Â 
Â ->Â (or/cÂ byte?Â eof-object?Â any/c)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â skip-bytes-amtÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â progressÂ :Â (or/cÂ progress-evt?Â #f)Â =Â #f
Â Â special-wrapÂ :Â (or/cÂ (any/cÂ ->Â any/c)Â #fÂ 'special)Â =Â #f
Â Â source-nameÂ :Â any/cÂ =Â #f
procedure
(port-progress-evtÂ [in])Â ->Â progress-evt?
Â Â inÂ :Â (and/cÂ input-port?Â port-provides-progress-evts?)
Â  Â  Â =Â (current-input-port)
procedure
(port-provides-progress-evts?Â in)Â ->Â boolean
Â Â inÂ :Â input-port?
procedure
(port-commit-peekedÂ amtÂ progressÂ evtÂ [in])Â ->Â boolean?
Â Â amtÂ :Â exact-nonnegative-integer?
Â Â progressÂ :Â progress-evt?
Â Â evtÂ :Â evt?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(byte-ready?Â [in])Â ->Â boolean?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(char-ready?Â [in])Â ->Â boolean?
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(progress-evt?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
(progress-evt?Â evtÂ in)Â ->Â boolean?
Â Â evtÂ :Â progress-evt?
Â Â inÂ :Â input-port?
procedure
(write-charÂ charÂ [out])Â ->Â void?
Â Â charÂ :Â char?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(write-byteÂ byteÂ [out])Â ->Â void?
Â Â byteÂ :Â byte?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(newlineÂ [out])Â ->Â void?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(write-stringÂ strÂ [outÂ start-posÂ end-pos])
Â ->Â exact-nonnegative-integer?
Â Â strÂ :Â string?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (string-lengthÂ str)
procedure
(write-bytesÂ bstrÂ [outÂ start-posÂ end-pos])
Â ->Â exact-nonnegative-integer?
Â Â bstrÂ :Â bytes?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(write-bytes-availÂ  bstr     Â Â  Â Â 
Â                  Â [out      Â Â  Â Â 
Â                  Â  start-posÂ Â  Â Â 
Â                  Â  end-pos])Â ->Â exact-nonnegative-integer?
Â Â bstrÂ :Â bytes?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(write-bytes-avail*Â  bstr     Â 
Â                   Â [out      Â 
Â                   Â  start-posÂ 
Â                   Â  end-pos])Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â bstrÂ :Â bytes?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(write-bytes-avail/enable-breakÂ  bstr     Â 
Â                               Â [out      Â 
Â                               Â  start-posÂ 
Â                               Â  end-pos])Â 
Â ->Â exact-nonnegative-integer?
Â Â bstrÂ :Â bytes?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(write-specialÂ vÂ [out])Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(write-special-avail*Â vÂ [out])Â ->Â boolean?
Â Â vÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(write-bytes-avail-evtÂ  bstr     Â Â  Â Â 
Â                      Â [out      Â Â  Â Â 
Â                      Â  start-posÂ Â  Â Â 
Â                      Â  end-pos])Â ->Â evt?
Â Â bstrÂ :Â bytes?
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(write-special-evtÂ vÂ [out])Â ->Â evt?
Â Â vÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(port-writes-atomic?Â out)Â ->Â boolean?
Â Â outÂ :Â output-port?
procedure
(port-writes-special?Â out)Â ->Â boolean?
Â Â outÂ :Â output-port?
procedure
(readÂ [in])Â ->Â any
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(read-syntaxÂ [source-nameÂ in])Â ->Â (or/cÂ syntax?Â eof-object?)
Â Â source-nameÂ :Â any/cÂ =Â (object-nameÂ (current-input-port))
Â Â inÂ :Â input-port?Â =Â (current-input-port)
procedure
(read/recursiveÂ [inÂ startÂ readtableÂ graph?])Â ->Â any
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â startÂ :Â (or/cÂ char?Â #f)Â =Â #f
Â Â readtableÂ :Â (or/cÂ readtable?Â #f)Â =Â (current-readtable)
Â Â graph?Â :Â any/cÂ =Â #t
procedure
(read-syntax/recursiveÂ [source-nameÂ Â  Â Â 
Â                      Â  in         Â Â  Â Â 
Â                      Â  start      Â Â  Â Â 
Â                      Â  readtable  Â Â  Â Â 
Â                      Â  graph?])   Â ->Â any
Â Â source-nameÂ :Â any/cÂ =Â (object-nameÂ in)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â startÂ :Â (or/cÂ char?Â #f)Â =Â #f
Â Â readtableÂ :Â (or/cÂ readtable?Â #f)Â =Â (current-readtable)
Â Â graph?Â :Â any/cÂ =Â #t
procedure
(read-languageÂ [inÂ fail-thunk])
Â ->Â (or/cÂ (any/cÂ any/cÂ . -> .Â any)Â #f)
Â Â inÂ :Â input-port?Â =Â (current-input-port)
Â Â fail-thunkÂ :Â (->Â any)Â =Â (lambdaÂ ()Â (errorÂ ...))
parameter
(read-case-sensitive)Â ->Â boolean?
(read-case-sensitiveÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-square-bracket-as-paren)Â ->Â boolean?
(read-square-bracket-as-parenÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-curly-brace-as-paren)Â ->Â boolean?
(read-curly-brace-as-parenÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-square-bracket-with-tag)Â ->Â boolean?
(read-square-bracket-with-tagÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-curly-brace-with-tag)Â ->Â boolean?
(read-curly-brace-with-tagÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-box)Â ->Â boolean?
(read-accept-boxÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-compiled)Â ->Â boolean?
(read-accept-compiledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-bar-quote)Â ->Â boolean?
(read-accept-bar-quoteÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-graph)Â ->Â boolean?
(read-accept-graphÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-syntax-accept-graph)Â ->Â boolean?
(read-syntax-accept-graphÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-decimal-as-inexact)Â ->Â boolean?
(read-decimal-as-inexactÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-single-flonum)Â ->Â boolean?
(read-single-flonumÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-dot)Â ->Â boolean?
(read-accept-dotÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-infix-dot)Â ->Â boolean?
(read-accept-infix-dotÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-cdot)Â ->Â boolean?
(read-cdotÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-quasiquote)Â ->Â boolean?
(read-accept-quasiquoteÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-reader)Â ->Â boolean?
(read-accept-readerÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(read-accept-lang)Â ->Â boolean?
(read-accept-langÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(current-readtable)Â ->Â (or/cÂ readtable?Â #f)
(current-readtableÂ readtable)Â ->Â void?
Â Â readtableÂ :Â (or/cÂ readtable?Â #f)
procedure
(call-with-default-reading-parameterizationÂ thunk)Â ->Â any
Â Â thunkÂ :Â (->Â any)
parameter
(current-reader-guard)Â ->Â (any/cÂ . -> .Â any)
(current-reader-guardÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ . -> .Â any)
parameter
(read-on-demand-source)
Â ->Â (or/cÂ #fÂ #tÂ (and/cÂ path?Â complete-path?))
(read-on-demand-sourceÂ mode)Â ->Â void?
Â Â modeÂ :Â (or/cÂ #fÂ #tÂ (and/cÂ path?Â complete-path?))
procedure
(port-read-handlerÂ in)Â ->Â (case->
                          Â (input-port?Â . -> .Â any)
                          Â (input-port?Â Â any/cÂ . -> .Â any))
Â Â inÂ :Â input-port?
(port-read-handlerÂ inÂ proc)Â ->Â void?
Â Â inÂ :Â input-port?
Â Â procÂ :Â (case->
         Â (input-port?Â . -> .Â any)
         Â (input-port?Â any/cÂ . -> .Â any))
procedure
(writeÂ datumÂ [out])Â ->Â void?
Â Â datumÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(displayÂ datumÂ [out])Â ->Â void?
Â Â datumÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(printÂ datumÂ [outÂ quote-depth])Â ->Â void?
Â Â datumÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â quote-depthÂ :Â (or/cÂ 0Â 1)Â =Â 0
procedure
(writelnÂ datumÂ [out])Â ->Â void?
Â Â datumÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(displaylnÂ datumÂ [out])Â ->Â void?
Â Â datumÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
procedure
(printlnÂ datumÂ [outÂ quote-depth])Â ->Â void?
Â Â datumÂ :Â any/c
Â Â outÂ :Â output-port?Â =Â (current-output-port)
Â Â quote-depthÂ :Â (or/cÂ 0Â 1)Â =Â 0
procedure
(fprintfÂ outÂ formÂ vÂ ...)Â ->Â void?
Â Â outÂ :Â output-port?
Â Â formÂ :Â string?
Â Â vÂ :Â any/c
procedure
(printfÂ formÂ vÂ ...)Â ->Â void?
Â Â formÂ :Â string?
Â Â vÂ :Â any/c
procedure
(eprintfÂ formÂ vÂ ...)Â ->Â void?
Â Â formÂ :Â string?
Â Â vÂ :Â any/c
procedure
(formatÂ formÂ vÂ ...)Â ->Â string?
Â Â formÂ :Â string?
Â Â vÂ :Â any/c
parameter
(print-pair-curly-braces)Â ->Â boolean?
(print-pair-curly-bracesÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-mpair-curly-braces)Â ->Â boolean?
(print-mpair-curly-bracesÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-unreadable)Â ->Â boolean?
(print-unreadableÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-graph)Â ->Â boolean?
(print-graphÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-struct)Â ->Â boolean?
(print-structÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-box)Â ->Â boolean?
(print-boxÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-vector-length)Â ->Â boolean?
(print-vector-lengthÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-hash-table)Â ->Â boolean?
(print-hash-tableÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-boolean-long-form)Â ->Â boolean?
(print-boolean-long-formÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-reader-abbreviations)Â ->Â boolean?
(print-reader-abbreviationsÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-as-expression)Â ->Â boolean?
(print-as-expressionÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(print-syntax-width)
Â ->Â (or/cÂ +inf.0Â 0Â (and/cÂ exact-integer?Â (>/cÂ 3)))
(print-syntax-widthÂ width)Â ->Â void?
Â Â widthÂ :Â (or/cÂ +inf.0Â 0Â (and/cÂ exact-integer?Â (>/cÂ 3)))
parameter
(print-value-columns)
Â ->Â (or/cÂ +inf.0Â (and/cÂ exact-integer?Â (>/cÂ 5)))
(print-value-columnsÂ columns)Â ->Â void?
Â Â columnsÂ :Â (or/cÂ +inf.0Â (and/cÂ exact-integer?Â (>/cÂ 5)))
parameter
(current-write-relative-directory)
Â ->Â (or/cÂ (and/cÂ path?Â complete-path?)
    Â Â Â Â Â Â (cons/cÂ (and/cÂ path?Â complete-path?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path?Â complete-path?))
    Â Â Â Â Â Â #f)
(current-write-relative-directoryÂ path)Â ->Â void?
Â Â pathÂ :Â (or/cÂ (and/cÂ path-string?Â complete-path?)
         Â Â Â Â Â Â (cons/cÂ (and/cÂ path-string?Â complete-path?)
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path-string?Â complete-path?))
         Â Â Â Â Â Â #f)
procedure
(port-write-handlerÂ out)Â ->Â (any/cÂ output-port?Â . -> .Â any)
Â Â outÂ :Â output-port?
(port-write-handlerÂ outÂ proc)Â ->Â void?
Â Â outÂ :Â output-port?
Â Â procÂ :Â (any/cÂ output-port?Â . -> .Â any)
procedure
(port-display-handlerÂ out)Â ->Â (any/cÂ output-port?Â . -> .Â any)
Â Â outÂ :Â output-port?
(port-display-handlerÂ outÂ proc)Â ->Â void?
Â Â outÂ :Â output-port?
Â Â procÂ :Â (any/cÂ output-port?Â . -> .Â any)
procedure
(port-print-handlerÂ out)
Â ->Â ((any/cÂ output-port?)Â ((or/cÂ 0Â 1))Â . ->* .Â any)
Â Â outÂ :Â output-port?
(port-print-handlerÂ outÂ proc)Â ->Â void?
Â Â outÂ :Â output-port?
Â Â procÂ :Â (any/cÂ output-port?Â . -> .Â any)
procedure
(global-port-print-handler)
Â ->Â (->*Â (any/cÂ output-port?)Â ((or/cÂ 0Â 1))Â any)
(global-port-print-handlerÂ proc)Â ->Â void?
Â Â procÂ :Â (or/cÂ (->*Â (any/cÂ output-port?)Â ((or/cÂ 0Â 1))Â any)
         Â Â Â Â Â Â (any/cÂ output-port?Â . -> .Â any))
procedure
(default-global-port-print-handlerÂ  v            Â Â  Â Â 
Â                                  Â  out          Â Â  Â Â 
Â                                  Â [print-depth])Â ->Â void?
Â Â vÂ :Â any/c
Â Â outÂ :Â output-port?
Â Â print-depthÂ :Â (or/cÂ 0Â 1)Â =Â 0
procedure
(pretty-printÂ  v                    Â Â  Â Â 
Â             Â [port                 Â Â  Â Â 
Â             Â  quote-depth          Â Â  Â Â 
Â             Â  #:newline?Â newline?])Â ->Â void?
Â Â vÂ :Â any/c
Â Â portÂ :Â output-port?Â =Â (current-output-port)
Â Â quote-depthÂ :Â (or/cÂ 0Â 1)Â =Â 0
Â Â newline?Â :Â boolean?Â =Â #t
procedure
(pretty-writeÂ vÂ [portÂ #:newline?Â newline?])Â ->Â void?
Â Â vÂ :Â any/c
Â Â portÂ :Â output-port?Â =Â (current-output-port)
Â Â newline?Â :Â boolean?Â =Â #t
procedure
(pretty-displayÂ vÂ [portÂ #:newline?Â newline?])Â ->Â void?
Â Â vÂ :Â any/c
Â Â portÂ :Â output-port?Â =Â (current-output-port)
Â Â newline?Â :Â boolean?Â =Â #t
procedure
(pretty-formatÂ vÂ [columnsÂ #:modeÂ mode])Â ->Â string?
Â Â vÂ :Â any/c
Â Â columnsÂ :Â exact-nonnegative-integer?Â =Â (pretty-print-columns)
Â Â modeÂ :Â (or/cÂ 'printÂ 'writeÂ 'display)Â =Â 'print
procedure
(pretty-print-handlerÂ v)Â ->Â void?
Â Â vÂ :Â any/c
parameter
(pretty-print-columns)
Â ->Â (or/cÂ exact-positive-integer?Â 'infinity)
(pretty-print-columnsÂ width)Â ->Â void?
Â Â widthÂ :Â (or/cÂ exact-positive-integer?Â 'infinity)
parameter
(pretty-print-depth)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
(pretty-print-depthÂ depth)Â ->Â void?
Â Â depthÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
parameter
(pretty-print-exact-as-decimal)Â ->Â boolean?
(pretty-print-exact-as-decimalÂ as-decimal?)Â ->Â void?
Â Â as-decimal?Â :Â any/c
parameter
(pretty-print-.-symbol-without-bars)Â ->Â boolean?
(pretty-print-.-symbol-without-barsÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(pretty-print-show-inexactness)Â ->Â boolean?
(pretty-print-show-inexactnessÂ show?)Â ->Â void?
Â Â show?Â :Â any/c
parameter
(pretty-print-abbreviate-read-macros)Â ->Â boolean?
(pretty-print-abbreviate-read-macrosÂ abbrev?)Â ->Â void?
Â Â abbrev?Â :Â any/c
procedure
(pretty-print-style-table?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(pretty-print-current-style-table)Â ->Â pretty-print-style-table?
(pretty-print-current-style-tableÂ style-table)Â ->Â void?
Â Â style-tableÂ :Â pretty-print-style-table?
procedure
(pretty-print-extend-style-tableÂ style-table      Â 
Â                                Â symbol-list      Â 
Â                                Â like-symbol-list)Â 
Â ->Â pretty-print-style-table?
Â Â style-tableÂ :Â pretty-print-style-table?
Â Â symbol-listÂ :Â (listofÂ symbol?)
Â Â like-symbol-listÂ :Â (listofÂ symbol?)
parameter
(pretty-print-remap-stylable)
Â ->Â (any/cÂ . -> .Â (or/cÂ symbol?Â #f))
(pretty-print-remap-stylableÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ . -> .Â (or/cÂ symbol?Â #f))
procedure
(pretty-print-newlineÂ portÂ width)Â ->Â void?
Â Â portÂ :Â output-port?
Â Â widthÂ :Â exact-nonnegative-integer?
parameter
(pretty-print-print-line)
Â ->Â ((or/cÂ exact-nonnegative-integer?Â #f)
    Â output-port?
    Â exact-nonnegative-integer?
    Â (or/cÂ exact-nonnegative-integer?Â 'infinity)
    Â . -> .
    Â exact-nonnegative-integer?)
(pretty-print-print-lineÂ proc)Â ->Â void?
Â Â procÂ :Â ((or/cÂ exact-nonnegative-integer?Â #f)
         Â output-port?
         Â exact-nonnegative-integer?
         Â (or/cÂ exact-nonnegative-integer?Â 'infinity)
         Â . -> .
         Â exact-nonnegative-integer?)
parameter
(pretty-print-size-hook)
Â ->Â (any/cÂ boolean?Â output-port?
    Â . -> .
    Â (or/cÂ #fÂ exact-nonnegative-integer?))
(pretty-print-size-hookÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ boolean?Â output-port?
         Â . -> .
         Â (or/cÂ #fÂ exact-nonnegative-integer?))
parameter
(pretty-print-print-hook)
Â ->Â (any/cÂ boolean?Â output-port?Â . -> .Â void?)
(pretty-print-print-hookÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ boolean?Â output-port?Â . -> .Â void?)
parameter
(pretty-print-pre-print-hook)
Â ->Â (any/cÂ output-port?Â . -> .Â void)
(pretty-print-pre-print-hookÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ output-port?Â . -> .Â void)
parameter
(pretty-print-post-print-hook)
Â ->Â (any/cÂ output-port?Â . -> .Â void)
(pretty-print-post-print-hookÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ output-port?Â . -> .Â void)
parameter
(pretty-printing)Â ->Â boolean?
(pretty-printingÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
procedure
(make-tentative-pretty-print-output-portÂ out            Â 
Â                                        Â width          Â 
Â                                        Â overflow-thunk)Â 
Â ->Â output-port?
Â Â outÂ :Â output-port?
Â Â widthÂ :Â exact-nonnegative-integer?
Â Â overflow-thunkÂ :Â (->Â any)
procedure
(tentative-pretty-print-port-transferÂ tentative-outÂ Â  Â Â 
Â                                     Â orig-out)    Â ->Â void?
Â Â tentative-outÂ :Â output-port?
Â Â orig-outÂ :Â output-port?
procedure
(tentative-pretty-print-port-cancelÂ tentative-out)Â ->Â void?
Â Â tentative-outÂ :Â output-port?
procedure
(readtable?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-readtableÂ readtableÂ keyÂ modeÂ actionÂ ...)Â ->Â readtable?
Â Â readtableÂ :Â (or/cÂ readtable?Â #f)
Â Â keyÂ :Â (or/cÂ char?Â #f)
Â Â modeÂ :Â (or/cÂ 'terminating-macro
         Â Â Â Â Â Â 'non-terminating-macro
         Â Â Â Â Â Â 'dispatch-macro
         Â Â Â Â Â Â char?)
Â Â actionÂ :Â (or/cÂ procedure?
           Â Â Â Â Â Â readtable?
           Â Â Â Â Â Â #f)
procedure
(readtable-mappingÂ readtableÂ char)
Â ->Â (or/cÂ char?
    Â Â Â Â Â Â 'terminating-macro
    Â Â Â Â Â Â 'non-terminating-macro)
    (or/cÂ #fÂ procedure?)
    (or/cÂ #fÂ procedure?)
Â Â readtableÂ :Â readtable?
Â Â charÂ :Â char?
procedure
(make-special-commentÂ v)Â ->Â special-comment?
Â Â vÂ :Â any/c
procedure
(special-comment?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(special-comment-valueÂ sc)Â ->Â any
Â Â scÂ :Â special-comment?
value
gen:custom-writeÂ :Â any/c
value
prop:custom-writeÂ :Â struct-type-property?
procedure
(custom-write?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(custom-write-accessorÂ v)
Â ->Â (custom-write?Â output-port?Â (or/cÂ #tÂ #fÂ 0Â 1)Â . -> .Â any)
Â Â vÂ :Â custom-write?
value
prop:custom-print-quotableÂ :Â struct-type-property?
value
custom-print-quotable?Â :Â struct-type-property?
value
custom-print-quotable-accessorÂ :Â struct-type-property?
procedure
(serializable?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(serialize                                                            Â 
Â          Â  v                                                         Â 
Â          Â [#:relative-directoryÂ relative-to                          Â 
Â          Â  #:deserialize-relative-directoryÂ deserialize-relative-to])Â 
Â ->Â any
Â Â vÂ :Â serializable?
Â Â relative-toÂ :Â (or/cÂ (and/cÂ path?Â complete-path?)         Â =Â #f
                Â Â Â Â Â Â (cons/cÂ (and/cÂ path?Â complete-path?)
                Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path?Â complete-path?))
                Â Â Â Â Â Â #f)
Â Â deserialize-relative-toÂ :Â (or/cÂ (and/cÂ path?Â complete-path?)
                            Â Â Â Â Â Â (cons/cÂ (and/cÂ path?Â complete-path?)
                            Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path?Â complete-path?))
                            Â Â Â Â Â Â #f)
Â  Â                       Â =Â relative-to
procedure
(deserializeÂ v)Â ->Â any
Â Â vÂ :Â any/c
procedure
(serialized=?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
parameter
(deserialize-module-guard)
Â ->Â (->Â module-path?Â symbol?
    Â Â Â Â (or/cÂ void?Â (cons/cÂ module-path?Â symbol?)))
(deserialize-module-guardÂ guard)Â ->Â void?
Â Â guardÂ :Â (->Â module-path?Â symbol?
          Â Â Â Â (or/cÂ void?Â (cons/cÂ module-path?Â symbol?)))
syntax
(serializable-structÂ idÂ maybe-superÂ (fieldÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
syntax
(define-serializable-structÂ id-maybe-superÂ (fieldÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
syntax
(serializable-struct/versionsÂ idÂ maybe-superÂ versÂ (fieldÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (other-version-clauseÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
Â 
other-version-clauseÂ =Â (other-versÂ make-proc-expr
                       Â Â Â Â Â Â Â Â Â Â Â Â cycle-make-proc-expr)
syntax
(define-serializable-struct/versionsÂ id-maybe-superÂ versÂ (fieldÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (other-version-clauseÂ ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â struct-optionÂ ...)
procedure
(make-deserialize-infoÂ makeÂ cycle-make)Â ->Â any
Â Â makeÂ :Â procedure?
Â Â cycle-makeÂ :Â (->Â (valuesÂ any/cÂ procedure?))
value
prop:serializableÂ :Â property?
procedure
(make-serialize-infoÂ to-vector     Â Â  Â Â 
Â                    Â deserialize-idÂ Â  Â Â 
Â                    Â can-cycle?    Â Â  Â Â 
Â                    Â dir)          Â ->Â any
Â Â to-vectorÂ :Â (any/cÂ . -> .Â vector?)
Â Â deserialize-idÂ :Â (orÂ identifier?
                   Â Â Â Â symbol?
                   Â Â Â Â (cons/cÂ symbol?
                   Â Â Â Â Â Â Â Â Â Â Â Â module-path-index?)
                   Â Â Â Â (->Â any/c))
Â Â can-cycle?Â :Â any/c
Â Â dirÂ :Â path-string?
procedure
(s-exp->faslÂ  v                              Â 
Â            Â [out                            Â 
Â            Â  #:keep-mutable?Â keep-mutable?  Â 
Â            Â  #:handle-failÂ handle-fail      Â 
Â            Â  #:external-lift?Â external-lift?Â 
Â            Â  #:skip-prefix?Â skip-prefix?])  Â 
Â ->Â (or/cÂ (void)Â bytes?)
Â Â vÂ :Â any/c
Â Â outÂ :Â (or/cÂ output-port?Â #f)Â =Â #f
Â Â keep-mutable?Â :Â any/cÂ =Â #f
Â Â handle-failÂ :Â (or/cÂ #fÂ (any/cÂ . -> .Â any/c))Â =Â #f
Â Â external-lift?Â :Â (or/cÂ #fÂ (any/cÂ . -> .Â any/c))Â =Â #f
Â Â skip-prefix?Â :Â any/cÂ =Â #f
procedure
(fasl->s-expÂ  in                             Â Â  Â Â 
Â            Â [#:datum-intern?Â datum-intern?  Â Â  Â Â 
Â            Â  #:external-liftsÂ external-liftsÂ Â  Â Â 
Â            Â  #:skip-prefix?Â skip-prefix?])  Â ->Â any/c
Â Â inÂ :Â (or/cÂ input-port?Â bytes?)
Â Â datum-intern?Â :Â any/cÂ =Â #t
Â Â external-liftsÂ :Â vector?Â =Â '#()
Â Â skip-prefix?Â :Â any/cÂ =Â #f
procedure
(sha1-bytesÂ inÂ [startÂ end])Â ->Â bytes?
Â Â inÂ :Â (or/cÂ bytes?Â input-port?)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â (or/cÂ #fÂ exact-nonnegative-integer?)Â =Â #f
procedure
(sha224-bytesÂ inÂ [startÂ end])Â ->Â bytes?
Â Â inÂ :Â (or/cÂ bytes?Â input-port?)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â (or/cÂ #fÂ exact-nonnegative-integer?)Â =Â #f
procedure
(sha256-bytesÂ inÂ [startÂ end])Â ->Â bytes?
Â Â inÂ :Â (or/cÂ bytes?Â input-port?)
Â Â startÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â endÂ :Â (or/cÂ #fÂ exact-nonnegative-integer?)Â =Â #f
procedure
(namespace?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-empty-namespace)Â ->Â namespace?
procedure
(make-base-empty-namespace)Â ->Â namespace?
procedure
(make-base-namespace)Â ->Â namespace?
syntax
(define-namespace-anchorÂ id)
procedure
(namespace-anchor?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(namespace-anchor->empty-namespaceÂ a)Â ->Â namespace?
Â Â aÂ :Â namespace-anchor?
procedure
(namespace-anchor->namespaceÂ a)Â ->Â namespace?
Â Â aÂ :Â namespace-anchor?
parameter
(current-namespace)Â ->Â namespace?
(current-namespaceÂ n)Â ->Â void?
Â Â nÂ :Â namespace?
procedure
(namespace-symbol->identifierÂ sym)Â ->Â identifier?
Â Â symÂ :Â symbol?
procedure
(namespace-base-phaseÂ [namespace])Â ->Â exact-integer?
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-module-identifierÂ [where])Â ->Â identifier?
Â Â whereÂ :Â (or/cÂ namespace?Â exact-integer?Â #f)
Â  Â     Â =Â (current-namespace)
procedure
(namespace-variable-valueÂ  sym          Â Â  Â Â 
Â                         Â [use-mapping? Â Â  Â Â 
Â                         Â  failure-thunkÂ Â  Â Â 
Â                         Â  namespace])  Â ->Â any
Â Â symÂ :Â symbol?
Â Â use-mapping?Â :Â any/cÂ =Â #t
Â Â failure-thunkÂ :Â (or/cÂ (->Â any)Â #f)Â =Â #f
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-set-variable-value!Â  sym           Â Â  Â Â 
Â                              Â  v             Â Â  Â Â 
Â                              Â [map?          Â Â  Â Â 
Â                              Â  namespace     Â Â  Â Â 
Â                              Â  as-constant?])Â ->Â void?
Â Â symÂ :Â symbol?
Â Â vÂ :Â any/c
Â Â map?Â :Â any/cÂ =Â #f
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
Â Â as-constant?Â :Â any/cÂ =Â #f
procedure
(namespace-undefine-variable!Â  sym        Â Â  Â Â 
Â                             Â [namespace])Â ->Â void?
Â Â symÂ :Â symbol?
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-mapped-symbolsÂ [namespace])Â ->Â (listofÂ symbol?)
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-requireÂ  quoted-raw-require-specÂ Â  Â Â 
Â                  Â [namespace])            Â ->Â void?
Â Â quoted-raw-require-specÂ :Â any/c
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-require/copyÂ  quoted-raw-require-specÂ Â  Â Â 
Â                       Â [namespace])            Â ->Â void?
Â Â quoted-raw-require-specÂ :Â any/c
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-require/constantÂ  quoted-raw-require-specÂ Â  Â Â 
Â                           Â [namespace])            Â ->Â void?
Â Â quoted-raw-require-specÂ :Â any/c
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-require/expansion-timeÂ  quoted-raw-require-specÂ 
Â                                 Â [namespace])            Â 
Â ->Â void?
Â Â quoted-raw-require-specÂ :Â any/c
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-attach-moduleÂ  src-namespace   Â Â  Â Â 
Â                        Â  modname         Â Â  Â Â 
Â                        Â [dest-namespace])Â ->Â void?
Â Â src-namespaceÂ :Â namespace?
Â Â modnameÂ :Â (orÂ module-path?Â resolved-module-path?)
Â Â dest-namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-attach-module-declarationÂ  src-namespace   Â Â  Â Â 
Â                                    Â  modname         Â Â  Â Â 
Â                                    Â [dest-namespace])Â ->Â void?
Â Â src-namespaceÂ :Â namespace?
Â Â modnameÂ :Â module-path?
Â Â dest-namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-unprotect-moduleÂ  inspector  Â Â  Â Â 
Â                           Â  modname    Â Â  Â Â 
Â                           Â [namespace])Â ->Â void?
Â Â inspectorÂ :Â inspector?
Â Â modnameÂ :Â module-path?
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-module-registryÂ namespace)Â ->Â any
Â Â namespaceÂ :Â namespace?
procedure
(namespace-call-with-registry-lockÂ namespaceÂ Â  Â Â 
Â                                  Â thunk)   Â ->Â any
Â Â namespaceÂ :Â namespace?
Â Â thunkÂ :Â (->Â any)
procedure
(module->namespaceÂ modÂ [src-namespace])Â ->Â namespace?
Â Â modÂ :Â (or/cÂ module-path?
        Â Â Â Â Â Â resolved-module-path?
        Â Â Â Â Â Â module-path-index?)
Â Â src-namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(namespace-syntax-introduceÂ stxÂ [namespace])Â ->Â syntax?
Â Â stxÂ :Â syntax?
Â Â namespaceÂ :Â namespace?Â =Â (current-namespace)
procedure
(module-provide-protected?Â module-path-indexÂ Â  Â Â 
Â                          Â sym)             Â ->Â boolean?
Â Â module-path-indexÂ :Â (or/cÂ symbol?Â module-path-index?)
Â Â symÂ :Â symbol?
procedure
(variable-reference?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(variable-reference-constant?Â varref)Â ->Â boolean?
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->empty-namespaceÂ varref)Â ->Â namespace?
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->namespaceÂ varref)Â ->Â namespace?
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->resolved-module-pathÂ varref)
Â ->Â (or/cÂ resolved-module-path?Â #f)
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->module-path-indexÂ varref)
Â ->Â (or/cÂ module-path-index?Â #f)
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->module-sourceÂ varref)
Â ->Â (or/cÂ symbol?Â (and/cÂ path?Â complete-path?)Â #f)
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->phaseÂ varref)Â ->Â exact-nonnegative-integer?
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->module-base-phaseÂ varref)Â ->Â exact-integer?
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference->module-declaration-inspectorÂ varref)
Â ->Â inspector?
Â Â varrefÂ :Â variable-reference?
procedure
(variable-reference-from-unsafe?Â varref)Â ->Â boolean?
Â Â varrefÂ :Â variable-reference?
parameter
(current-eval)Â ->Â (any/cÂ . -> .Â any)
(current-evalÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ . -> .Â any)
procedure
(evalÂ top-level-form)Â ->Â any
Â Â top-level-formÂ :Â any/c
(evalÂ top-level-formÂ namespace)Â ->Â any
Â Â top-level-formÂ :Â any/c
Â Â namespaceÂ :Â namespace?
procedure
(eval-syntaxÂ stx)Â ->Â any
Â Â stxÂ :Â syntax?
(eval-syntaxÂ stxÂ namespace)Â ->Â any
Â Â stxÂ :Â syntax?
Â Â namespaceÂ :Â namespace?
parameter
(current-load)
Â ->Â (path?Â (or/cÂ #f
    Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ (or/cÂ #fÂ symbol?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
    Â Â Â Â Â Â Â . -> .
    Â Â Â Â Â Â Â any)
(current-loadÂ proc)Â ->Â void?
Â Â procÂ :Â (path?Â (or/cÂ #f
         Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
         Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ (or/cÂ #fÂ symbol?)
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
         Â Â Â Â Â Â Â . -> .
         Â Â Â Â Â Â Â any)
procedure
(loadÂ file)Â ->Â any
Â Â fileÂ :Â path-string?
procedure
(load-relativeÂ file)Â ->Â any
Â Â fileÂ :Â path-string?
procedure
(load/cdÂ file)Â ->Â any
Â Â fileÂ :Â path-string?
parameter
(current-load-extension)
Â ->Â (path?Â (or/cÂ #f
    Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ (or/cÂ #fÂ symbol?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
    Â . -> .
    Â any)
(current-load-extensionÂ proc)Â ->Â void?
Â Â procÂ :Â (path?Â (or/cÂ #f
         Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
         Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ (or/cÂ #fÂ symbol?)
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
         Â . -> .
         Â any)
procedure
(load-extensionÂ file)Â ->Â any
Â Â fileÂ :Â path-string?
procedure
(load-relative-extensionÂ file)Â ->Â any
Â Â fileÂ :Â path-string?
parameter
(current-load/use-compiled)
Â ->Â (path?Â (or/cÂ #f
    Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ (or/cÂ #fÂ symbol?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
    Â Â Â Â Â Â Â . -> .Â any)
(current-load/use-compiledÂ proc)Â ->Â void?
Â Â procÂ :Â (path?Â (or/cÂ #f
         Â Â Â Â Â Â Â Â Â Â Â Â Â symbol?
         Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ (or/cÂ #fÂ symbol?)
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
         Â Â Â Â Â Â Â . -> .Â any)
procedure
(load/use-compiledÂ file)Â ->Â any
Â Â fileÂ :Â path-string?
parameter
(current-load-relative-directory)
Â ->Â (or/cÂ (and/cÂ path-string?Â complete-path?)Â #f)
(current-load-relative-directoryÂ path)Â ->Â void?
Â Â pathÂ :Â (or/cÂ (and/cÂ path-string?Â complete-path?)Â #f)
parameter
(use-compiled-file-paths)
Â ->Â (listofÂ (and/cÂ path?Â relative-path?))
(use-compiled-file-pathsÂ paths)Â ->Â void?
Â Â pathsÂ :Â (listofÂ (and/cÂ path-string?Â relative-path?))
parameter
(current-compiled-file-roots)Â ->Â (listofÂ (or/cÂ path?Â 'same))
(current-compiled-file-rootsÂ paths)Â ->Â void?
Â Â pathsÂ :Â (listofÂ (or/cÂ path-string?Â 'same))
procedure
(find-compiled-file-roots)Â ->Â (listofÂ (or/cÂ path?Â 'same))
parameter
(use-compiled-file-check)Â ->Â (or/cÂ 'modify-secondsÂ 'exists)
(use-compiled-file-checkÂ check)Â ->Â void?
Â Â checkÂ :Â (or/cÂ 'modify-secondsÂ 'exists)
procedure
(read-eval-print-loop)Â ->Â any
parameter
(current-prompt-read)Â ->Â (->Â any)
(current-prompt-readÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â any)
parameter
(current-get-interaction-input-port)Â ->Â (->Â input-port?)
(current-get-interaction-input-portÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â input-port?)
parameter
(current-get-interaction-evt)Â ->Â (->Â evt?)
(current-get-interaction-evtÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â evt?)
parameter
(current-read-interaction)Â ->Â (any/cÂ input-port?Â ->Â any)
(current-read-interactionÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ input-port?Â ->Â any)
parameter
(current-print)Â ->Â (any/cÂ ->Â any)
(current-printÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ ->Â any)
parameter
(current-compile)
Â ->Â (any/cÂ boolean?Â . -> .Â compiled-expression?)
(current-compileÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ boolean?Â . -> .Â compiled-expression?)
procedure
(compileÂ top-level-form)Â ->Â compiled-expression?
Â Â top-level-formÂ :Â any/c
procedure
(compile-syntaxÂ stx)Â ->Â compiled-expression?
Â Â stxÂ :Â syntax?
procedure
(compiled-expression-recompileÂ ce)Â ->Â compiled-expression?
Â Â ceÂ :Â compiled-expression?
procedure
(compiled-expression?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(compile-enforce-module-constants)Â ->Â boolean?
(compile-enforce-module-constantsÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(compile-allow-set!-undefined)Â ->Â boolean?
(compile-allow-set!-undefinedÂ allow?)Â ->Â void?
Â Â allow?Â :Â any/c
parameter
(compile-context-preservation-enabled)Â ->Â boolean?
(compile-context-preservation-enabledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(current-compile-target-machine)
Â ->Â (or/cÂ #fÂ (and/cÂ symbol?Â compile-target-machine?))
(current-compile-target-machineÂ target)Â ->Â void?
Â Â targetÂ :Â (or/cÂ #fÂ (and/cÂ symbol?Â compile-target-machine?))
procedure
(compile-target-machine?Â sym)Â ->Â boolean?
Â Â symÂ :Â symbol?
parameter
(current-compile-realm)Â ->Â symbol?
(current-compile-realmÂ realm)Â ->Â void?
Â Â realmÂ :Â symbol?
parameter
(eval-jit-enabled)Â ->Â boolean?
(eval-jit-enabledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(load-on-demand-enabled)Â ->Â boolean?
(load-on-demand-enabledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
procedure
(resolved-module-path?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-resolved-module-pathÂ path)Â ->Â resolved-module-path?
Â Â pathÂ :Â (or/cÂ symbol?
         Â Â Â Â Â Â (and/cÂ path?Â complete-path?)
         Â Â Â Â Â Â (cons/cÂ (or/cÂ symbol?
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path?Â complete-path?))
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
procedure
(resolved-module-path-nameÂ module-path)
Â ->Â (or/cÂ symbol?
    Â Â Â Â Â Â (and/cÂ path?Â complete-path?)
    Â Â Â Â Â Â (cons/cÂ (or/cÂ symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path?Â complete-path?))
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (non-empty-listofÂ symbol?)))
Â Â module-pathÂ :Â resolved-module-path?
procedure
(module-path?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(current-module-name-resolver)
Â ->Â (case->
    Â (resolved-module-path?Â (or/cÂ #fÂ namespace?)Â . -> .Â any)
    Â (module-path?
    Â Â (or/cÂ #fÂ resolved-module-path?)
    Â Â (or/cÂ #fÂ syntax?)
    Â Â boolean?
    Â Â . -> .
    Â Â resolved-module-path?))
(current-module-name-resolverÂ proc)Â ->Â void?
Â Â procÂ :Â (case->
         Â (resolved-module-path?Â (or/cÂ #fÂ namespace?)Â . -> .Â any)
         Â (module-path?
         Â Â (or/cÂ #fÂ resolved-module-path?)
         Â Â (or/cÂ #fÂ syntax?)
         Â Â boolean?
         Â Â . -> .
         Â Â resolved-module-path?))
parameter
(current-module-declare-name)
Â ->Â (or/cÂ resolved-module-path?Â #f)
(current-module-declare-nameÂ name)Â ->Â void?
Â Â nameÂ :Â (or/cÂ resolved-module-path?Â #f)
parameter
(current-module-declare-source)
Â ->Â (or/cÂ symbol?Â (and/cÂ path?Â complete-path?)Â #f)
(current-module-declare-sourceÂ src)Â ->Â void?
Â Â srcÂ :Â (or/cÂ symbol?Â (and/cÂ path?Â complete-path?)Â #f)
parameter
(current-module-path-for-load)
Â ->Â (or/cÂ #fÂ module-path?
    Â Â Â Â Â Â (and/cÂ syntax?
    Â Â Â Â Â Â Â Â Â Â Â Â Â (lambdaÂ (stx)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (module-path?Â (syntax->datumÂ s)))))
(current-module-path-for-loadÂ path)Â ->Â void?
Â Â pathÂ :Â (or/cÂ #fÂ module-path?
         Â Â Â Â Â Â (and/cÂ syntax?
         Â Â Â Â Â Â Â Â Â Â Â Â Â (lambdaÂ (stx)
         Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (module-path?Â (syntax->datumÂ s)))))
procedure
(module-path-index?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(module-path-index-resolveÂ  mpi      Â Â  Â Â 
Â                          Â [load?    Â Â  Â Â 
Â                          Â  src-stx])Â ->Â resolved-module-path?
Â Â mpiÂ :Â module-path-index?
Â Â load?Â :Â any/cÂ =Â #f
Â Â src-stxÂ :Â (or/cÂ syntax?Â #f)Â =Â #f
procedure
(module-path-index-splitÂ mpi)
Â ->Â (or/cÂ module-path?Â #f)
    (or/cÂ module-path-index?Â resolved-module-path?Â #f)
Â Â mpiÂ :Â module-path-index?
procedure
(module-path-index-submoduleÂ mpi)
Â ->Â (or/cÂ #fÂ (non-empty-listofÂ symbol?))
Â Â mpiÂ :Â module-path-index?
procedure
(module-path-index-joinÂ pathÂ baseÂ [submod])Â ->Â module-path-index?
Â Â pathÂ :Â (or/cÂ module-path?Â #f)
Â Â baseÂ :Â (or/cÂ module-path-index?Â resolved-module-path?Â #f)
Â Â submodÂ :Â (or/cÂ #fÂ (non-empty-listofÂ symbol?))Â =Â #f
procedure
(compiled-module-expression?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(module-compiled-nameÂ compiled-module-code)
Â ->Â (or/cÂ symbol?Â (cons/cÂ symbol?Â (non-empty-listofÂ symbol?)))
Â Â compiled-module-codeÂ :Â compiled-module-expression?
(module-compiled-nameÂ compiled-module-codeÂ 
Â                     Â name)               Â 
Â ->Â compiled-module-expression?
Â Â compiled-module-codeÂ :Â compiled-module-expression?
Â Â nameÂ :Â (or/cÂ symbol?Â (cons/cÂ symbol?Â (non-empty-listofÂ symbol?)))
procedure
(module-compiled-submodulesÂ compiled-module-codeÂ 
Â                           Â non-star?)          Â 
Â ->Â (listofÂ compiled-module-expression?)
Â Â compiled-module-codeÂ :Â compiled-module-expression?
Â Â non-star?Â :Â any/c
(module-compiled-submodulesÂ compiled-module-codeÂ 
Â                           Â non-star?           Â 
Â                           Â submodules)         Â 
Â ->Â compiled-module-expression?
Â Â compiled-module-codeÂ :Â compiled-module-expression?
Â Â non-star?Â :Â any/c
Â Â submodulesÂ :Â (listofÂ compiled-module-expression?)
procedure
(module-compiled-importsÂ compiled-module-code)
Â ->Â (listofÂ (cons/cÂ (or/cÂ exact-integer?Â #f)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ module-path-index?)))
Â Â compiled-module-codeÂ :Â compiled-module-expression?
procedure
(module-compiled-exportsÂ  compiled-module-codeÂ 
Â                        Â [verbosity])         Â 
Â ->Â (listofÂ (cons/cÂ phase+space?Â list?))
    (listofÂ (cons/cÂ phase+space?Â list?))
Â Â compiled-module-codeÂ :Â compiled-module-expression?
Â Â verbosityÂ :Â (or/cÂ #fÂ 'defined-names)Â =Â #f
procedure
(module-compiled-indirect-exportsÂ compiled-module-code)
Â ->Â (listofÂ (cons/cÂ exact-integer?Â (listofÂ symbol?)))
Â Â compiled-module-codeÂ :Â compiled-module-expression?
procedure
(module-compiled-language-infoÂ compiled-module-code)
Â ->Â (or/cÂ #fÂ (vector/cÂ module-path?Â symbol?Â any/c))
Â Â compiled-module-codeÂ :Â compiled-module-expression?
procedure
(module-compiled-cross-phase-persistent?Â compiled-module-code)
Â ->Â boolean?
Â Â compiled-module-codeÂ :Â compiled-module-expression?
procedure
(module-compiled-realmÂ compiled-module-code)Â ->Â symbol?
Â Â compiled-module-codeÂ :Â compiled-module-expression?
procedure
(dynamic-requireÂ modÂ providedÂ [fail-thunk])Â ->Â (or/cÂ void?Â any/c)
Â Â modÂ :Â (or/cÂ module-path?
        Â Â Â Â Â Â resolved-module-path?
        Â Â Â Â Â Â module-path-index?)
Â Â providedÂ :Â (or/cÂ symbol?Â #fÂ 0Â void?)
Â Â fail-thunkÂ :Â (->Â any)Â =Â (lambdaÂ ()Â ....)
procedure
(dynamic-require-for-syntaxÂ  mod         Â Â  Â Â 
Â                           Â  provided    Â Â  Â Â 
Â                           Â [fail-thunk])Â ->Â any
Â Â modÂ :Â module-path?
Â Â providedÂ :Â (or/cÂ symbol?Â #f)
Â Â fail-thunkÂ :Â (->Â any)Â =Â (lambdaÂ ()Â ....)
procedure
(module-declared?Â modÂ [load?])Â ->Â boolean?
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
Â Â load?Â :Â any/cÂ =Â #f
procedure
(module->language-infoÂ modÂ [load?])
Â ->Â (or/cÂ #fÂ (vector/cÂ module-path?Â symbol?Â any/c))
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
Â Â load?Â :Â any/cÂ =Â #f
procedure
(module->importsÂ mod)
Â ->Â (listofÂ (cons/cÂ (or/cÂ exact-integer?Â #f)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ module-path-index?)))
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
procedure
(module->exportsÂ modÂ [verbosity])
Â ->Â (listofÂ (cons/cÂ phase+space?Â list?))
    (listofÂ (cons/cÂ phase+space?Â list?))
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
Â Â verbosityÂ :Â (or/cÂ #fÂ 'defined-names)Â =Â #f
procedure
(module->indirect-exportsÂ mod)
Â ->Â (listofÂ (cons/cÂ exact-integer?Â (listofÂ symbol?)))
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
procedure
(module->realmÂ mod)Â ->Â symbol?
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
procedure
(module-predefined?Â mod)Â ->Â boolean?
Â Â modÂ :Â (or/cÂ module-path?Â module-path-index?
        Â Â Â Â Â Â resolved-module-path?)
procedure
(module-cache-clear!)Â ->Â void?
procedure
(impersonator?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(chaperone?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(impersonator-of?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(chaperone-of?Â v1Â v2)Â ->Â boolean?
Â Â v1Â :Â any/c
Â Â v2Â :Â any/c
procedure
(impersonator-ephemeronÂ v)Â ->Â ephemeron?
Â Â vÂ :Â any/c
procedure
(procedure-impersonator*?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(impersonate-procedureÂ proc        Â 
Â                      Â wrapper-procÂ 
Â                      Â prop        Â 
Â                      Â prop-valÂ ...Â 
Â                      Â ...)        Â 
Â ->Â (and/cÂ procedure?Â impersonator?)
Â Â procÂ :Â procedure?
Â Â wrapper-procÂ :Â (or/cÂ procedure?Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-procedure*Â proc        Â 
Â                       Â wrapper-procÂ 
Â                       Â prop        Â 
Â                       Â prop-valÂ ...Â 
Â                       Â ...)        Â 
Â ->Â (and/cÂ procedure?Â impersonator?)
Â Â procÂ :Â procedure?
Â Â wrapper-procÂ :Â (or/cÂ procedure?Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-structÂ  v                Â Â  Â Â 
Â                   Â [struct-type]     Â Â  Â Â 
Â                   Â  orig-proc        Â Â  Â Â 
Â                   Â  redirect-procÂ ...Â Â  Â Â 
Â                   Â  ...              Â Â  Â Â 
Â                   Â  prop             Â Â  Â Â 
Â                   Â  prop-valÂ ...     Â Â  Â Â 
Â                   Â  ...)             Â ->Â any/c
Â Â vÂ :Â any/c
Â Â struct-typeÂ :Â struct-type?Â =Â unspecified
Â Â orig-procÂ :Â (or/cÂ struct-accessor-procedure?
              Â Â Â Â Â Â struct-mutator-procedure?
              Â Â Â Â Â Â struct-type-property-accessor-procedure?)
Â Â redirect-procÂ :Â (or/cÂ procedure?Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-vectorÂ vec         Â 
Â                   Â ref-proc    Â 
Â                   Â set-proc    Â 
Â                   Â prop        Â 
Â                   Â prop-valÂ ...Â 
Â                   Â ...)        Â 
Â ->Â (and/cÂ vector?Â impersonator?)
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â ref-procÂ :Â (or/cÂ (vector?Â exact-nonnegative-integer?Â any/cÂ . ->
.Â any/c)Â #f)
Â Â set-procÂ :Â (or/cÂ (vector?Â exact-nonnegative-integer?Â any/cÂ . ->
.Â any/c)Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-vector*Â vec         Â 
Â                    Â ref-proc    Â 
Â                    Â set-proc    Â 
Â                    Â prop        Â 
Â                    Â prop-valÂ ...Â 
Â                    Â ...)        Â 
Â ->Â (and/cÂ vector?Â impersonator?)
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â ref-procÂ :Â (or/cÂ (vector?Â vector?Â exact-nonnegative-integer?Â any/cÂ .
-> .Â any/c)Â #f)
Â Â set-procÂ :Â (or/cÂ (vector?Â vector?Â exact-nonnegative-integer?Â any/cÂ .
-> .Â any/c)Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-boxÂ box         Â Â  Â Â 
Â                Â unbox-proc  Â Â  Â Â 
Â                Â set-proc    Â Â  Â Â 
Â                Â prop        Â Â  Â Â 
Â                Â prop-valÂ ...Â Â  Â Â 
Â                Â ...)        Â ->Â (and/cÂ box?Â impersonator?)
Â Â boxÂ :Â (and/cÂ box?Â (not/cÂ immutable?))
Â Â unbox-procÂ :Â (box?Â any/cÂ . -> .Â any/c)
Â Â set-procÂ :Â (box?Â any/cÂ . -> .Â any/c)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-hashÂ  hash           Â Â  Â Â 
Â                 Â  ref-proc       Â Â  Â Â 
Â                 Â  set-proc       Â Â  Â Â 
Â                 Â  remove-proc    Â Â  Â Â 
Â                 Â  key-proc       Â Â  Â Â 
Â                 Â [clear-proc     Â Â  Â Â 
Â                 Â  equal-key-proc]Â Â  Â Â 
Â                 Â  prop           Â Â  Â Â 
Â                 Â  prop-valÂ ...   Â Â  Â Â 
Â                 Â  ...)           Â ->Â (and/cÂ hash?Â impersonator?)
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?))
Â Â ref-procÂ :Â (hash?Â any/cÂ . -> .Â (values
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â any/c
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (hash?Â any/cÂ any/cÂ . -> .Â any/c)))
Â Â set-procÂ :Â (hash?Â any/cÂ any/cÂ . -> .Â (valuesÂ any/cÂ any/c))
Â Â remove-procÂ :Â (hash?Â any/cÂ . -> .Â any/c)
Â Â key-procÂ :Â (hash?Â any/cÂ . -> .Â any/c)
Â Â clear-procÂ :Â (or/cÂ #fÂ (hash?Â . -> .Â any))Â =Â #f
Â Â equal-key-procÂ :Â (or/cÂ #fÂ (hash?Â any/cÂ . -> .Â any/c))Â =Â #f
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-channelÂ channel     Â 
Â                    Â get-proc    Â 
Â                    Â put-proc    Â 
Â                    Â prop        Â 
Â                    Â prop-valÂ ...Â 
Â                    Â ...)        Â 
Â ->Â (and/cÂ channel?Â impersonator?)
Â Â channelÂ :Â channel?
Â Â get-procÂ :Â (channel?Â . -> .Â (valuesÂ channel?Â (any/cÂ . -> .Â any/c)))
Â Â put-procÂ :Â (channel?Â any/cÂ . -> .Â any/c)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-prompt-tagÂ  prompt-tag              Â 
Â                       Â  handle-proc             Â 
Â                       Â  abort-proc              Â 
Â                       Â [cc-guard-proc           Â 
Â                       Â  callcc-impersonate-proc]Â 
Â                       Â  prop                    Â 
Â                       Â  prop-valÂ ...            Â 
Â                       Â  ...)                    Â 
Â ->Â (and/cÂ continuation-prompt-tag?Â impersonator?)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â Â handle-procÂ :Â procedure?
Â Â abort-procÂ :Â procedure?
Â Â cc-guard-procÂ :Â procedure?Â =Â values
Â Â callcc-impersonate-procÂ :Â (procedure?Â . -> .Â procedure?)
Â  Â                       Â =Â (lambdaÂ (p)Â p)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(impersonate-continuation-mark-keyÂ key         Â 
Â                                  Â get-proc    Â 
Â                                  Â set-proc    Â 
Â                                  Â prop        Â 
Â                                  Â prop-valÂ ...Â 
Â                                  Â ...)        Â 
Â ->Â (and/cÂ continuation-mark?Â impersonator?)
Â Â keyÂ :Â continuation-mark-key?
Â Â get-procÂ :Â procedure?
Â Â set-procÂ :Â procedure?
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
value
prop:impersonator-ofÂ :Â struct-type-property?
value
prop:authenticÂ :Â struct-type-property?
procedure
(chaperone-procedureÂ proc        Â 
Â                    Â wrapper-procÂ 
Â                    Â prop        Â 
Â                    Â prop-valÂ ...Â 
Â                    Â ...)        Â 
Â ->Â (and/cÂ procedure?Â chaperone?)
Â Â procÂ :Â procedure?
Â Â wrapper-procÂ :Â (or/cÂ procedure?Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-procedure*Â proc        Â 
Â                     Â wrapper-procÂ 
Â                     Â prop        Â 
Â                     Â prop-valÂ ...Â 
Â                     Â ...)        Â 
Â ->Â (and/cÂ procedure?Â chaperone?)
Â Â procÂ :Â procedure?
Â Â wrapper-procÂ :Â (or/cÂ procedure?Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-structÂ  v                Â Â  Â Â 
Â                 Â [struct-type]     Â Â  Â Â 
Â                 Â  orig-proc        Â Â  Â Â 
Â                 Â  redirect-procÂ ...Â Â  Â Â 
Â                 Â  ...              Â Â  Â Â 
Â                 Â  prop             Â Â  Â Â 
Â                 Â  prop-valÂ ...     Â Â  Â Â 
Â                 Â  ...)             Â ->Â any/c
Â Â vÂ :Â any/c
Â Â struct-typeÂ :Â struct-type?Â =Â unspecified
Â Â orig-procÂ :Â (or/cÂ struct-accessor-procedure?
              Â Â Â Â Â Â struct-mutator-procedure?
              Â Â Â Â Â Â struct-type-property-accessor-procedure?
              Â Â Â Â Â Â (one-of/cÂ struct-info))
Â Â redirect-procÂ :Â (or/cÂ procedure?Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-vectorÂ vec         Â Â  Â Â 
Â                 Â ref-proc    Â Â  Â Â 
Â                 Â set-proc    Â Â  Â Â 
Â                 Â prop        Â Â  Â Â 
Â                 Â prop-valÂ ...Â Â  Â Â 
Â                 Â ...)        Â ->Â (and/cÂ vector?Â chaperone?)
Â Â vecÂ :Â vector?
Â Â ref-procÂ :Â (or/cÂ (vector?Â exact-nonnegative-integer?Â any/cÂ . ->
.Â any/c)Â #f)
Â Â set-procÂ :Â (or/cÂ (vector?Â exact-nonnegative-integer?Â any/cÂ . ->
.Â any/c)Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-vector*Â vec         Â Â  Â Â 
Â                  Â ref-proc    Â Â  Â Â 
Â                  Â set-proc    Â Â  Â Â 
Â                  Â prop        Â Â  Â Â 
Â                  Â prop-valÂ ...Â Â  Â Â 
Â                  Â ...)        Â ->Â (and/cÂ vector?Â chaperone?)
Â Â vecÂ :Â (and/cÂ vector?Â (not/cÂ immutable?))
Â Â ref-procÂ :Â (or/cÂ (vector?Â vector?Â exact-nonnegative-integer?Â any/cÂ .
-> .Â any/c)Â #f)
Â Â set-procÂ :Â (or/cÂ (vector?Â vector?Â exact-nonnegative-integer?Â any/cÂ .
-> .Â any/c)Â #f)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-boxÂ box         Â Â  Â Â 
Â              Â unbox-proc  Â Â  Â Â 
Â              Â set-proc    Â Â  Â Â 
Â              Â prop        Â Â  Â Â 
Â              Â prop-valÂ ...Â Â  Â Â 
Â              Â ...)        Â ->Â (and/cÂ box?Â chaperone?)
Â Â boxÂ :Â box?
Â Â unbox-procÂ :Â (box?Â any/cÂ . -> .Â any/c)
Â Â set-procÂ :Â (box?Â any/cÂ . -> .Â any/c)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-hashÂ  hash           Â Â  Â Â 
Â               Â  ref-proc       Â Â  Â Â 
Â               Â  set-proc       Â Â  Â Â 
Â               Â  remove-proc    Â Â  Â Â 
Â               Â  key-proc       Â Â  Â Â 
Â               Â [clear-proc     Â Â  Â Â 
Â               Â  equal-key-proc]Â Â  Â Â 
Â               Â  prop           Â Â  Â Â 
Â               Â  prop-valÂ ...   Â Â  Â Â 
Â               Â  ...)           Â ->Â (and/cÂ hash?Â chaperone?)
Â Â hashÂ :Â hash?
Â Â ref-procÂ :Â (hash?Â any/cÂ . -> .Â (values
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â any/c
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (hash?Â any/cÂ any/cÂ . -> .Â any/c)))
Â Â set-procÂ :Â (hash?Â any/cÂ any/cÂ . -> .Â (valuesÂ any/cÂ any/c))
Â Â remove-procÂ :Â (hash?Â any/cÂ . -> .Â any/c)
Â Â key-procÂ :Â (hash?Â any/cÂ . -> .Â any/c)
Â Â clear-procÂ :Â (or/cÂ #fÂ (hash?Â . -> .Â any))Â =Â #f
Â Â equal-key-procÂ :Â (or/cÂ #fÂ (hash?Â any/cÂ . -> .Â any/c))Â =Â #f
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-struct-typeÂ struct-type          Â 
Â                      Â struct-info-proc     Â 
Â                      Â make-constructor-procÂ 
Â                      Â guard-proc           Â 
Â                      Â prop                 Â 
Â                      Â prop-valÂ ...         Â 
Â                      Â ...)                 Â 
Â ->Â (and/cÂ struct-type?Â chaperone?)
Â Â struct-typeÂ :Â struct-type?
Â Â struct-info-procÂ :Â procedure?
Â Â make-constructor-procÂ :Â (procedure?Â . -> .Â procedure?)
Â Â guard-procÂ :Â procedure?
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-evtÂ evtÂ procÂ propÂ prop-valÂ ...Â ...)
Â ->Â (and/cÂ evt?Â chaperone?)
Â Â evtÂ :Â evt?
Â Â procÂ :Â (evt?Â . -> .Â (valuesÂ evt?Â (any/cÂ . -> .Â any/c)))
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-channelÂ channel     Â Â  Â Â 
Â                  Â get-proc    Â Â  Â Â 
Â                  Â put-proc    Â Â  Â Â 
Â                  Â prop        Â Â  Â Â 
Â                  Â prop-valÂ ...Â Â  Â Â 
Â                  Â ...)        Â ->Â (and/cÂ channel?Â chaperone?)
Â Â channelÂ :Â channel?
Â Â get-procÂ :Â (channel?Â . -> .Â (valuesÂ channel?Â (any/cÂ . -> .Â any/c)))
Â Â put-procÂ :Â (channel?Â any/cÂ . -> .Â any/c)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-prompt-tagÂ  prompt-tag            Â 
Â                     Â  handle-proc           Â 
Â                     Â  abort-proc            Â 
Â                     Â [cc-guard-proc         Â 
Â                     Â  callcc-chaperone-proc]Â 
Â                     Â  prop                  Â 
Â                     Â  prop-valÂ ...          Â 
Â                     Â  ...)                  Â 
Â ->Â (and/cÂ continuation-prompt-tag?Â chaperone?)
Â Â prompt-tagÂ :Â continuation-prompt-tag?
Â Â handle-procÂ :Â procedure?
Â Â abort-procÂ :Â procedure?
Â Â cc-guard-procÂ :Â procedure?Â =Â values
Â Â callcc-chaperone-procÂ :Â (procedure?Â . -> .Â procedure?)
Â  Â                     Â =Â (lambdaÂ (p)Â p)
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(chaperone-continuation-mark-keyÂ key         Â 
Â                                Â get-proc    Â 
Â                                Â set-proc    Â 
Â                                Â prop        Â 
Â                                Â prop-valÂ ...Â 
Â                                Â ...)        Â 
Â ->Â (and/cÂ continuation-mark-key?Â chaperone?)
Â Â keyÂ :Â continuation-mark-key?
Â Â get-procÂ :Â procedure?
Â Â set-procÂ :Â procedure?
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(make-impersonator-propertyÂ name)
Â ->Â impersonator-property?
    (->Â any/cÂ boolean?)
    (->*Â (impersonator?)Â (any/c)Â any)
Â Â nameÂ :Â symbol?
procedure
(impersonator-property?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(impersonator-property-accessor-procedure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
value
impersonator-prop:application-markÂ :Â impersonator-property?
procedure
(security-guard?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-security-guardÂ  parent       Â Â  Â Â 
Â                    Â  file-guard   Â Â  Â Â 
Â                    Â  network-guardÂ Â  Â Â 
Â                    Â [link-guard]) Â ->Â security-guard?
Â Â parentÂ :Â security-guard?
Â Â file-guardÂ :Â (symbol?
               Â (or/cÂ path?Â #f)
               Â (listofÂ symbol?)
               Â . -> .Â any)
Â Â network-guardÂ :Â (symbol?
                  Â (or/cÂ (and/cÂ string?Â immutable?)Â #f)
                  Â (or/cÂ (integer-inÂ 1Â 65535)Â #f)
                  Â (or/cÂ 'serverÂ 'client)
                  Â . -> .Â any)
Â Â link-guardÂ :Â (or/cÂ (symbol?Â path?Â path?Â . -> .Â any)Â #f)Â =Â #f
parameter
(current-security-guard)Â ->Â security-guard?
(current-security-guardÂ guard)Â ->Â void?
Â Â guardÂ :Â security-guard?
procedure
(custodian?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-custodianÂ [cust])Â ->Â custodian?
Â Â custÂ :Â (and/cÂ custodian?Â (not/cÂ custodian-shut-down?))
Â  Â    Â =Â (current-custodian)
procedure
(custodian-shutdown-allÂ cust)Â ->Â void?
Â Â custÂ :Â custodian?
procedure
(custodian-shut-down?Â cust)Â ->Â boolean?
Â Â custÂ :Â custodian?
parameter
(current-custodian)Â ->Â custodian?
(current-custodianÂ cust)Â ->Â void?
Â Â custÂ :Â custodian?
procedure
(custodian-managed-listÂ custÂ super)Â ->Â list?
Â Â custÂ :Â custodian?
Â Â superÂ :Â custodian?
procedure
(custodian-memory-accounting-available?)Â ->Â boolean?
procedure
(custodian-require-memoryÂ limit-custÂ Â  Â Â 
Â                         Â need-amt  Â Â  Â Â 
Â                         Â stop-cust)Â ->Â void?
Â Â limit-custÂ :Â custodian?
Â Â need-amtÂ :Â exact-nonnegative-integer?
Â Â stop-custÂ :Â custodian?
procedure
(custodian-limit-memoryÂ  limit-cust Â Â  Â Â 
Â                       Â  limit-amt  Â Â  Â Â 
Â                       Â [stop-cust])Â ->Â void?
Â Â limit-custÂ :Â custodian?
Â Â limit-amtÂ :Â exact-nonnegative-integer?
Â Â stop-custÂ :Â custodian?Â =Â limit-cust
procedure
(make-custodian-boxÂ custÂ v)Â ->Â custodian-box?
Â Â custÂ :Â custodian?
Â Â vÂ :Â any/c
procedure
(custodian-box?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(custodian-box-valueÂ cb)Â ->Â any
Â Â cbÂ :Â custodian-box?
procedure
(make-thread-groupÂ [group])Â ->Â thread-group?
Â Â groupÂ :Â thread-group?Â =Â (current-thread-group)
procedure
(thread-group?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(current-thread-group)Â ->Â thread-group?
(current-thread-groupÂ group)Â ->Â void?
Â Â groupÂ :Â thread-group?
procedure
(inspector?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-inspectorÂ [inspector])Â ->Â inspector?
Â Â inspectorÂ :Â inspector?Â =Â (current-inspector)
procedure
(make-sibling-inspectorÂ [inspector])Â ->Â inspector?
Â Â inspectorÂ :Â inspector?Â =Â (current-inspector)
procedure
(inspector-superior?Â inspector          Â Â  Â Â 
Â                    Â maybe-subinspector)Â ->Â boolean?
Â Â inspectorÂ :Â inspector?
Â Â maybe-subinspectorÂ :Â inspector?
parameter
(current-inspector)Â ->Â inspector?
(current-inspectorÂ insp)Â ->Â void?
Â Â inspÂ :Â inspector?
procedure
(struct-infoÂ v)Â ->Â (or/cÂ struct-type?Â #f)Â boolean?
Â Â vÂ :Â any/c
procedure
(struct-type-infoÂ struct-type)
Â ->Â symbol?
    exact-nonnegative-integer?
    exact-nonnegative-integer?
    struct-accessor-procedure?
    struct-mutator-procedure?
    (listofÂ exact-nonnegative-integer?)
    (or/cÂ struct-type?Â #f)
    boolean?
Â Â struct-typeÂ :Â struct-type?
procedure
(struct-type-sealed?Â struct-type)Â ->Â boolean?
Â Â struct-typeÂ :Â struct-type?
procedure
(struct-type-authentic?Â struct-type)Â ->Â boolean?
Â Â struct-typeÂ :Â struct-type?
procedure
(struct-type-make-constructorÂ  struct-type       Â 
Â                             Â [constructor-name])Â 
Â ->Â struct-constructor-procedure?
Â Â struct-typeÂ :Â struct-type?
Â Â constructor-nameÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
procedure
(struct-type-make-predicateÂ struct-type)Â ->Â any
Â Â struct-typeÂ :Â any/c
procedure
(object-nameÂ v)Â ->Â any
Â Â vÂ :Â any/c
value
prop:object-nameÂ :Â struct-type-property?
parameter
(current-code-inspector)Â ->Â inspector?
(current-code-inspectorÂ insp)Â ->Â void?
Â Â inspÂ :Â inspector?
procedure
(plumber?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-plumber)Â ->Â plumber?
parameter
(current-plumber)Â ->Â plumber?
(current-plumberÂ plumber)Â ->Â void?
Â Â plumberÂ :Â plumber?
procedure
(plumber-flush-allÂ plumber)Â ->Â void?
Â Â plumberÂ :Â plumber?
procedure
(plumber-flush-handle?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(plumber-add-flush!Â plumberÂ procÂ [weak?])Â ->Â plumber-flush-handle?
Â Â plumberÂ :Â plumber?
Â Â procÂ :Â (plumber-flush-handle?Â . -> .Â any)
Â Â weak?Â :Â any/cÂ =Â #f
procedure
(plumber-flush-handle-remove!Â handle)Â ->Â void?
Â Â handleÂ :Â plumber-flush-handle?
procedure
(make-evaluator                                                       Â 
Â               Â  language                                             Â 
Â               Â  input-programÂ ...                                    Â 
Â               Â [#:requiresÂ requires                                  Â 
Â               Â  #:allow-for-requireÂ allow-for-require                Â 
Â               Â  #:allow-for-loadÂ allow-for-load                      Â 
Â               Â  #:allow-readÂ allow-read                              Â 
Â               Â  #:allow-syntactic-requiresÂ allow-syntactic-requires])Â 
Â ->Â (any/cÂ . -> .Â any)
Â Â languageÂ :Â (or/cÂ module-path?
             Â Â Â Â Â Â (list/cÂ 'specialÂ symbol?)
             Â Â Â Â Â Â (cons/cÂ 'beginÂ list?))
Â Â input-programÂ :Â any/c
Â Â requiresÂ :Â (listofÂ (or/cÂ module-path?Â path-string?
             Â Â Â Â Â Â Â Â Â Â Â Â Â Â (cons/cÂ 'for-syntaxÂ (listofÂ module-path?))))
Â  Â        Â =Â null
Â Â allow-for-requireÂ :Â (listofÂ (or/cÂ module-path?Â path?))Â =Â null
Â Â allow-for-loadÂ :Â (listofÂ path-string?)Â =Â null
Â Â allow-readÂ :Â (listofÂ (or/cÂ module-path?Â path-string?))Â =Â null
Â Â allow-syntactic-requiresÂ :Â (or/cÂ #fÂ (listofÂ module-path?))
Â  Â                        Â =Â #f
(make-module-evaluator                                                       Â 
Â                      Â  module-decl                                          Â 
Â                      Â [#:languageÂ lang                                      Â 
Â                      Â  #:readersÂ readers                                    Â 
Â                      Â  #:allow-for-requireÂ allow-for-require                Â 
Â                      Â  #:allow-for-loadÂ allow-for-load                      Â 
Â                      Â  #:allow-readÂ allow-read                              Â 
Â                      Â  #:allow-syntactic-requiresÂ allow-syntactic-requires])Â 
Â ->Â (any/cÂ . -> .Â any)
Â Â module-declÂ :Â (or/cÂ syntax?Â pair?Â path?Â input-port?Â string?Â bytes?)
Â Â langÂ :Â (or/cÂ #fÂ module-path?)Â =Â #f
Â Â readersÂ :Â (or/cÂ #fÂ (listofÂ module-path?))
Â  Â       Â =Â (andÂ langÂ (default-language-readersÂ lang))
Â Â allow-for-requireÂ :Â (listofÂ (or/cÂ module-path?Â path?))Â =Â null
Â Â allow-for-loadÂ :Â (listofÂ path-string?)Â =Â null
Â Â allow-readÂ :Â (listofÂ (or/cÂ module-path?Â path-string?))Â =Â null
Â Â allow-syntactic-requiresÂ :Â (or/cÂ #fÂ (listofÂ module-path?))
Â  Â                        Â =Â #f
procedure
(exn:fail:sandbox-terminated?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
(exn:fail:sandbox-terminated-reasonÂ exn)Â ->Â symbol?
Â Â exnÂ :Â exn:fail:sandbox-terminated?
procedure
(call-with-trusted-sandbox-configurationÂ thunk)Â ->Â any
Â Â thunkÂ :Â (->Â any)
parameter
(sandbox-init-hook)Â ->Â (->Â any)
(sandbox-init-hookÂ thunk)Â ->Â void?
Â Â thunkÂ :Â (->Â any)
parameter
(sandbox-reader)Â ->Â (any/cÂ . -> .Â any)
(sandbox-readerÂ proc)Â ->Â void?
Â Â procÂ :Â (any/cÂ . -> .Â any)
parameter
(sandbox-input)Â ->Â (or/cÂ #f
                   Â Â Â Â Â Â string?Â bytes?
                   Â Â Â Â Â Â input-port?
                   Â Â Â Â Â Â 'pipe
                   Â Â Â Â Â Â (->Â input-port?))
(sandbox-inputÂ in)Â ->Â void?
Â Â inÂ :Â (or/cÂ #f
       Â Â Â Â Â Â string?Â bytes?
       Â Â Â Â Â Â input-port?
       Â Â Â Â Â Â 'pipe
       Â Â Â Â Â Â (->Â input-port?))
parameter
(sandbox-output)Â ->Â (or/cÂ #f
                    Â Â Â Â Â Â output-port?
                    Â Â Â Â Â Â 'pipe
                    Â Â Â Â Â Â 'bytes
                    Â Â Â Â Â Â 'string
                    Â Â Â Â Â Â (->Â output-port?))
(sandbox-outputÂ in)Â ->Â void?
Â Â inÂ :Â (or/cÂ #f
       Â Â Â Â Â Â output-port?
       Â Â Â Â Â Â 'pipe
       Â Â Â Â Â Â 'bytes
       Â Â Â Â Â Â 'string
       Â Â Â Â Â Â (->Â output-port?))
parameter
(sandbox-error-output)Â ->Â (or/cÂ #f
                          Â Â Â Â Â Â output-port?
                          Â Â Â Â Â Â 'pipe
                          Â Â Â Â Â Â 'bytes
                          Â Â Â Â Â Â 'string
                          Â Â Â Â Â Â (->Â output-port?))
(sandbox-error-outputÂ in)Â ->Â void?
Â Â inÂ :Â (or/cÂ #f
       Â Â Â Â Â Â output-port?
       Â Â Â Â Â Â 'pipe
       Â Â Â Â Â Â 'bytes
       Â Â Â Â Â Â 'string
       Â Â Â Â Â Â (->Â output-port?))
parameter
(sandbox-coverage-enabled)Â ->Â boolean?
(sandbox-coverage-enabledÂ enabled?)Â ->Â void?
Â Â enabled?Â :Â any/c
parameter
(sandbox-propagate-breaks)Â ->Â boolean?
(sandbox-propagate-breaksÂ propagate?)Â ->Â void?
Â Â propagate?Â :Â any/c
parameter
(sandbox-propagate-exceptions)Â ->Â boolean?
(sandbox-propagate-exceptionsÂ propagate?)Â ->Â void?
Â Â propagate?Â :Â any/c
parameter
(sandbox-namespace-specs)Â ->Â (cons/cÂ (->Â namespace?)
                             Â Â Â Â Â Â Â Â (listofÂ module-path?))
(sandbox-namespace-specsÂ spec)Â ->Â void?
Â Â specÂ :Â (cons/cÂ (->Â namespace?)
         Â Â Â Â Â Â Â Â (listofÂ module-path?))
procedure
(sandbox-make-namespace)Â ->Â namespace?
parameter
(sandbox-gui-available)Â ->Â boolean?
(sandbox-gui-availableÂ avail?)Â ->Â void?
Â Â avail?Â :Â any/c
parameter
(sandbox-override-collection-paths)Â ->Â (listofÂ path-string?)
(sandbox-override-collection-pathsÂ paths)Â ->Â void?
Â Â pathsÂ :Â (listofÂ path-string?)
parameter
(sandbox-security-guard)
Â ->Â (or/cÂ security-guard?Â (->Â security-guard?))
(sandbox-security-guardÂ guard)Â ->Â void?
Â Â guardÂ :Â (or/cÂ security-guard?Â (->Â security-guard?))
parameter
(sandbox-path-permissions)
Â ->Â (listofÂ (list/cÂ (or/cÂ 'executeÂ 'writeÂ 'delete
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'read-bytecodeÂ 'readÂ 'exists)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ byte-regexp?Â bytes?Â string?Â path?)))
(sandbox-path-permissionsÂ perms)Â ->Â void?
Â Â permsÂ :Â (listofÂ (list/cÂ (or/cÂ 'executeÂ 'writeÂ 'delete
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'read-bytecodeÂ 'readÂ 'exists)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ byte-regexp?Â bytes?Â string?Â path?)))
parameter
(sandbox-network-guard)
Â ->Â (symbol?
    Â (or/cÂ (and/cÂ string?Â immutable?)Â #f)
    Â (or/cÂ (integer-inÂ 1Â 65535)Â #f)
    Â (or/cÂ 'serverÂ 'client)
    Â . -> .Â any)
(sandbox-network-guardÂ proc)Â ->Â void?
Â Â procÂ :Â (symbol?
         Â (or/cÂ (and/cÂ string?Â immutable?)Â #f)
         Â (or/cÂ (integer-inÂ 1Â 65535)Â #f)
         Â (or/cÂ 'serverÂ 'client)
         Â . -> .Â any)
parameter
(sandbox-exit-handler)Â ->Â (any/cÂ . -> .Â any)
(sandbox-exit-handlerÂ handler)Â ->Â void?
Â Â handlerÂ :Â (any/cÂ . -> .Â any)
parameter
(sandbox-memory-limit)Â ->Â (or/cÂ (>=/cÂ 0)Â #f)
(sandbox-memory-limitÂ limit)Â ->Â void?
Â Â limitÂ :Â (or/cÂ (>=/cÂ 0)Â #f)
parameter
(sandbox-eval-limits)Â ->Â (or/cÂ (list/cÂ (or/cÂ (>=/cÂ 0)Â #f)
                         Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (>=/cÂ 0)Â #f))
                         Â Â Â Â Â Â #f)
(sandbox-eval-limitsÂ limits)Â ->Â void?
Â Â limitsÂ :Â (or/cÂ (list/cÂ (or/cÂ (>=/cÂ 0)Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ (>=/cÂ 0)Â #f))
           Â Â Â Â Â Â #f)
parameter
(sandbox-eval-handlers)
Â ->Â (list/cÂ (or/cÂ #fÂ ((->Â any)Â . -> .Â any))
    Â Â Â Â Â Â Â Â (or/cÂ #fÂ ((->Â any)Â . -> .Â any)))
(sandbox-eval-handlersÂ handlers)Â ->Â void?
Â Â handlersÂ :Â (list/cÂ (or/cÂ #fÂ ((->Â any)Â . -> .Â any))
             Â Â Â Â Â Â Â Â (or/cÂ #fÂ ((->Â any)Â . -> .Â any)))
parameter
(sandbox-run-submodules)Â ->Â (list/cÂ symbol?)
(sandbox-run-submodulesÂ submod-syms)Â ->Â void?
Â Â submod-symsÂ :Â (list/cÂ symbol?)
parameter
(sandbox-make-inspector)Â ->Â (->Â inspector?)
(sandbox-make-inspectorÂ make)Â ->Â void?
Â Â makeÂ :Â (->Â inspector?)
parameter
(sandbox-make-code-inspector)Â ->Â (->Â inspector?)
(sandbox-make-code-inspectorÂ make)Â ->Â void?
Â Â makeÂ :Â (->Â inspector?)
parameter
(sandbox-make-logger)Â ->Â (->Â logger?)
(sandbox-make-loggerÂ make)Â ->Â void?
Â Â makeÂ :Â (->Â logger?)
parameter
(sandbox-make-plumber)Â ->Â (or/cÂ (->Â plumber?)Â 'propagate)
(sandbox-make-plumberÂ make)Â ->Â void?
Â Â makeÂ :Â (or/cÂ (->Â plumber?)Â 'propagate)
parameter
(sandbox-make-environment-variables)
Â ->Â (->Â environment-variables?)
(sandbox-make-environment-variablesÂ make)Â ->Â void?
Â Â makeÂ :Â (->Â environment-variables?)
procedure
(default-language-readersÂ lang)Â ->Â (listofÂ module-path?)
Â Â langÂ :Â module-path?
procedure
(evaluator-alive?Â evaluator)Â ->Â boolean?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
procedure
(kill-evaluatorÂ evaluator)Â ->Â void?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
procedure
(break-evaluatorÂ evaluator)Â ->Â void?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
procedure
(get-user-custodianÂ evaluator)Â ->Â void?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
procedure
(set-eval-limitsÂ evaluatorÂ secsÂ mb)Â ->Â void?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
Â Â secsÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â mbÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
procedure
(set-eval-handlerÂ evaluatorÂ handler)Â ->Â void?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
Â Â handlerÂ :Â (or/cÂ #fÂ ((->Â any)Â . -> .Â any))
procedure
(call-with-custodian-shutdownÂ thunk)Â ->Â any
Â Â thunkÂ :Â (->Â any)
(call-with-killing-threadsÂ thunk)Â ->Â any
Â Â thunkÂ :Â (->Â any)
procedure
(put-inputÂ evaluator)Â ->Â output-port?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
(put-inputÂ evaluatorÂ i/o)Â ->Â void?
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
Â Â i/oÂ :Â (or/cÂ bytes?Â string?Â eof-object?)
procedure
(get-outputÂ evaluator)Â ->Â (or/cÂ #fÂ input-port?Â bytes?Â string?)
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
(get-error-outputÂ evaluator)
Â ->Â (or/cÂ #fÂ input-port?Â bytes?Â string?)
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
procedure
(get-uncovered-expressionsÂ  evaluatorÂ Â  Â Â 
Â                          Â [prog?    Â Â  Â Â 
Â                          Â  src])    Â ->Â (listofÂ syntax?)
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
Â Â prog?Â :Â any/cÂ =Â #t
Â Â srcÂ :Â any/cÂ =Â default-src
procedure
(call-in-sandbox-contextÂ  evaluator      Â Â  Â Â 
Â                        Â  thunk          Â Â  Â Â 
Â                        Â [unrestricted?])Â ->Â any
Â Â evaluatorÂ :Â (any/cÂ . -> .Â any)
Â Â thunkÂ :Â (->Â any)
Â Â unrestricted?Â :Â boolean?Â =Â #f
value
gui?Â :Â boolean?
procedure
(call-with-limitsÂ secsÂ mbÂ thunk)Â ->Â any
Â Â secsÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â mbÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â thunkÂ :Â (->Â any)
syntax
(with-limitsÂ sec-exprÂ mb-exprÂ bodyÂ ...)
procedure
(call-with-deep-time-limitÂ secsÂ thunk)Â ->Â any
Â Â secsÂ :Â exact-nonnegative-integer?
Â Â thunkÂ :Â (->Â any)
syntax
(with-deep-time-limitÂ secs-exprÂ bodyÂ ...)
procedure
(exn:fail:resource?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
(exn:fail:resource-resourceÂ exn)
Â ->Â (or/cÂ 'timeÂ 'memoryÂ 'deep-time)
Â Â exnÂ :Â exn:fail:resource?

(linkletÂ [[imported-id/renamedÂ ...]Â ...]
Â Â Â Â Â Â Â Â Â [exported-id/renamedÂ ...]
Â Â defn-or-exprÂ ...)
Â 
imported-id/renamedÂ =Â imported-id
                  Â Â |Â (external-imported-idÂ internal-imported-id)
                  Â Â Â Â Â 
exported-id/renamedÂ =Â exported-id
                  Â Â |Â (internal-exported-idÂ external-exported-id)
procedure
(linklet?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(compile-linkletÂ  form       Â Â  Â Â 
Â                Â [name       Â Â  Â Â 
Â                Â  import-keysÂ Â  Â Â 
Â                Â  get-import Â Â  Â Â 
Â                Â  options])  Â ->Â linklet?
Â Â formÂ :Â (or/cÂ correlated?Â any/c)
Â Â nameÂ :Â any/cÂ =Â #f
Â Â import-keysÂ :Â #fÂ =Â #f
Â Â get-importÂ :Â #fÂ =Â #f
Â Â optionsÂ :Â (listofÂ (or/cÂ 'serializableÂ 'unsafeÂ 'staticÂ 'quick
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'use-promptÂ 'uninterned-literal))
Â  Â       Â =Â '(serializable)
(compile-linkletÂ  form       Â Â  Â Â 
Â                Â  name       Â Â  Â Â 
Â                Â  import-keysÂ Â  Â Â 
Â                Â [get-import Â Â  Â Â 
Â                Â  options])  Â ->Â linklet?Â vector?
Â Â formÂ :Â (or/cÂ correlated?Â any/c)
Â Â nameÂ :Â any/c
Â Â import-keysÂ :Â vector?
Â Â get-importÂ :Â (or/cÂ #fÂ (any/cÂ . -> .Â (valuesÂ (or/cÂ linklet?Â instance?Â #f)
               Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ vector?Â #f))))
Â  Â          Â =Â #f
Â Â optionsÂ :Â (listofÂ (or/cÂ 'serializableÂ 'unsafeÂ 'staticÂ 'quick
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'use-promptÂ 'uninterned-literal))
Â  Â       Â =Â '(serializable)
procedure
(recompile-linkletÂ  linklet    Â Â  Â Â 
Â                  Â [name       Â Â  Â Â 
Â                  Â  import-keysÂ Â  Â Â 
Â                  Â  get-import Â Â  Â Â 
Â                  Â  options])  Â ->Â linklet?
Â Â linkletÂ :Â linklet?
Â Â nameÂ :Â any/cÂ =Â #f
Â Â import-keysÂ :Â #fÂ =Â #f
Â Â get-importÂ :Â #fÂ =Â #f
Â Â optionsÂ :Â (listofÂ (or/cÂ 'serializableÂ 'unsafeÂ 'staticÂ 'quick
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'use-promptÂ 'uninterned-literal))
Â  Â       Â =Â '(serializable)
(recompile-linkletÂ  linklet    Â Â  Â Â 
Â                  Â  name       Â Â  Â Â 
Â                  Â  import-keysÂ Â  Â Â 
Â                  Â [get-import Â Â  Â Â 
Â                  Â  options])  Â ->Â linklet?Â vector?
Â Â linkletÂ :Â linklet?
Â Â nameÂ :Â any/c
Â Â import-keysÂ :Â vector?
Â Â get-importÂ :Â (or/cÂ (any/cÂ . -> .Â (valuesÂ (or/cÂ linklet?Â #f)
               Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ vector?Â #f)))
               Â Â Â Â Â Â #f)
Â  Â          Â =Â (lambdaÂ (import-key)Â (valuesÂ #fÂ #f))
Â Â optionsÂ :Â (listofÂ (or/cÂ 'serializableÂ 'unsafeÂ 'staticÂ 'quick
            Â Â Â Â Â Â Â Â Â Â Â Â Â Â 'use-promptÂ 'uninterned-literal))
Â  Â       Â =Â '(serializable)
procedure
(eval-linkletÂ linklet)Â ->Â linklet?
Â Â linkletÂ :Â linklet?
procedure
(instantiate-linkletÂ  linklet         Â Â  Â Â 
Â                    Â  import-instancesÂ Â  Â Â 
Â                    Â [target-instance?Â Â  Â Â 
Â                    Â  use-prompt?])   Â ->Â instance?
Â Â linkletÂ :Â linklet?
Â Â import-instancesÂ :Â (listofÂ instance?)
Â Â target-instance?Â :Â #fÂ =Â #f
Â Â use-prompt?Â :Â any/cÂ =Â #t
(instantiate-linkletÂ  linklet         Â Â  Â Â 
Â                    Â  import-instancesÂ Â  Â Â 
Â                    Â  target-instance Â Â  Â Â 
Â                    Â [use-prompt?])   Â ->Â any
Â Â linkletÂ :Â linklet?
Â Â import-instancesÂ :Â (listofÂ instance?)
Â Â target-instanceÂ :Â instance?
Â Â use-prompt?Â :Â any/cÂ =Â #t
procedure
(linklet-import-variablesÂ linklet)Â ->Â (listofÂ (listofÂ symbol?))
Â Â linkletÂ :Â linklet?
procedure
(linklet-export-variablesÂ linklet)Â ->Â (listofÂ symbol?)
Â Â linkletÂ :Â linklet?
procedure
(linklet-directory?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(hash->linklet-directoryÂ content)Â ->Â linklet-directory?
Â Â contentÂ :Â (and/cÂ hash?Â hash-eq?Â immutable?Â (not/cÂ impersonator?))
procedure
(linklet-directory->hashÂ linklet-directory)
Â ->Â (and/cÂ hash?Â hash-eq?Â immutable?Â (not/cÂ impersonator?))
Â Â linklet-directoryÂ :Â linklet-directory?
procedure
(linklet-bundle?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(hash->linklet-bundleÂ content)Â ->Â linklet-bundle?
Â Â contentÂ :Â (and/cÂ hash?Â hash-eq?Â immutable?Â (not/cÂ impersonator?))
procedure
(linklet-bundle->hashÂ linklet-bundle)
Â ->Â (and/cÂ hash?Â hash-eq?Â immutable?Â (not/cÂ impersonator?))
Â Â linklet-bundleÂ :Â linklet-bundle?
procedure
(linklet-body-reserved-symbol?Â sym)Â ->Â boolean?
Â Â symÂ :Â symbol?
procedure
(instance?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-instanceÂ  name              Â Â  Â Â 
Â              Â [data              Â Â  Â Â 
Â              Â  mode]             Â Â  Â Â 
Â              Â  variable-name     Â Â  Â Â 
Â              Â  variable-valueÂ ...Â Â  Â Â 
Â              Â  ...)              Â ->Â instance?
Â Â nameÂ :Â any/c
Â Â dataÂ :Â any/cÂ =Â #f
Â Â modeÂ :Â (or/cÂ #fÂ 'constantÂ 'consistent)Â =Â #f
Â Â variable-nameÂ :Â symbol?
Â Â variable-valueÂ :Â any/c
procedure
(instance-nameÂ instance)Â ->Â any/c
Â Â instanceÂ :Â instance?
procedure
(instance-dataÂ instance)Â ->Â any/c
Â Â instanceÂ :Â instance?
procedure
(instance-variable-namesÂ instance)Â ->Â (listÂ symbol?)
Â Â instanceÂ :Â instance?
procedure
(instance-variable-valueÂ  instanceÂ Â  Â Â 
Â                        Â  name    Â Â  Â Â 
Â                        Â [fail-k])Â ->Â any
Â Â instanceÂ :Â instance?
Â Â nameÂ :Â symbol?
Â Â fail-kÂ :Â any/cÂ =Â (lambdaÂ ()Â (errorÂ ....))
procedure
(instance-set-variable-value!Â  instanceÂ Â  Â Â 
Â                             Â  name    Â Â  Â Â 
Â                             Â  v       Â Â  Â Â 
Â                             Â [mode])  Â ->Â void?
Â Â instanceÂ :Â instance?
Â Â nameÂ :Â symbol?
Â Â vÂ :Â any/c
Â Â modeÂ :Â (or/cÂ #fÂ 'constantÂ 'consistent)Â =Â #f
procedure
(instance-unset-variable!Â instanceÂ name)Â ->Â void?
Â Â instanceÂ :Â instance?
Â Â nameÂ :Â symbol?
procedure
(instance-describe-variable!Â instanceÂ Â  Â Â 
Â                            Â name    Â Â  Â Â 
Â                            Â desc-v) Â ->Â void?
Â Â instanceÂ :Â instance?
Â Â nameÂ :Â symbol?
Â Â desc-vÂ :Â any/c
procedure
(variable-reference->instanceÂ  varref     Â 
Â                             Â [ref-site?])Â 
Â ->Â (ifÂ ref-site?Â (or/cÂ instance?Â #fÂ symbol?)Â instance?)
Â Â varrefÂ :Â variable-reference?
Â Â ref-site?Â :Â any/cÂ =Â #f
procedure
(correlated?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(correlated-sourceÂ crlt)Â ->Â any
Â Â crltÂ :Â correlated?
procedure
(correlated-lineÂ crlt)Â ->Â (or/cÂ exact-positive-integer?Â #f)
Â Â crltÂ :Â correlated?
procedure
(correlated-columnÂ crlt)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â crltÂ :Â correlated?
procedure
(correlated-positionÂ crlt)Â ->Â (or/cÂ exact-positive-integer?Â #f)
Â Â crltÂ :Â correlated?
procedure
(correlated-spanÂ crlt)Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â crltÂ :Â correlated?
procedure
(correlated-eÂ crlt)Â ->Â any
Â Â crltÂ :Â correlated?
procedure
(correlated->datumÂ crlt)Â ->Â any
Â Â crltÂ :Â (or/cÂ correlated?Â any/c)
procedure
(datum->correlatedÂ vÂ [srclocÂ prop])Â ->Â correlated?
Â Â vÂ :Â any/c
Â Â srclocÂ :Â (or/cÂ correlated?Â #f
           Â Â Â Â Â Â (list/cÂ any/c
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f))
           Â Â Â Â Â Â (vector/cÂ any/c
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-positive-integer?Â #f)
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (or/cÂ exact-nonnegative-integer?Â #f)))
Â  Â      Â =Â #f
Â Â propÂ :Â (or/cÂ correlated?Â #f)Â =Â #f
procedure
(correlated-propertyÂ crltÂ keyÂ val)Â ->Â correlated?
Â Â crltÂ :Â correlated?
Â Â keyÂ :Â any/c
Â Â valÂ :Â any/c
(correlated-propertyÂ crltÂ key)Â ->Â any/c
Â Â crltÂ :Â correlated?
Â Â keyÂ :Â any/c
procedure
(correlated-property-symbol-keysÂ crlt)Â ->Â list?
Â Â crltÂ :Â correlated?
procedure
(path?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(path-string?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(path-for-some-system?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(string->pathÂ str)Â ->Â path?
Â Â strÂ :Â string?
procedure
(bytes->pathÂ bstrÂ [type])Â ->Â path?
Â Â bstrÂ :Â bytes?
Â Â typeÂ :Â (or/cÂ 'unixÂ 'windows)Â =Â (system-path-convention-type)
procedure
(path->stringÂ path)Â ->Â string?
Â Â pathÂ :Â path?
procedure
(path->bytesÂ path)Â ->Â bytes?
Â Â pathÂ :Â path-for-some-system?
procedure
(string->path-elementÂ  str                    Â 
Â                     Â [false-on-non-element?])Â 
Â ->Â (or/cÂ (and/cÂ path?Â path-element?)Â #f)
Â Â strÂ :Â string?
Â Â false-on-non-element?Â :Â any/cÂ =Â #f
procedure
(bytes->path-elementÂ  bstr                   Â 
Â                    Â [type                   Â 
Â                    Â  false-on-non-element?])Â 
Â ->Â (or/cÂ path-element?Â #f)
Â Â bstrÂ :Â bytes?
Â Â typeÂ :Â (or/cÂ 'unixÂ 'windows)Â =Â (system-path-convention-type)
Â Â false-on-non-element?Â :Â any/cÂ =Â #f
procedure
(path-element->stringÂ path)Â ->Â string?
Â Â pathÂ :Â path-element?
procedure
(path-element->bytesÂ path)Â ->Â bytes?
Â Â pathÂ :Â path-element?
procedure
(path<?Â a-pathÂ b-pathÂ ...)Â ->Â boolean?
Â Â a-pathÂ :Â path?
Â Â b-pathÂ :Â path?
procedure
(path-convention-typeÂ path)Â ->Â (or/cÂ 'unixÂ 'windows)
Â Â pathÂ :Â path-for-some-system?
procedure
(system-path-convention-type)Â ->Â (or/cÂ 'unixÂ 'windows)
procedure
(build-pathÂ baseÂ subÂ ...)Â ->Â path-for-some-system?
Â Â baseÂ :Â (or/cÂ path-string?Â path-for-some-system?Â 'upÂ 'same)
Â Â subÂ :Â (or/cÂ (and/cÂ (or/cÂ path-string?Â path-for-some-system?)
        Â Â Â Â Â Â Â Â Â Â Â Â Â (not/cÂ complete-path?))
        Â Â Â Â Â Â (or/cÂ 'upÂ 'same))
procedure
(build-path/convention-typeÂ type    Â Â  Â Â 
Â                           Â base    Â Â  Â Â 
Â                           Â subÂ ...)Â ->Â path-for-some-system?
Â Â typeÂ :Â (or/cÂ 'unixÂ 'windows)
Â Â baseÂ :Â (or/cÂ path-string?Â path-for-some-system?Â 'upÂ 'same)
Â Â subÂ :Â (or/cÂ (and/cÂ (or/cÂ path-string?Â path-for-some-system?)
        Â Â Â Â Â Â Â Â Â Â Â Â Â (not/cÂ complete-path?))
        Â Â Â Â Â Â (or/cÂ 'upÂ 'same))
procedure
(absolute-path?Â path)Â ->Â boolean?
Â Â pathÂ :Â (or/cÂ path?Â string?Â path-for-some-system?)
procedure
(relative-path?Â path)Â ->Â boolean?
Â Â pathÂ :Â (or/cÂ path?Â string?Â path-for-some-system?)
procedure
(complete-path?Â path)Â ->Â boolean?
Â Â pathÂ :Â (or/cÂ path?Â string?Â path-for-some-system?)
procedure
(path->complete-pathÂ pathÂ [base])Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â baseÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â  Â    Â =Â (current-directory)
procedure
(path->directory-pathÂ path)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(resolve-pathÂ path)Â ->Â path?
Â Â pathÂ :Â path-string?
procedure
(cleanse-pathÂ path)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(expand-user-pathÂ path)Â ->Â path?
Â Â pathÂ :Â path-string?
procedure
(simplify-pathÂ pathÂ [use-filesystem?])Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â use-filesystem?Â :Â boolean?Â =Â #t
procedure
(normal-case-pathÂ path)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(split-pathÂ path)Â ->Â (or/cÂ path-for-some-system?Â 'relativeÂ #f)
                     (or/cÂ path-for-some-system?Â 'upÂ 'same)
                     boolean?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(explode-pathÂ path)
Â ->Â (listofÂ (or/cÂ path-for-some-system?Â 'upÂ 'same))
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(path-replace-extensionÂ pathÂ ext)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â extÂ :Â (or/cÂ string?Â bytes?)
procedure
(path-add-extensionÂ pathÂ extÂ [sep])Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â extÂ :Â (or/cÂ string?Â bytes?)
Â Â sepÂ :Â (or/cÂ string?Â bytes?)Â =Â #"_"
procedure
(path-replace-suffixÂ pathÂ ext)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â extÂ :Â (or/cÂ string?Â bytes?)
procedure
(path-add-suffixÂ pathÂ ext)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â extÂ :Â (or/cÂ string?Â bytes?)
procedure
(reroot-pathÂ pathÂ root-path)Â ->Â path-for-some-system?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â root-pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(file-name-from-pathÂ path)Â ->Â (or/cÂ path-for-some-system?Â #f)
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(path-get-extensionÂ path)Â ->Â (or/cÂ bytes?Â #f)
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(path-has-extension?Â pathÂ ext)Â ->Â boolean?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â extÂ :Â (or/cÂ bytes?Â string?)
procedure
(filename-extensionÂ path)Â ->Â (or/cÂ bytes?Â #f)
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(find-relative-pathÂ  base                               Â 
Â                   Â  path                               Â 
Â                   Â [#:more-than-root?Â more-than-root?  Â 
Â                   Â  #:more-than-same?Â more-than-same?  Â 
Â                   Â  #:normalize-case?Â normalize-case?])Â 
Â ->Â (or/cÂ path-for-some-system?Â path-string?)
Â Â baseÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â pathÂ :Â (or/cÂ path-string?Â Â path-for-some-system?)
Â Â more-than-root?Â :Â any/cÂ =Â #f
Â Â more-than-same?Â :Â any/cÂ =Â #t
Â Â normalize-case?Â :Â any/cÂ =Â #t
procedure
(normalize-pathÂ pathÂ [wrt])Â ->Â path?
Â Â pathÂ :Â path-string?
Â Â wrtÂ :Â (and/cÂ path-string?Â complete-path?)
Â  Â   Â =Â (current-directory)
procedure
(path-element?Â path)Â ->Â boolean?
Â Â pathÂ :Â any/c
procedure
(path-onlyÂ path)Â ->Â (or/cÂ #fÂ path-for-some-system?)
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
procedure
(simple-form-pathÂ path)Â ->Â path?
Â Â pathÂ :Â path-string?
procedure
(some-system-path->stringÂ path)Â ->Â string?
Â Â pathÂ :Â path-for-some-system?
procedure
(string->some-system-pathÂ strÂ kind)Â ->Â path-for-some-system?
Â Â strÂ :Â string?
Â Â kindÂ :Â (or/cÂ 'unixÂ 'windows)
procedure
(shrink-path-wrtÂ pthÂ other-pths)Â ->Â (or/cÂ #fÂ path?)
Â Â pthÂ :Â path?
Â Â other-pthsÂ :Â (listofÂ path?)
procedure
(find-system-pathÂ kind)Â ->Â path?
Â Â kindÂ :Â symbol?
procedure
(path-list-string->path-listÂ str               Â 
Â                            Â default-path-list)Â 
Â ->Â (listofÂ (or/cÂ path?Â 'same))
Â Â strÂ :Â (or/cÂ string?Â bytes?)
Â Â default-path-listÂ :Â (listofÂ (or/cÂ path?Â 'same))
procedure
(find-executable-pathÂ  program   Â Â  Â Â 
Â                     Â [related   Â Â  Â Â 
Â                     Â  deepest?])Â ->Â (or/cÂ path?Â #f)
Â Â programÂ :Â path-string?
Â Â relatedÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â deepest?Â :Â any/cÂ =Â #f
procedure
(file-exists?Â path)Â ->Â boolean?
Â Â pathÂ :Â path-string?
procedure
(link-exists?Â path)Â ->Â boolean?
Â Â pathÂ :Â path-string?
procedure
(file-or-directory-typeÂ pathÂ [must-exist?])
Â ->Â (or/cÂ 'fileÂ 'directoryÂ 'linkÂ 'directory-linkÂ #f)
Â Â pathÂ :Â path-string?
Â Â must-exist?Â :Â any/cÂ =Â #f
procedure
(delete-fileÂ path)Â ->Â void?
Â Â pathÂ :Â path-string?
procedure
(rename-file-or-directoryÂ  old         Â Â  Â Â 
Â                         Â  new         Â Â  Â Â 
Â                         Â [exists-ok?])Â ->Â void?
Â Â oldÂ :Â path-string?
Â Â newÂ :Â path-string?
Â Â exists-ok?Â :Â any/cÂ =Â #f
procedure
(file-or-directory-modify-secondsÂ  path    Â Â  Â Â 
Â                                 Â [secs-n])Â ->Â exact-integer?
Â Â pathÂ :Â path-string?
Â Â secs-nÂ :Â #fÂ =Â #f
(file-or-directory-modify-secondsÂ path   Â Â  Â Â 
Â                                 Â secs-n)Â ->Â void?
Â Â pathÂ :Â path-string?
Â Â secs-nÂ :Â exact-integer?
(file-or-directory-modify-secondsÂ  path        Â Â  Â Â 
Â                                 Â [secs-n      Â Â  Â Â 
Â                                 Â  fail-thunk])Â ->Â any
Â Â pathÂ :Â path-string?
Â Â secs-nÂ :Â (or/cÂ exact-integer?Â #f)Â =Â #f
Â Â fail-thunkÂ :Â (->Â any)
Â  Â          Â =Â (lambdaÂ ()Â (raiseÂ (make-exn:fail:filesystemÂ ....)))
procedure
(file-or-directory-permissionsÂ pathÂ [mode])
Â ->Â (listofÂ (or/cÂ 'readÂ 'writeÂ 'execute))
Â Â pathÂ :Â path-string?
Â Â modeÂ :Â #fÂ =Â #f
(file-or-directory-permissionsÂ pathÂ mode)Â ->Â (integer-inÂ 0Â 65535)
Â Â pathÂ :Â path-string?
Â Â modeÂ :Â 'bits
(file-or-directory-permissionsÂ pathÂ mode)Â ->Â void
Â Â pathÂ :Â path-string?
Â Â modeÂ :Â (integer-inÂ 0Â 65535)
procedure
(file-or-directory-statÂ pathÂ [as-link?])
Â ->Â (and/cÂ (hash/cÂ symbol?Â any/c)Â hash-eq?)
Â Â pathÂ :Â path-string?
Â Â as-link?Â :Â boolean?Â =Â #f
procedure
(file-or-directory-identityÂ pathÂ [as-link?])
Â ->Â exact-positive-integer?
Â Â pathÂ :Â path-string?
Â Â as-link?Â :Â any/cÂ =Â #f
procedure
(file-sizeÂ path)Â ->Â exact-nonnegative-integer?
Â Â pathÂ :Â path-string?
procedure
(copy-fileÂ  src                                          Â Â  Â Â 
Â          Â  dest                                         Â Â  Â Â 
Â          Â [exists-ok?/pos                               Â Â  Â Â 
Â          Â  #:exists-ok?Â exists-ok?                      Â Â  Â Â 
Â          Â  #:permissionsÂ permissions                    Â Â  Â Â 
Â          Â  #:replace-permissions?Â replace-permissions?])Â ->Â void?
Â Â srcÂ :Â path-string?
Â Â destÂ :Â path-string?
Â Â exists-ok?/posÂ :Â any/cÂ =Â #f
Â Â exists-ok?Â :Â any/cÂ =Â exists-ok?/pos
Â Â permissionsÂ :Â (or/cÂ #fÂ (integer-inÂ 0Â 65535))Â =Â #f
Â Â replace-permissions?Â :Â any/cÂ =Â #t
procedure
(make-file-or-directory-linkÂ toÂ path)Â ->Â void?
Â Â toÂ :Â path-string?
Â Â pathÂ :Â path-string?
parameter
(current-force-delete-permissions)Â ->Â boolean?
(current-force-delete-permissionsÂ force?)Â ->Â void?
Â Â force?Â :Â any/c
Â =Â #t
parameter
(current-directory)Â ->Â (and/cÂ path?Â complete-path?)
(current-directoryÂ path)Â ->Â void?
Â Â pathÂ :Â path-string?
parameter
(current-directory-for-user)Â ->Â (and/cÂ path?Â complete-path?)
(current-directory-for-userÂ path)Â ->Â void?
Â Â pathÂ :Â path-string?
procedure
(current-drive)Â ->Â path?
procedure
(directory-exists?Â path)Â ->Â boolean?
Â Â pathÂ :Â path-string?
procedure
(make-directoryÂ pathÂ [permissions])Â ->Â void?
Â Â pathÂ :Â path-string?
Â Â permissionsÂ :Â (integer-inÂ 0Â 65535)Â =Â #o777
procedure
(delete-directoryÂ path)Â ->Â void?
Â Â pathÂ :Â path-string?
procedure
(directory-listÂ [pathÂ #:build?Â build?])Â ->Â (listofÂ path?)
Â Â pathÂ :Â path-string?Â =Â (current-directory)
Â Â build?Â :Â any/cÂ =Â #f
procedure
(filesystem-root-list)Â ->Â (listofÂ path?)
procedure
(filesystem-change-evt?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(filesystem-change-evtÂ pathÂ [failure-thunk])
Â ->Â (or/cÂ filesystem-change-evt?Â any)
Â Â pathÂ :Â path-string?
Â Â failure-thunkÂ :Â (or/cÂ (->Â any)Â #f)Â =Â #f
procedure
(filesystem-change-evt-cancelÂ evt)Â ->Â void?
Â Â evtÂ :Â filesystem-change-evt?
syntax
(define-runtime-pathÂ idÂ maybe-runtime?-idÂ expr)
Â 
maybe-runtime?-idÂ =Â 
                Â Â |Â #:runtime?-idÂ runtime?-id
syntax
(define-runtime-pathsÂ (idÂ ...)Â maybe-runtime?-idÂ expr)
syntax
(define-runtime-path-listÂ idÂ maybe-runtime?-idÂ expr)
syntax
(define-runtime-module-path-indexÂ idÂ maybe-runtime?-idÂ module-path-expr)
syntax
(runtime-requireÂ module-path)
syntax
(define-runtime-module-pathÂ idÂ module-path)
syntax
(runtime-pathsÂ module-path)
procedure
(file->stringÂ pathÂ [#:modeÂ mode-flag])Â ->Â string?
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(file->bytesÂ pathÂ [#:modeÂ mode-flag])Â ->Â bytes?
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(file->valueÂ pathÂ [#:modeÂ mode-flag])Â ->Â any
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(file->listÂ pathÂ [procÂ #:modeÂ mode-flag])Â ->Â (listofÂ any/c)
Â Â pathÂ :Â path-string?
Â Â procÂ :Â (input-port?Â . -> .Â any/c)Â =Â read
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
procedure
(file->linesÂ  path                   Â Â  Â Â 
Â            Â [#:modeÂ mode-flag       Â Â  Â Â 
Â            Â  #:line-modeÂ line-mode])Â ->Â (listofÂ string?)
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â line-modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â         Â =Â 'any
procedure
(file->bytes-linesÂ  path                   Â Â  Â Â 
Â                  Â [#:modeÂ mode-flag       Â Â  Â Â 
Â                  Â  #:line-modeÂ line-mode])Â ->Â (listofÂ bytes?)
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â line-modeÂ :Â (or/cÂ 'linefeedÂ 'returnÂ 'return-linefeedÂ 'anyÂ 'any-one)
Â  Â         Â =Â 'any
procedure
(display-to-fileÂ  v                     Â Â  Â Â 
Â                Â  path                  Â Â  Â Â 
Â                Â [#:modeÂ mode-flag      Â Â  Â Â 
Â                Â  #:existsÂ exists-flag])Â ->Â void?
Â Â vÂ :Â any/c
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'update
                Â Â Â Â Â Â 'replaceÂ 'truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
procedure
(write-to-fileÂ  v                     Â Â  Â Â 
Â              Â  path                  Â Â  Â Â 
Â              Â [#:modeÂ mode-flag      Â Â  Â Â 
Â              Â  #:existsÂ exists-flag])Â ->Â void?
Â Â vÂ :Â any/c
Â Â pathÂ :Â path-string?
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'update
                Â Â Â Â Â Â 'replaceÂ 'truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
procedure
(display-lines-to-fileÂ  lst                   Â Â  Â Â 
Â                      Â  path                  Â Â  Â Â 
Â                      Â [#:separatorÂ separator Â Â  Â Â 
Â                      Â  #:modeÂ mode-flag      Â Â  Â Â 
Â                      Â  #:existsÂ exists-flag])Â ->Â void?
Â Â lstÂ :Â list?
Â Â pathÂ :Â path-string?
Â Â separatorÂ :Â any/cÂ =Â #"\n"
Â Â mode-flagÂ :Â (or/cÂ 'binaryÂ 'text)Â =Â 'binary
Â Â exists-flagÂ :Â (or/cÂ 'errorÂ 'appendÂ 'update
                Â Â Â Â Â Â 'replaceÂ 'truncateÂ 'truncate/replace)
Â  Â           Â =Â 'error
procedure
(copy-directory/files                                             Â 
Â                     Â  src                                        Â 
Â                     Â  dest                                       Â 
Â                     Â [#:keep-modify-seconds?Â keep-modify-seconds?Â 
Â                     Â  #:preserve-links?Â preserve-links?])        Â 
Â ->Â void?
Â Â srcÂ :Â path-string?
Â Â destÂ :Â path-string?
Â Â keep-modify-seconds?Â :Â any/cÂ =Â #f
Â Â preserve-links?Â :Â any/cÂ =Â #f
procedure
(delete-directory/filesÂ  path                       Â Â  Â Â 
Â                       Â [#:must-exist?Â must-exist?])Â ->Â void?
Â Â pathÂ :Â path-string?
Â Â must-exist?Â :Â any/cÂ =Â #t
procedure
(find-files                                                     Â 
Â           Â  predicate                                          Â 
Â           Â [start-path                                         Â 
Â           Â  #:skip-filtered-directory?Â skip-filtered-directory?Â 
Â           Â  #:follow-links?Â follow-links?])                    Â 
Â ->Â (listofÂ path?)
Â Â predicateÂ :Â (path?Â . -> .Â any/c)
Â Â start-pathÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â skip-filtered-directory?Â :Â any/cÂ =Â #f
Â Â follow-links?Â :Â any/cÂ =Â #f
procedure
(pathlist-closureÂ  path-list                      Â 
Â                 Â [#:path-filterÂ path-filter      Â 
Â                 Â  #:follow-links?Â follow-links?])Â 
Â ->Â (listofÂ path?)
Â Â path-listÂ :Â (listofÂ path-string?)
Â Â path-filterÂ :Â (or/cÂ #fÂ (path?Â . -> .Â any/c))Â =Â #f
Â Â follow-links?Â :Â any/cÂ =Â #f
procedure
(fold-filesÂ  proc           Â Â  Â Â 
Â           Â  init-val       Â Â  Â Â 
Â           Â [start-path     Â Â  Â Â 
Â           Â  follow-links?])Â ->Â any
Â Â procÂ :Â (or/cÂ (path?Â (or/cÂ 'fileÂ 'dirÂ 'link)Â any/c
         Â Â Â Â Â Â Â Â . -> .Â any/c)
         Â Â Â Â Â Â (path?Â (or/cÂ 'fileÂ 'dirÂ 'link)Â any/c
         Â Â Â Â Â Â Â Â . -> .Â (valuesÂ any/cÂ any/c)))
Â Â init-valÂ :Â any/c
Â Â start-pathÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â follow-links?Â :Â any/cÂ =Â #t
procedure
(make-directory*Â path)Â ->Â void?
Â Â pathÂ :Â path-string?
procedure
(make-parent-directory*Â path)Â ->Â void?
Â Â pathÂ :Â path-string?
procedure
(make-temporary-fileÂ [template             Â 
Â                    Â  #:copy-fromÂ copy-fromÂ 
Â                    Â  #:base-dirÂ base-dir  Â 
Â                    Â  compat-copy-from     Â 
Â                    Â  compat-base-dir])    Â 
Â ->Â (and/cÂ path?Â complete-path?)
Â Â templateÂ :Â string?Â =Â "rkttmp~a"
Â Â copy-fromÂ :Â (or/cÂ path-string?Â #fÂ 'directory)Â =Â #f
Â Â base-dirÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â compat-copy-fromÂ :Â (or/cÂ path-string?Â #fÂ 'directory)
Â  Â                Â =Â copy-from
Â Â compat-base-dirÂ :Â (or/cÂ path-string?Â #f)Â =Â base-dir
procedure
(make-temporary-directoryÂ [template             Â 
Â                         Â  #:base-dirÂ base-dir])Â 
Â ->Â (and/cÂ path?Â complete-path?)
Â Â templateÂ :Â string?Â =Â "rkttmp~a"
Â Â base-dirÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
procedure
(make-temporary-file*Â  prefix               Â 
Â                     Â  suffix               Â 
Â                     Â [#:copy-fromÂ copy-fromÂ 
Â                     Â  #:base-dirÂ base-dir])Â 
Â ->Â (and/cÂ path?Â complete-path?)
Â Â prefixÂ :Â bytes?
Â Â suffixÂ :Â bytes?
Â Â copy-fromÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â base-dirÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
procedure
(make-temporary-directory*Â  prefix               Â 
Â                          Â  suffix               Â 
Â                          Â [#:base-dirÂ base-dir])Â 
Â ->Â (and/cÂ path?Â complete-path?)
Â Â prefixÂ :Â bytes?
Â Â suffixÂ :Â bytes?
Â Â base-dirÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
procedure
(call-with-atomic-output-file                                             Â 
Â                             Â  file                                       Â 
Â                             Â  proc                                       Â 
Â                             Â [#:security-guardÂ security-guard            Â 
Â                             Â  #:rename-fail-handlerÂ rename-fail-handler])Â 
Â ->Â any
Â Â fileÂ :Â path-string?
Â Â procÂ :Â (output-port?Â path?Â . -> .Â any)
Â Â security-guardÂ :Â (or/cÂ #fÂ security-guard?)Â =Â #f
Â Â rename-fail-handlerÂ :Â (or/cÂ #fÂ (exn:fail:filesystem?Â path?Â . -> .Â any))
Â  Â                   Â =Â #f
procedure
(get-preferenceÂ  name                                   Â Â  Â Â 
Â               Â [failure-thunk                          Â Â  Â Â 
Â               Â  flush-mode                             Â Â  Â Â 
Â               Â  filename                               Â Â  Â Â 
Â               Â  #:use-lock?Â use-lock?                  Â Â  Â Â 
Â               Â  #:timeout-lock-thereÂ timeout-lock-thereÂ Â  Â Â 
Â               Â  #:lock-thereÂ lock-there])              Â ->Â any
Â Â nameÂ :Â symbol?
Â Â failure-thunkÂ :Â (->Â any)Â =Â (lambdaÂ ()Â #f)
Â Â flush-modeÂ :Â any/cÂ =Â 'timestamp
Â Â filenameÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â use-lock?Â :Â any/cÂ =Â #t
Â Â timeout-lock-thereÂ :Â (or/cÂ (path?Â . -> .Â any)Â #f)Â =Â #f
Â Â lock-thereÂ :Â (or/cÂ (path?Â . -> .Â any)Â #f)
Â  Â          Â =Â (make-handle-get-preference-locked
               Â 0.01Â nameÂ failure-thunkÂ flush-modeÂ filename
               Â #:lock-thereÂ timeout-lock-there)
procedure
(put-preferencesÂ  names      Â Â  Â Â 
Â                Â  vals       Â Â  Â Â 
Â                Â [locked-procÂ Â  Â Â 
Â                Â  filename]) Â ->Â void?
Â Â namesÂ :Â (listofÂ symbol?)
Â Â valsÂ :Â list?
Â Â locked-procÂ :Â (or/cÂ #fÂ (path?Â . -> .Â any))Â =Â #f
Â Â filenameÂ :Â (or/cÂ #fÂ path-string?)Â =Â #f
procedure
(preferences-lock-file-mode)Â ->Â (or/cÂ 'existsÂ 'file-lock)
procedure
(make-handle-get-preference-lockedÂ  delay                  Â 
Â                                  Â  name                   Â 
Â                                  Â [failure-thunk          Â 
Â                                  Â  flush-mode             Â 
Â                                  Â  filename               Â 
Â                                  Â  #:lock-thereÂ lock-thereÂ 
Â                                  Â  #:max-delayÂ max-delay])Â 
Â ->Â (path-string?Â . -> .Â any)
Â Â delayÂ :Â real?
Â Â nameÂ :Â symbol?
Â Â failure-thunkÂ :Â (->Â any)Â =Â (lambdaÂ ()Â #f)
Â Â flush-modeÂ :Â any/cÂ =Â 'timestamp
Â Â filenameÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â lock-thereÂ :Â (or/cÂ (path?Â . -> .Â any)Â #f)Â =Â #f
Â Â max-delayÂ :Â real?Â =Â 0.2
procedure
(call-with-file-lock/timeoutÂ  filename               Â Â  Â Â 
Â                            Â  kind                   Â Â  Â Â 
Â                            Â  thunk                  Â Â  Â Â 
Â                            Â  failure-thunk          Â Â  Â Â 
Â                            Â [#:lock-fileÂ lock-file  Â Â  Â Â 
Â                            Â  #:delayÂ delay          Â Â  Â Â 
Â                            Â  #:max-delayÂ max-delay])Â ->Â any
Â Â filenameÂ :Â (or/cÂ path-string?Â #f)
Â Â kindÂ :Â (or/cÂ 'sharedÂ 'exclusive)
Â Â thunkÂ :Â (->Â any)
Â Â failure-thunkÂ :Â (->Â any)
Â Â lock-fileÂ :Â (or/cÂ #fÂ path-string?)Â =Â #f
Â Â delayÂ :Â (and/cÂ real?Â (not/cÂ negative?))Â =Â 0.01
Â Â max-delayÂ :Â (and/cÂ real?Â (not/cÂ negative?))Â =Â 0.2
procedure
(make-lock-file-nameÂ path)Â ->Â path?
Â Â pathÂ :Â (or/cÂ path-string?Â path-for-some-system?)
(make-lock-file-nameÂ dirÂ name)Â ->Â path?
Â Â dirÂ :Â (or/cÂ path-string?Â path-for-some-system?)
Â Â nameÂ :Â path-element?
value
file-type-bitsÂ :Â #o170000
value
socket-type-bitsÂ :Â #o140000
value
symbolic-link-type-bitsÂ :Â #o120000
value
regular-file-type-bitsÂ :Â #o100000
value
block-device-type-bitsÂ :Â #o060000
value
directory-type-bitsÂ :Â #o040000
value
character-device-type-bitsÂ :Â #o020000
value
fifo-type-bitsÂ :Â #o010000
value
set-user-id-bitÂ :Â #o004000
value
set-group-id-bitÂ :Â #o002000
value
sticky-bitÂ :Â #o001000
value
user-permission-bitsÂ :Â #o000700
value
user-read-bitÂ :Â #o000400
value
user-write-bitÂ :Â #o000200
value
user-execute-bitÂ :Â #o000100
value
group-permission-bitsÂ :Â #o000070
value
group-read-bitÂ :Â #o000040
value
group-write-bitÂ :Â #o000020
value
group-execute-bitÂ :Â #o000010
value
other-permission-bitsÂ :Â #o000007
value
other-read-bitÂ :Â #o000004
value
other-write-bitÂ :Â #o000002
value
other-execute-bitÂ :Â #o000001
procedure
(tcp-listenÂ  port-no       Â Â  Â Â 
Â           Â [max-allow-waitÂ Â  Â Â 
Â           Â  reuse?        Â Â  Â Â 
Â           Â  hostname])    Â ->Â tcp-listener?
Â Â port-noÂ :Â listen-port-number?
Â Â max-allow-waitÂ :Â exact-nonnegative-integer?Â =Â 4
Â Â reuse?Â :Â any/cÂ =Â #f
Â Â hostnameÂ :Â (or/cÂ string?Â #f)Â =Â #f
procedure
(tcp-connectÂ  hostname       Â Â  Â Â 
Â            Â  port-no        Â Â  Â Â 
Â            Â [local-hostname Â Â  Â Â 
Â            Â  local-port-no])Â ->Â input-port?Â output-port?
Â Â hostnameÂ :Â string?
Â Â port-noÂ :Â port-number?
Â Â local-hostnameÂ :Â (or/cÂ string?Â #f)Â =Â #f
Â Â local-port-noÂ :Â (or/cÂ port-number?Â #f)Â =Â #f
procedure
(tcp-connect/enable-breakÂ  hostname       Â 
Â                         Â  port-no        Â 
Â                         Â [local-hostname]Â 
Â                         Â  local-port-no) Â 
Â ->Â input-port?Â output-port?
Â Â hostnameÂ :Â string?
Â Â port-noÂ :Â port-number?
Â Â local-hostnameÂ :Â (or/cÂ string?Â #f)Â =Â #f
Â Â local-port-noÂ :Â (or/cÂ port-number?Â #f)
procedure
(tcp-acceptÂ listener)Â ->Â input-port?Â output-port?
Â Â listenerÂ :Â tcp-listener?
procedure
(tcp-accept/enable-breakÂ listener)Â ->Â input-port?Â output-port?
Â Â listenerÂ :Â tcp-listener?
procedure
(tcp-accept-ready?Â listener)Â ->Â boolean?
Â Â listenerÂ :Â tcp-listener?
procedure
(tcp-closeÂ listener)Â ->Â void?
Â Â listenerÂ :Â tcp-listener?
procedure
(tcp-listener?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(tcp-accept-evtÂ listener)Â ->Â evt?
Â Â listenerÂ :Â tcp-listener?
procedure
(tcp-abandon-portÂ tcp-port)Â ->Â void?
Â Â tcp-portÂ :Â tcp-port?
procedure
(tcp-addressesÂ tcp-portÂ [port-numbers?])
Â ->Â (or/cÂ (valuesÂ string?Â string?)
    Â Â Â Â Â Â (valuesÂ string?Â port-number?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?Â listen-port-number?))
Â Â tcp-portÂ :Â (or/cÂ tcp-port?Â tcp-listener?Â udp?)
Â Â port-numbers?Â :Â any/cÂ =Â #f
procedure
(tcp-port?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
value
port-number?Â :Â contract?
value
listen-port-number?Â :Â contract?
procedure
(udp-open-socketÂ [family-hostname Â Â  Â Â 
Â                Â  family-port-no])Â ->Â udp?
Â Â family-hostnameÂ :Â (or/cÂ string?Â #f)Â =Â #f
Â Â family-port-noÂ :Â (or/cÂ port-number?Â #f)Â =Â #f
procedure
(udp-bind!Â  udp-socket     Â Â  Â Â 
Â          Â  hostname-stringÂ Â  Â Â 
Â          Â  port-no        Â Â  Â Â 
Â          Â [reuse?])       Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â hostname-stringÂ :Â (or/cÂ string?Â #f)
Â Â port-noÂ :Â listen-port-number?
Â Â reuse?Â :Â any/cÂ =Â #f
procedure
(udp-connect!Â udp-socket     Â Â  Â Â 
Â             Â hostname-stringÂ Â  Â Â 
Â             Â port-no)       Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â hostname-stringÂ :Â (or/cÂ string?Â #f)
Â Â port-noÂ :Â (or/cÂ port-number?Â #f)
procedure
(udp-send-toÂ  udp-socketÂ Â  Â Â 
Â            Â  hostname  Â Â  Â Â 
Â            Â  port-no   Â Â  Â Â 
Â            Â  bstr      Â Â  Â Â 
Â            Â [start-pos Â Â  Â Â 
Â            Â  end-pos]) Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â hostnameÂ :Â string?
Â Â port-noÂ :Â port-number?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-sendÂ udp-socketÂ bstrÂ [start-posÂ end-pos])Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-send-to*Â  udp-socketÂ Â  Â Â 
Â             Â  hostname  Â Â  Â Â 
Â             Â  port-no   Â Â  Â Â 
Â             Â  bstr      Â Â  Â Â 
Â             Â [start-pos Â Â  Â Â 
Â             Â  end-pos]) Â ->Â boolean?
Â Â udp-socketÂ :Â udp?
Â Â hostnameÂ :Â string?
Â Â port-noÂ :Â port-number?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-send*Â udp-socketÂ bstrÂ [start-posÂ end-pos])Â ->Â boolean?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-send-to/enable-breakÂ  udp-socketÂ Â  Â Â 
Â                         Â  hostname  Â Â  Â Â 
Â                         Â  port-no   Â Â  Â Â 
Â                         Â  bstr      Â Â  Â Â 
Â                         Â [start-pos Â Â  Â Â 
Â                         Â  end-pos]) Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â hostnameÂ :Â string?
Â Â port-noÂ :Â port-number?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-send/enable-breakÂ  udp-socketÂ Â  Â Â 
Â                      Â  bstr      Â Â  Â Â 
Â                      Â [start-pos Â Â  Â Â 
Â                      Â  end-pos]) Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-receive!Â  udp-socketÂ Â  Â Â 
Â             Â  bstr      Â Â  Â Â 
Â             Â [start-pos Â Â  Â Â 
Â             Â  end-pos]) Â ->Â exact-nonnegative-integer?
                             string?
                             port-number?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â (and/cÂ bytes?Â (notÂ immutable?))
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-receive!*Â  udp-socketÂ 
Â              Â  bstr      Â 
Â              Â [start-pos Â 
Â              Â  end-pos]) Â 
Â ->Â (or/cÂ exact-nonnegative-integer?Â #f)
    (or/cÂ string?Â #f)
    (or/cÂ port-number?Â #f)
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â (and/cÂ bytes?Â (notÂ immutable?))
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-receive!/enable-breakÂ  udp-socketÂ 
Â                          Â  bstr      Â 
Â                          Â [start-pos Â 
Â                          Â  end-pos]) Â 
Â ->Â exact-nonnegative-integer?
    string?
    port-number?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â (and/cÂ bytes?Â (notÂ immutable?))
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-set-receive-buffer-size!Â udp-socketÂ Â  Â Â 
Â                             Â size)     Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â sizeÂ :Â exact-positive-integer?
procedure
(udp-closeÂ udp-socket)Â ->Â void?
Â Â udp-socketÂ :Â udp?
procedure
(udp?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(udp-bound?Â udp-socket)Â ->Â boolean?
Â Â udp-socketÂ :Â udp?
procedure
(udp-connected?Â udp-socket)Â ->Â boolean?
Â Â udp-socketÂ :Â udp?
procedure
(udp-send-ready-evtÂ udp-socket)Â ->Â evt?
Â Â udp-socketÂ :Â udp?
procedure
(udp-receive-ready-evtÂ udp-socket)Â ->Â evt?
Â Â udp-socketÂ :Â udp?
procedure
(udp-send-to-evtÂ  udp-socketÂ Â  Â Â 
Â                Â  hostname  Â Â  Â Â 
Â                Â  port-no   Â Â  Â Â 
Â                Â  bstr      Â Â  Â Â 
Â                Â [start-pos Â Â  Â Â 
Â                Â  end-pos]) Â ->Â evt?
Â Â udp-socketÂ :Â udp?
Â Â hostnameÂ :Â string?
Â Â port-noÂ :Â port-number?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-send-evtÂ  udp-socketÂ Â  Â Â 
Â             Â  bstr      Â Â  Â Â 
Â             Â [start-pos Â Â  Â Â 
Â             Â  end-pos]) Â ->Â evt?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â bytes?
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-receive!-evtÂ  udp-socketÂ Â  Â Â 
Â                 Â  bstr      Â Â  Â Â 
Â                 Â [start-pos Â Â  Â Â 
Â                 Â  end-pos]) Â ->Â evt?
Â Â udp-socketÂ :Â udp?
Â Â bstrÂ :Â (and/cÂ bytes?Â (notÂ immutable?))
Â Â start-posÂ :Â exact-nonnegative-integer?Â =Â 0
Â Â end-posÂ :Â exact-nonnegative-integer?Â =Â (bytes-lengthÂ bstr)
procedure
(udp-addressesÂ udp-portÂ [port-numbers?])
Â ->Â (or/cÂ (valuesÂ string?Â string?)
    Â Â Â Â Â Â (valuesÂ string?Â listen-port-number?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?Â listen-port-number?))
Â Â udp-portÂ :Â udp?
Â Â port-numbers?Â :Â any/cÂ =Â #f
procedure
(udp-set-ttl!Â udp-socketÂ ttl)Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â ttlÂ :Â byte?
procedure
(udp-ttlÂ udp-socket)Â ->Â byte?
Â Â udp-socketÂ :Â udp?
procedure
(udp-multicast-join-group!Â udp-socket    Â Â  Â Â 
Â                          Â multicast-addrÂ Â  Â Â 
Â                          Â hostname)     Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â multicast-addrÂ :Â string?
Â Â hostnameÂ :Â (or/cÂ string?Â #f)
procedure
(udp-multicast-leave-group!Â udp-socket    Â Â  Â Â 
Â                           Â multicast-addrÂ Â  Â Â 
Â                           Â hostname)     Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â multicast-addrÂ :Â string?
Â Â hostnameÂ :Â (or/cÂ string?Â #f)
procedure
(udp-multicast-interfaceÂ udp-socket)Â ->Â string?
Â Â udp-socketÂ :Â udp?
procedure
(udp-multicast-set-interface!Â udp-socketÂ Â  Â Â 
Â                             Â hostname) Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â hostnameÂ :Â (or/cÂ string?Â #f)
procedure
(udp-multicast-set-loopback!Â udp-socketÂ Â  Â Â 
Â                            Â loopback?)Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â loopback?Â :Â any/c
procedure
(udp-multicast-loopback?Â udp-socket)Â ->Â boolean?
Â Â udp-socketÂ :Â udp?
procedure
(udp-multicast-set-ttl!Â udp-socketÂ ttl)Â ->Â void?
Â Â udp-socketÂ :Â udp?
Â Â ttlÂ :Â byte?
procedure
(udp-multicast-ttlÂ udp-socket)Â ->Â byte?
Â Â udp-socketÂ :Â udp?
procedure
(subprocessÂ  stdout  Â 
Â           Â  stdin   Â 
Â           Â  stderr  Â 
Â           Â [group]  Â 
Â           Â  command Â 
Â           Â  argÂ ...)Â 
Â ->Â subprocess?
    (or/cÂ (and/cÂ input-port?Â file-stream-port?)Â #f)
    (or/cÂ (and/cÂ output-port?Â file-stream-port?)Â #f)
    (or/cÂ (and/cÂ input-port?Â file-stream-port?)Â #f)
Â Â stdoutÂ :Â (or/cÂ (and/cÂ output-port?Â file-stream-port?)Â #f)
Â Â stdinÂ :Â (or/cÂ (and/cÂ input-port?Â file-stream-port?)Â #f)
Â Â stderrÂ :Â (or/cÂ (and/cÂ output-port?Â file-stream-port?)Â #fÂ 'stdout)
Â Â groupÂ :Â (or/cÂ #fÂ 'newÂ subprocess)
Â  Â     Â =Â (andÂ (subprocess-group-enabled)Â 'new)
Â Â commandÂ :Â path-string?
Â Â argÂ :Â (or/cÂ path?Â string-no-nuls?Â bytes-no-nuls?)
(subprocessÂ  stdout Â 
Â           Â  stdin  Â 
Â           Â  stderr Â 
Â           Â [group] Â 
Â           Â  commandÂ 
Â           Â  exact  Â 
Â           Â  arg)   Â 
Â ->Â subprocess?
    (or/cÂ (and/cÂ input-port?Â file-stream-port?)Â #f)
    (or/cÂ (and/cÂ output-port?Â file-stream-port?)Â #f)
    (or/cÂ (and/cÂ input-port?Â file-stream-port?)Â #f)
Â Â stdoutÂ :Â (or/cÂ (and/cÂ output-port?Â file-stream-port?)Â #f)
Â Â stdinÂ :Â (or/cÂ (and/cÂ input-port?Â file-stream-port?)Â #f)
Â Â stderrÂ :Â (or/cÂ (and/cÂ output-port?Â file-stream-port?)Â #f)
Â Â groupÂ :Â (or/cÂ #fÂ 'newÂ subprocess)
Â  Â     Â =Â (andÂ (subprocess-group-enabled)Â 'new)
Â Â commandÂ :Â path-string?
Â Â exactÂ :Â 'exact
Â Â argÂ :Â string?
procedure
(subprocess-waitÂ subproc)Â ->Â void?
Â Â subprocÂ :Â subprocess?
procedure
(subprocess-statusÂ subproc)Â ->Â (or/cÂ 'running
                               Â Â Â Â Â Â exact-nonnegative-integer?)
Â Â subprocÂ :Â subprocess?
procedure
(subprocess-killÂ subprocÂ force?)Â ->Â void?
Â Â subprocÂ :Â subprocess?
Â Â force?Â :Â any/c
procedure
(subprocess-pidÂ subproc)Â ->Â exact-nonnegative-integer?
Â Â subprocÂ :Â subprocess?
procedure
(subprocess?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(current-subprocess-custodian-mode)
Â ->Â (or/cÂ #fÂ 'killÂ 'interrupt)
(current-subprocess-custodian-modeÂ mode)Â ->Â void?
Â Â modeÂ :Â (or/cÂ #fÂ 'killÂ 'interrupt)
parameter
(subprocess-group-enabled)Â ->Â boolean?
(subprocess-group-enabledÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(current-subprocess-keep-file-descriptors)
Â ->Â (or/cÂ 'inheritedÂ 'allÂ '())
(current-subprocess-keep-file-descriptorsÂ keeps)Â ->Â void?
Â Â keepsÂ :Â (or/cÂ 'inheritedÂ 'allÂ '())
procedure
(shell-executeÂ verb      Â Â  Â Â 
Â              Â target    Â Â  Â Â 
Â              Â parametersÂ Â  Â Â 
Â              Â dir       Â Â  Â Â 
Â              Â show-mode)Â ->Â #f
Â Â verbÂ :Â (or/cÂ string?Â #f)
Â Â targetÂ :Â string?
Â Â parametersÂ :Â string?
Â Â dirÂ :Â path-string?
Â Â show-modeÂ :Â symbol?
procedure
(systemÂ commandÂ [#:set-pwd?Â set-pwd?])Â ->Â boolean?
Â Â commandÂ :Â (or/cÂ string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(system*Â commandÂ argÂ ...Â [#:set-pwd?Â set-pwd?])Â ->Â boolean?
Â Â commandÂ :Â path-string?
Â Â argÂ :Â (or/cÂ path?Â string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
(system*Â  command              Â Â  Â Â 
Â        Â  exact                Â Â  Â Â 
Â        Â  arg                  Â Â  Â Â 
Â        Â [#:set-pwd?Â set-pwd?])Â ->Â boolean?
Â Â commandÂ :Â path-string?
Â Â exactÂ :Â 'exact
Â Â argÂ :Â string?
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(system/exit-codeÂ  command              Â Â  Â Â 
Â                 Â [#:set-pwd?Â set-pwd?])Â ->Â byte?
Â Â commandÂ :Â (or/cÂ string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(system*/exit-codeÂ  command              Â Â  Â Â 
Â                  Â  argÂ ...              Â Â  Â Â 
Â                  Â [#:set-pwd?Â set-pwd?])Â ->Â byte?
Â Â commandÂ :Â path-string?
Â Â argÂ :Â (or/cÂ path?Â string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
(system*/exit-codeÂ  command              Â Â  Â Â 
Â                  Â  exact                Â Â  Â Â 
Â                  Â  arg                  Â Â  Â Â 
Â                  Â [#:set-pwd?Â set-pwd?])Â ->Â byte?
Â Â commandÂ :Â path-string?
Â Â exactÂ :Â 'exact
Â Â argÂ :Â string?
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(processÂ commandÂ [#:set-pwd?Â set-pwd?])
Â ->Â (listÂ input-port?
    Â Â Â Â Â Â output-port?
    Â Â Â Â Â Â exact-nonnegative-integer?
    Â Â Â Â Â Â input-port?
    Â Â Â Â Â Â ((or/cÂ 'statusÂ 'waitÂ 'interruptÂ 'kill)Â . -> .Â any))
Â Â commandÂ :Â (or/cÂ string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(process*Â  command              Â Â  Â Â 
Â         Â  argÂ ...              Â Â  Â Â 
Â         Â [#:set-pwd?Â set-pwd?])Â ->Â list?
Â Â commandÂ :Â path-string?
Â Â argÂ :Â (or/cÂ path?Â string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
(process*Â  command              Â Â  Â Â 
Â         Â  exact                Â Â  Â Â 
Â         Â  arg                  Â Â  Â Â 
Â         Â [#:set-pwd?Â set-pwd?])Â ->Â list?
Â Â commandÂ :Â path-string?
Â Â exactÂ :Â 'exact
Â Â argÂ :Â string?
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(process/portsÂ  out                  Â Â  Â Â 
Â              Â  in                   Â Â  Â Â 
Â              Â  error-out            Â Â  Â Â 
Â              Â  command              Â Â  Â Â 
Â              Â [#:set-pwd?Â set-pwd?])Â ->Â list?
Â Â outÂ :Â (or/cÂ #fÂ output-port?)
Â Â inÂ :Â (or/cÂ #fÂ input-port?)
Â Â error-outÂ :Â (or/cÂ #fÂ output-port?Â 'stdout)
Â Â commandÂ :Â (or/cÂ path?Â string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(process*/portsÂ  out                  Â Â  Â Â 
Â               Â  in                   Â Â  Â Â 
Â               Â  error-out            Â Â  Â Â 
Â               Â  command              Â Â  Â Â 
Â               Â  argÂ ...              Â Â  Â Â 
Â               Â [#:set-pwd?Â set-pwd?])Â ->Â list?
Â Â outÂ :Â (or/cÂ #fÂ output-port?)
Â Â inÂ :Â (or/cÂ #fÂ input-port?)
Â Â error-outÂ :Â (or/cÂ #fÂ output-port?Â 'stdout)
Â Â commandÂ :Â path-string?
Â Â argÂ :Â (or/cÂ path?Â string-no-nuls?Â bytes-no-nuls?)
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
(process*/portsÂ  out                  Â Â  Â Â 
Â               Â  in                   Â Â  Â Â 
Â               Â  error-out            Â Â  Â Â 
Â               Â  command              Â Â  Â Â 
Â               Â  exact                Â Â  Â Â 
Â               Â  arg                  Â Â  Â Â 
Â               Â [#:set-pwd?Â set-pwd?])Â ->Â list?
Â Â outÂ :Â (or/cÂ #fÂ output-port?)
Â Â inÂ :Â (or/cÂ #fÂ input-port?)
Â Â error-outÂ :Â (or/cÂ #fÂ output-port?Â 'stdout)
Â Â commandÂ :Â path-string?
Â Â exactÂ :Â 'exact
Â Â argÂ :Â string?
Â Â set-pwd?Â :Â any/cÂ =Â (memberÂ (system-type)Â '(unixÂ macosx))
procedure
(string-no-nuls?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(bytes-no-nuls?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(logger?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-loggerÂ [topic               Â Â  Â Â 
Â            Â  parent              Â Â  Â Â 
Â            Â  propagate-level     Â Â  Â Â 
Â            Â  propagate-topicÂ ...]Â Â  Â Â 
Â            Â  ...)                Â ->Â logger?
Â Â topicÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
Â Â parentÂ :Â (or/cÂ logger?Â #f)Â =Â #f
Â Â propagate-levelÂ :Â log-level/cÂ =Â 'debug
Â Â propagate-topicÂ :Â (or/cÂ #fÂ symbol?)Â =Â #f
procedure
(logger-nameÂ logger)Â ->Â (or/cÂ symbol?Â #f)
Â Â loggerÂ :Â logger?
parameter
(current-logger)Â ->Â logger?
(current-loggerÂ logger)Â ->Â void?
Â Â loggerÂ :Â logger?
syntax
(define-loggerÂ idÂ maybe-parent)
Â 
maybe-parentÂ =Â 
           Â Â |Â #:parentÂ parent-expr
Â 
Â Â parent-exprÂ :Â (or/cÂ logger?Â #f)
procedure
(log-messageÂ  logger           Â Â  Â Â 
Â            Â  level            Â Â  Â Â 
Â            Â [topic]           Â Â  Â Â 
Â            Â  message          Â Â  Â Â 
Â            Â [data             Â Â  Â Â 
Â            Â  prefix-message?])Â ->Â void?
Â Â loggerÂ :Â logger?
Â Â levelÂ :Â log-level/c
Â Â topicÂ :Â (or/cÂ symbol?Â #f)Â =Â (logger-nameÂ logger)
Â Â messageÂ :Â string?
Â Â dataÂ :Â any/cÂ =Â #f
Â Â prefix-message?Â :Â any/cÂ =Â #t
procedure
(log-level?Â loggerÂ levelÂ [topic])Â ->Â boolean?
Â Â loggerÂ :Â logger?
Â Â levelÂ :Â log-level/c
Â Â topicÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
procedure
(log-max-levelÂ loggerÂ [topic])Â ->Â (or/cÂ log-level/cÂ #f)
Â Â loggerÂ :Â logger?
Â Â topicÂ :Â (or/cÂ symbol?Â #f)Â =Â #f
procedure
(log-all-levelsÂ logger)Â ->Â (list/cÂ (or/cÂ #fÂ log-level/c)
                           Â Â Â Â Â Â Â Â (or/cÂ #fÂ symbol?)
                           Â Â Â Â Â Â Â Â ...Â ...)
Â Â loggerÂ :Â logger?
procedure
(log-level-evtÂ logger)Â ->Â evt?
Â Â loggerÂ :Â logger?
syntax
(log-fatalÂ string-expr)
(log-fatalÂ format-string-exprÂ vÂ ...)
syntax
(log-errorÂ string-expr)
(log-errorÂ format-string-exprÂ vÂ ...)
syntax
(log-warningÂ string-expr)
(log-warningÂ format-string-exprÂ vÂ ...)
syntax
(log-infoÂ string-expr)
(log-infoÂ format-string-exprÂ vÂ ...)
syntax
(log-debugÂ string-expr)
(log-debugÂ format-string-exprÂ vÂ ...)
procedure
(log-receiver?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-log-receiverÂ loggerÂ levelÂ [topicÂ ...]Â ...)Â ->Â log-receiver?
Â Â loggerÂ :Â logger?
Â Â levelÂ :Â log-level/c
Â Â topicÂ :Â (or/cÂ #fÂ symbol?)Â =Â #f
procedure
(log-level/cÂ v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(with-intercepted-loggingÂ  interceptor     Â Â  Â Â 
Â                         Â  proc            Â Â  Â Â 
Â                         Â [#:loggerÂ logger]Â Â  Â Â 
Â                         Â  level           Â Â  Â Â 
Â                         Â [topicÂ ...]      Â Â  Â Â 
Â                         Â  ...)            Â ->Â any
Â Â interceptorÂ :Â (->Â (vector/c
                Â Â Â Â Â Â log-level/c
                Â Â Â Â Â Â string?
                Â Â Â Â Â Â any/c
                Â Â Â Â Â Â (or/cÂ symbol?Â #f))
                Â Â Â Â Â any)
Â Â procÂ :Â (->Â any)
Â Â loggerÂ :Â logger?Â =Â #f
Â Â levelÂ :Â log-level/c
Â Â topicÂ :Â (or/cÂ #fÂ symbol?)Â =Â #f
procedure
(with-logging-to-portÂ  port            Â Â  Â Â 
Â                     Â  proc            Â Â  Â Â 
Â                     Â [#:loggerÂ logger]Â Â  Â Â 
Â                     Â  level           Â Â  Â Â 
Â                     Â [topicÂ ...]      Â Â  Â Â 
Â                     Â  ...)            Â ->Â any
Â Â portÂ :Â output-port?
Â Â procÂ :Â (->Â any)
Â Â loggerÂ :Â logger?Â =Â #f
Â Â levelÂ :Â log-level/c
Â Â topicÂ :Â (or/cÂ #fÂ symbol?)Â =Â #f
procedure
(current-seconds)Â ->Â exact-integer?
procedure
(current-inexact-milliseconds)Â ->Â real?
procedure
(current-inexact-monotonic-milliseconds)Â ->Â real?
procedure
(seconds->dateÂ secs-nÂ [local-time?])Â ->Â date*?
Â Â secs-nÂ :Â real?
Â Â local-time?Â :Â any/cÂ =Â #t
struct
(structÂ dateÂ (second
Â       Â Â    Â  minute
Â       Â Â    Â  hour
Â       Â Â    Â  day
Â       Â Â    Â  month
Â       Â Â    Â  year
Â       Â Â    Â  week-day
Â       Â Â    Â  year-day
Â       Â Â    Â  dst?
Â       Â Â    Â  time-zone-offset)
Â Â Â Â #:extra-constructor-nameÂ make-date
Â Â Â Â #:transparent)
Â Â secondÂ :Â (integer-inÂ 0Â 60)
Â Â minuteÂ :Â (integer-inÂ 0Â 59)
Â Â hourÂ :Â (integer-inÂ 0Â 23)
Â Â dayÂ :Â (integer-inÂ 1Â 31)
Â Â monthÂ :Â (integer-inÂ 1Â 12)
Â Â yearÂ :Â exact-integer?
Â Â week-dayÂ :Â (integer-inÂ 0Â 6)
Â Â year-dayÂ :Â (integer-inÂ 0Â 365)
Â Â dst?Â :Â boolean?
Â Â time-zone-offsetÂ :Â exact-integer?
struct
(structÂ date*Â dateÂ (nanosecond time-zone-name)
Â Â Â Â #:extra-constructor-nameÂ make-date*)
Â Â nanosecondÂ :Â (integer-inÂ 0Â 999999999)
Â Â time-zone-nameÂ :Â (and/cÂ string?Â immutable?)
procedure
(current-milliseconds)Â ->Â exact-integer?
procedure
(current-process-millisecondsÂ [scope])Â ->Â exact-integer?
Â Â scopeÂ :Â (or/cÂ #fÂ thread?Â 'subprocesses)Â =Â #f
procedure
(current-gc-milliseconds)Â ->Â exact-integer?
procedure
(time-applyÂ procÂ lst)Â ->Â list?
                         exact-integer?
                         exact-integer?
                         exact-integer?
Â Â procÂ :Â procedure?
Â Â lstÂ :Â list?
syntax
(timeÂ bodyÂ ...+)
procedure
(current-date)Â ->Â date*?
procedure
(date->stringÂ dateÂ [time?])Â ->Â string?
Â Â dateÂ :Â date?
Â Â time?Â :Â any/cÂ =Â #f
parameter
(date-display-format)Â ->Â (or/cÂ 'american
                         Â Â Â Â Â Â 'chinese
                         Â Â Â Â Â Â 'german
                         Â Â Â Â Â Â 'indian
                         Â Â Â Â Â Â 'irish
                         Â Â Â Â Â Â 'iso-8601
                         Â Â Â Â Â Â 'rfc2822
                         Â Â Â Â Â Â 'julian)
(date-display-formatÂ format)Â ->Â void?
Â Â formatÂ :Â (or/cÂ 'american
           Â Â Â Â Â Â 'chinese
           Â Â Â Â Â Â 'german
           Â Â Â Â Â Â 'indian
           Â Â Â Â Â Â 'irish
           Â Â Â Â Â Â 'iso-8601
           Â Â Â Â Â Â 'rfc2822
           Â Â Â Â Â Â 'julian)
procedure
(date->secondsÂ dateÂ [local-time?])Â ->Â exact-integer?
Â Â dateÂ :Â date?
Â Â local-time?Â :Â any/cÂ =Â #t
procedure
(date*->secondsÂ dateÂ [local-time?])Â ->Â real?
Â Â dateÂ :Â date?
Â Â local-time?Â :Â any/cÂ =Â #t
procedure
(find-secondsÂ  second       Â Â  Â Â 
Â             Â  minute       Â Â  Â Â 
Â             Â  hour         Â Â  Â Â 
Â             Â  day          Â Â  Â Â 
Â             Â  month        Â Â  Â Â 
Â             Â  year         Â Â  Â Â 
Â             Â [local-time?])Â ->Â exact-integer?
Â Â secondÂ :Â (integer-inÂ 0Â 61)
Â Â minuteÂ :Â (integer-inÂ 0Â 59)
Â Â hourÂ :Â (integer-inÂ 0Â 23)
Â Â dayÂ :Â (integer-inÂ 1Â 31)
Â Â monthÂ :Â (integer-inÂ 1Â 12)
Â Â yearÂ :Â exact-nonnegative-integer?
Â Â local-time?Â :Â any/cÂ =Â #t
procedure
(date->julian/scaligerÂ date)Â ->Â exact-integer?
Â Â dateÂ :Â date?
procedure
(julian/scaliger->stringÂ date-number)Â ->Â string?
Â Â date-numberÂ :Â exact-integer?
procedure
(date->julian/scalingerÂ date)Â ->Â exact-integer?
Â Â dateÂ :Â date?
procedure
(julian/scalinger->stringÂ date-number)Â ->Â string?
Â Â date-numberÂ :Â exact-integer?
procedure
(environment-variables?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(current-environment-variables)Â ->Â environment-variables?
(current-environment-variablesÂ env)Â ->Â void?
Â Â envÂ :Â environment-variables?
procedure
(bytes-environment-variable-name?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-environment-variablesÂ nameÂ valÂ ...Â ...)
Â ->Â environment-variables?
Â Â nameÂ :Â bytes-environment-variable-name?
Â Â valÂ :Â bytes-no-nuls?
procedure
(environment-variables-refÂ envÂ name)
Â ->Â (or/cÂ #fÂ (and/cÂ bytes-no-nuls?Â immutable?))
Â Â envÂ :Â environment-variables?
Â Â nameÂ :Â bytes-environment-variable-name?
procedure
(environment-variables-set!Â  env       Â Â  Â Â 
Â                           Â  name      Â Â  Â Â 
Â                           Â  maybe-bstrÂ Â  Â Â 
Â                           Â [fail])    Â ->Â any
Â Â envÂ :Â environment-variables?
Â Â nameÂ :Â bytes-environment-variable-name?
Â Â maybe-bstrÂ :Â (or/cÂ bytes-no-nuls?Â #f)
Â Â failÂ :Â (->Â any)Â =Â (lambdaÂ ()
                    Â Â (raiseÂ (make-exn:failÂ ....)))
procedure
(environment-variables-namesÂ env)
Â ->Â (listofÂ (and/cÂ bytes-environment-variable-name?Â immutable?))
Â Â envÂ :Â environment-variables?
procedure
(environment-variables-copyÂ env)Â ->Â environment-variables?
Â Â envÂ :Â environment-variables?
procedure
(getenvÂ name)Â ->Â (or/cÂ string-no-nuls?Â #f)
Â Â nameÂ :Â string-environment-variable-name?
procedure
(putenvÂ nameÂ value)Â ->Â boolean?
Â Â nameÂ :Â string-environment-variable-name?
Â Â valueÂ :Â string-no-nuls?
procedure
(string-environment-variable-name?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(system-typeÂ [mode])
Â ->Â (or/cÂ symbol?Â string?Â bytes?Â exact-positive-integer?Â vector?Â #f)
Â Â modeÂ :Â (or/cÂ 'osÂ 'os*Â 'archÂ 'wordÂ 'vmÂ 'gcÂ 'linkÂ 'machineÂ 'target-machine
         Â Â Â Â Â Â 'so-suffixÂ 'so-modeÂ 'fs-changeÂ 'cross)
Â  Â    Â =Â 'os
procedure
(system-language+country)Â ->Â string?
procedure
(system-library-subpathÂ [mode])Â ->Â path?
Â Â modeÂ :Â (or/cÂ 'cgcÂ '3mÂ 'csÂ #f)Â =Â (system-typeÂ 'gc)
procedure
(version)Â ->Â (and/cÂ string?Â immutable?)
procedure
(banner)Â ->Â (and/cÂ string?Â immutable?)
parameter
(current-command-line-arguments)
Â ->Â (vectorofÂ (and/cÂ string?Â immutable?))
(current-command-line-argumentsÂ argv)Â ->Â void?
Â Â argvÂ :Â (vectorofÂ string?)
parameter
(current-thread-initial-stack-size)Â ->Â exact-positive-integer?
(current-thread-initial-stack-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â exact-positive-integer?
procedure
(vector-set-performance-stats!Â resultsÂ [thd])Â ->Â void?
Â Â resultsÂ :Â (and/cÂ vector?
            Â Â Â Â Â Â Â (not/cÂ immutable?))
Â Â thdÂ :Â (or/cÂ thread?Â #f)Â =Â #f
syntax
(command-lineÂ optional-name-exprÂ optional-argv-expr
Â Â Â Â Â Â Â Â Â Â Â Â Â Â flag-clauseÂ ...
Â Â Â Â Â Â Â Â Â Â Â Â Â Â finish-clause)
Â 
optional-name-exprÂ =Â 
                 Â Â |Â #:programÂ name-expr
                 Â Â Â Â Â 
optional-argv-exprÂ =Â 
                 Â Â |Â #:argvÂ argv-expr
                 Â Â Â Â Â 
       flag-clauseÂ =Â #:multiÂ flag-specÂ ...
                 Â Â |Â #:once-eachÂ flag-specÂ ...
                 Â Â |Â #:once-anyÂ flag-specÂ ...
                 Â Â |Â #:finalÂ flag-specÂ ...
                 Â Â |Â #:usage-helpÂ stringÂ ...
                 Â Â |Â #:help-labelsÂ stringÂ ...
                 Â Â |Â #:psÂ stringÂ ...
                 Â Â Â Â Â 
         flag-specÂ =Â (flagsÂ idÂ ...Â help-specÂ bodyÂ ...+)
                 Â Â |Â (flagsÂ =>Â handler-exprÂ help-expr)
                 Â Â Â Â Â 
             flagsÂ =Â flag-string
                 Â Â |Â (flag-stringÂ ...+)
                 Â Â Â Â Â 
         help-specÂ =Â string
                 Â Â |Â (string-exprÂ ...+)
                 Â Â Â Â Â 
     finish-clauseÂ =Â 
                 Â Â |Â #:argsÂ arg-formalsÂ bodyÂ ...+
                 Â Â |Â #:handlersÂ handlers-exprs
                 Â Â Â Â Â 
       arg-formalsÂ =Â rest-id
                 Â Â |Â (argÂ ...)
                 Â Â |Â (argÂ ...+Â . rest-id)
                 Â Â Â Â Â 
               argÂ =Â id
                 Â Â |Â [idÂ default-expr]
                 Â Â Â Â Â 
    handlers-exprsÂ =Â finish-exprÂ arg-strings-expr
                 Â Â |Â finish-exprÂ arg-strings-exprÂ help-expr
                 Â Â |Â finish-exprÂ arg-strings-exprÂ help-expr
                     unknown-expr
procedure
(parse-command-lineÂ  name          Â Â  Â Â 
Â                   Â  argv          Â Â  Â Â 
Â                   Â  table         Â Â  Â Â 
Â                   Â  finish-proc   Â Â  Â Â 
Â                   Â  arg-help-strs Â Â  Â Â 
Â                   Â [help-proc     Â Â  Â Â 
Â                   Â  unknown-proc])Â ->Â any
Â Â nameÂ :Â (or/cÂ string?Â path?)
Â Â argvÂ :Â (or/cÂ (listofÂ string?)Â (vectorofÂ string?))
Â Â tableÂ :Â (listofÂ (cons/cÂ symbol?Â list?))
Â Â finish-procÂ :Â ((list?)Â ()Â #:restÂ list?Â . ->* .Â any)
Â Â arg-help-strsÂ :Â (listofÂ string?)
Â Â help-procÂ :Â (string?Â . -> .Â any)Â =Â (lambdaÂ (str)Â ....)
Â Â unknown-procÂ :Â (string?Â . -> .Â any)Â =Â (lambdaÂ (str)Â ...)
procedure
(gethostname)Â ->Â string?
procedure
(getpid)Â ->Â exact-integer?
procedure
(make-weak-boxÂ v)Â ->Â weak-box?
Â Â vÂ :Â any/c
procedure
(weak-box-valueÂ weak-boxÂ [gced-v])Â ->Â any/c
Â Â weak-boxÂ :Â weak-box?
Â Â gced-vÂ :Â any/cÂ =Â #f
procedure
(weak-box?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-ephemeronÂ keyÂ v)Â ->Â ephemeron?
Â Â keyÂ :Â any/c
Â Â vÂ :Â any/c
procedure
(ephemeron-valueÂ ephemeronÂ [gced-vÂ retain-v])Â ->Â any/c
Â Â ephemeronÂ :Â ephemeron?
Â Â gced-vÂ :Â any/cÂ =Â #f
Â Â retain-vÂ :Â any/cÂ =Â #f
procedure
(ephemeron?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-will-executor)Â ->Â will-executor?
procedure
(will-executor?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(will-registerÂ executorÂ vÂ proc)Â ->Â void?
Â Â executorÂ :Â will-executor?
Â Â vÂ :Â any/c
Â Â procÂ :Â (any/cÂ . -> .Â any)
procedure
(will-executeÂ executor)Â ->Â any
Â Â executorÂ :Â will-executor?
procedure
(will-try-executeÂ executorÂ [v])Â ->Â any
Â Â executorÂ :Â any/c
Â Â vÂ :Â any/cÂ =Â #f
procedure
(collect-garbageÂ [request])Â ->Â void?
Â Â requestÂ :Â (or/cÂ 'majorÂ 'minorÂ 'incremental)Â =Â 'major
procedure
(current-memory-useÂ [mode])Â ->Â exact-nonnegative-integer?
Â Â modeÂ :Â (or/cÂ #fÂ 'cumulativeÂ custodian?)Â =Â #f
procedure
(dump-memory-statsÂ vÂ ...)Â ->Â any
Â Â vÂ :Â any/c
procedure
(phantom-bytes?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
procedure
(make-phantom-bytesÂ k)Â ->Â phantom-bytes?
Â Â kÂ :Â exact-nonnegative-integer?
procedure
(set-phantom-bytes!Â phantom-bstrÂ k)Â ->Â phantom-bytes?
Â Â phantom-bstrÂ :Â phantom-bytes?
Â Â kÂ :Â exact-nonnegative-integer?
procedure
(unsafe-fx+Â aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fx-Â aÂ bÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx*Â aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fxquotientÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxremainderÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxmoduloÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxabsÂ a)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fxandÂ aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fxiorÂ aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fxxorÂ aÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fxnotÂ a)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fxlshiftÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxrshiftÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxpopcountÂ a)Â ->Â fixnum?
Â Â aÂ :Â (and/cÂ fixnum?Â (not/cÂ negative?))
procedure
(unsafe-fxpopcount32Â a)Â ->Â fixnum?
Â Â aÂ :Â (and/cÂ fixnum?Â (integer-inÂ 0Â #xFFFFFFFF))
procedure
(unsafe-fxpopcount16Â a)Â ->Â fixnum?
Â Â aÂ :Â (and/cÂ fixnum?Â (integer-inÂ 0Â #xFFFF))
procedure
(unsafe-fx+/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx-/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx*/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxlshift/wraparoundÂ aÂ b)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx<Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx>Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx<=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fx>=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxminÂ aÂ bÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fxmaxÂ aÂ bÂ ...)Â ->Â fixnum?
Â Â aÂ :Â fixnum?
Â Â bÂ :Â fixnum?
procedure
(unsafe-fl+Â aÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-fl-Â aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-fl*Â aÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-fl/Â aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-flabsÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-fl=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-fl<Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-fl>Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-fl<=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-fl>=Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-flminÂ aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-flmaxÂ aÂ bÂ ...)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-flroundÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flfloorÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flceilingÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-fltruncateÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flsingleÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flsinÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flcosÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-fltanÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flasinÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flacosÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flatanÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-fllogÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flexpÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flsqrtÂ a)Â ->Â flonum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flexptÂ aÂ b)Â ->Â flonum?
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-make-flrectangularÂ aÂ b)
Â ->Â (and/cÂ complex?
    Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (real-partÂ c)))
    Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (imag-partÂ c))))
Â Â aÂ :Â flonum?
Â Â bÂ :Â flonum?
procedure
(unsafe-flreal-partÂ a)Â ->Â flonum?
Â Â aÂ :Â (and/cÂ complex?
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (real-partÂ c)))
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (imag-partÂ c))))
procedure
(unsafe-flimag-partÂ a)Â ->Â flonum?
Â Â aÂ :Â (and/cÂ complex?
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (real-partÂ c)))
      Â Â Â Â Â Â Â (lambdaÂ (c)Â (flonum?Â (imag-partÂ c))))
procedure
(unsafe-fx->flÂ a)Â ->Â flonum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-fl->fxÂ a)Â ->Â fixnum?
Â Â aÂ :Â flonum?
procedure
(unsafe-flrandomÂ rand-gen)Â ->Â (andÂ flonum?Â (>/cÂ 0)Â (</cÂ 1))
Â Â rand-genÂ :Â pseudo-random-generator?
procedure
(unsafe-char=?Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â char?
Â Â bÂ :Â char?
procedure
(unsafe-char<?Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â char?
Â Â bÂ :Â char?
procedure
(unsafe-char>?Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â char?
Â Â bÂ :Â char?
procedure
(unsafe-char<=?Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â char?
Â Â bÂ :Â char?
procedure
(unsafe-char>=?Â aÂ bÂ ...)Â ->Â boolean?
Â Â aÂ :Â char?
Â Â bÂ :Â char?
procedure
(unsafe-char->integerÂ a)Â ->Â fixnum?
Â Â aÂ :Â char?
procedure
(unsafe-carÂ p)Â ->Â any/c
Â Â pÂ :Â pair?
procedure
(unsafe-cdrÂ p)Â ->Â any/c
Â Â pÂ :Â pair?
procedure
(unsafe-mcarÂ p)Â ->Â any/c
Â Â pÂ :Â mpair?
procedure
(unsafe-mcdrÂ p)Â ->Â any/c
Â Â pÂ :Â mpair?
procedure
(unsafe-set-mcar!Â pÂ v)Â ->Â void?
Â Â pÂ :Â mpair?
Â Â vÂ :Â any/c
procedure
(unsafe-set-mcdr!Â pÂ v)Â ->Â void?
Â Â pÂ :Â mpair?
Â Â vÂ :Â any/c
procedure
(unsafe-cons-listÂ vÂ rest)Â ->Â (and/cÂ pair?Â list?)
Â Â vÂ :Â any/c
Â Â restÂ :Â list?
procedure
(unsafe-list-refÂ lstÂ pos)Â ->Â any/c
Â Â lstÂ :Â pair?
Â Â posÂ :Â (and/cÂ exact-nonnegative-integer?Â fixnum?)
procedure
(unsafe-list-tailÂ lstÂ pos)Â ->Â any/c
Â Â lstÂ :Â any/c
Â Â posÂ :Â (and/cÂ exact-nonnegative-integer?Â fixnum?)
procedure
(unsafe-set-immutable-car!Â pÂ v)Â ->Â void?
Â Â pÂ :Â pair?
Â Â vÂ :Â any/c
procedure
(unsafe-set-immutable-cdr!Â pÂ v)Â ->Â void?
Â Â pÂ :Â pair?
Â Â vÂ :Â any/c
procedure
(unsafe-unboxÂ b)Â ->Â fixnum?
Â Â bÂ :Â box?
procedure
(unsafe-set-box!Â bÂ k)Â ->Â void?
Â Â bÂ :Â box?
Â Â kÂ :Â fixnum?
procedure
(unsafe-unbox*Â v)Â ->Â any/c
Â Â vÂ :Â (and/cÂ box?Â (not/cÂ impersonator?))
procedure
(unsafe-set-box*!Â vÂ val)Â ->Â void?
Â Â vÂ :Â (and/cÂ box?Â (not/cÂ impersonator?))
Â Â valÂ :Â any/c
procedure
(unsafe-box*-cas!Â locÂ oldÂ new)Â ->Â boolean?
Â Â locÂ :Â box?
Â Â oldÂ :Â any/c
Â Â newÂ :Â any/c
procedure
(unsafe-vector-lengthÂ v)Â ->Â fixnum?
Â Â vÂ :Â vector?
procedure
(unsafe-vector-refÂ vÂ k)Â ->Â any/c
Â Â vÂ :Â vector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-vector-set!Â vÂ kÂ val)Â ->Â void?
Â Â vÂ :Â vector?
Â Â kÂ :Â fixnum?
Â Â valÂ :Â any/c
procedure
(unsafe-vector*-lengthÂ v)Â ->Â fixnum?
Â Â vÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
procedure
(unsafe-vector*-refÂ vÂ k)Â ->Â any/c
Â Â vÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
Â Â kÂ :Â fixnum?
procedure
(unsafe-vector*-set!Â vÂ kÂ val)Â ->Â void?
Â Â vÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
Â Â kÂ :Â fixnum?
Â Â valÂ :Â any/c
procedure
(unsafe-vector*-cas!Â vÂ kÂ old-valÂ new-val)Â ->Â boolean?
Â Â vÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
Â Â kÂ :Â fixnum?
Â Â old-valÂ :Â any/c
Â Â new-valÂ :Â any/c
procedure
(unsafe-vector*->immutable-vector!Â v)
Â ->Â (and/cÂ vector?Â immutable?)
Â Â vÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
procedure
(unsafe-string-lengthÂ str)Â ->Â fixnum?
Â Â strÂ :Â string?
procedure
(unsafe-string-refÂ strÂ k)
Â ->Â (and/cÂ char?Â (lambdaÂ (ch)Â (<=Â 0Â (char->integerÂ ch)Â 255)))
Â Â strÂ :Â string?
Â Â kÂ :Â fixnum?
procedure
(unsafe-string-set!Â strÂ kÂ ch)Â ->Â void?
Â Â strÂ :Â (and/cÂ string?Â (not/cÂ immutable?))
Â Â kÂ :Â fixnum?
Â Â chÂ :Â char?
procedure
(unsafe-string->immutable-string!Â str)
Â ->Â (and/cÂ string?Â immutable?)
Â Â strÂ :Â string?
procedure
(unsafe-bytes-lengthÂ bstr)Â ->Â fixnum?
Â Â bstrÂ :Â bytes?
procedure
(unsafe-bytes-refÂ bstrÂ k)Â ->Â byte?
Â Â bstrÂ :Â bytes?
Â Â kÂ :Â fixnum?
procedure
(unsafe-bytes-set!Â bstrÂ kÂ b)Â ->Â void?
Â Â bstrÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â kÂ :Â fixnum?
Â Â bÂ :Â byte?
procedure
(unsafe-bytes-copy!Â  dest      Â Â  Â Â 
Â                   Â  dest-startÂ Â  Â Â 
Â                   Â  src       Â Â  Â Â 
Â                   Â [src-start Â Â  Â Â 
Â                   Â  src-end]) Â ->Â void?
Â Â destÂ :Â (and/cÂ bytes?Â (not/cÂ immutable?))
Â Â dest-startÂ :Â fixnum?
Â Â srcÂ :Â bytes?
Â Â src-startÂ :Â fixnum?Â =Â 0
Â Â src-endÂ :Â fixnum?Â =Â (bytes-lengthÂ src)
procedure
(unsafe-bytes->immutable-bytes!Â bstr)
Â ->Â (and/cÂ bytes?Â immutable?)
Â Â bstrÂ :Â bytes?
procedure
(unsafe-fxvector-lengthÂ v)Â ->Â fixnum?
Â Â vÂ :Â fxvector?
procedure
(unsafe-fxvector-refÂ vÂ k)Â ->Â fixnum?
Â Â vÂ :Â fxvector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-fxvector-set!Â vÂ kÂ x)Â ->Â void?
Â Â vÂ :Â fxvector?
Â Â kÂ :Â fixnum?
Â Â xÂ :Â fixnum?
procedure
(unsafe-flvector-lengthÂ v)Â ->Â fixnum?
Â Â vÂ :Â flvector?
procedure
(unsafe-flvector-refÂ vÂ k)Â ->Â flonum?
Â Â vÂ :Â flvector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-flvector-set!Â vÂ kÂ x)Â ->Â void?
Â Â vÂ :Â flvector?
Â Â kÂ :Â fixnum?
Â Â xÂ :Â flonum?
procedure
(unsafe-f64vector-refÂ vecÂ k)Â ->Â flonum?
Â Â vecÂ :Â f64vector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-f64vector-set!Â vecÂ kÂ n)Â ->Â void?
Â Â vecÂ :Â f64vector?
Â Â kÂ :Â fixnum?
Â Â nÂ :Â flonum?
procedure
(unsafe-s16vector-refÂ vecÂ k)Â ->Â (integer-inÂ -32768Â 32767)
Â Â vecÂ :Â s16vector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-s16vector-set!Â vecÂ kÂ n)Â ->Â void?
Â Â vecÂ :Â s16vector?
Â Â kÂ :Â fixnum?
Â Â nÂ :Â (integer-inÂ -32768Â 32767)
procedure
(unsafe-u16vector-refÂ vecÂ k)Â ->Â (integer-inÂ 0Â 65535)
Â Â vecÂ :Â u16vector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-u16vector-set!Â vecÂ kÂ n)Â ->Â void?
Â Â vecÂ :Â u16vector?
Â Â kÂ :Â fixnum?
Â Â nÂ :Â (integer-inÂ 0Â 65535)
procedure
(unsafe-stencil-vectorÂ maskÂ vÂ ...)Â ->Â stencil-vector?
Â Â maskÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â vÂ :Â any/c
procedure
(unsafe-stencil-vector-maskÂ vec)
Â ->Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â vecÂ :Â stencil-vector?
procedure
(unsafe-stencil-vector-lengthÂ vec)
Â ->Â (integer-inÂ 0Â (sub1Â (stencil-vector-mask-width)))
Â Â vecÂ :Â stencil-vector?
procedure
(unsafe-stencil-vector-refÂ vecÂ pos)Â ->Â any/c
Â Â vecÂ :Â stencil-vector?
Â Â posÂ :Â exact-nonnegative-integer?
procedure
(unsafe-stencil-vector-set!Â vecÂ posÂ v)Â ->Â avoid?
Â Â vecÂ :Â stencil-vector?
Â Â posÂ :Â exact-nonnegative-integer?
Â Â vÂ :Â any/c
procedure
(unsafe-stencil-vector-updateÂ vec        Â Â  Â Â 
Â                             Â remove-maskÂ Â  Â Â 
Â                             Â add-mask   Â Â  Â Â 
Â                             Â vÂ ...)     Â ->Â stencil-vector?
Â Â vecÂ :Â stencil-vector?
Â Â remove-maskÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â add-maskÂ :Â (integer-inÂ 0Â (sub1Â (exptÂ 2Â (stencil-vector-mask-width))))
Â Â vÂ :Â any/c
procedure
(unsafe-struct-refÂ vÂ k)Â ->Â any/c
Â Â vÂ :Â any/c
Â Â kÂ :Â fixnum?
procedure
(unsafe-struct-set!Â vÂ kÂ val)Â ->Â void?
Â Â vÂ :Â any/c
Â Â kÂ :Â fixnum?
Â Â valÂ :Â any/c
procedure
(unsafe-struct*-refÂ vÂ k)Â ->Â any/c
Â Â vÂ :Â (not/cÂ impersonator?)
Â Â kÂ :Â fixnum?
procedure
(unsafe-struct*-set!Â vÂ kÂ val)Â ->Â void?
Â Â vÂ :Â (not/cÂ impersonator?)
Â Â kÂ :Â fixnum?
Â Â valÂ :Â any/c
procedure
(unsafe-struct*-cas!Â vÂ kÂ old-valÂ new-val)Â ->Â boolean?
Â Â vÂ :Â (not/cÂ impersonator?)
Â Â kÂ :Â fixnum?
Â Â old-valÂ :Â any/c
Â Â new-valÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-firstÂ hash)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
procedure
(unsafe-mutable-hash-iterate-nextÂ hashÂ pos)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-keyÂ hashÂ pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-keyÂ hash        Â Â  Â Â 
Â                                Â pos         Â Â  Â Â 
Â                                Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-valueÂ hashÂ Â  Â Â 
Â                                  Â pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-valueÂ hash        Â Â  Â Â 
Â                                  Â pos         Â Â  Â Â 
Â                                  Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-key+valueÂ hashÂ Â  Â Â 
Â                                      Â pos)Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-key+valueÂ hash        Â 
Â                                      Â pos         Â 
Â                                      Â bad-index-v)Â 
Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-pairÂ hashÂ pos)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
procedure
(unsafe-mutable-hash-iterate-pairÂ hash        Â Â  Â Â 
Â                                 Â pos         Â Â  Â Â 
Â                                 Â bad-index-v)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â (not/cÂ immutable?)Â hash-strong?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-firstÂ hash)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
procedure
(unsafe-immutable-hash-iterate-nextÂ hashÂ Â  Â Â 
Â                                   Â pos)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-keyÂ hashÂ Â  Â Â 
Â                                  Â pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-keyÂ hash        Â Â  Â Â 
Â                                  Â pos         Â Â  Â Â 
Â                                  Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-valueÂ hashÂ Â  Â Â 
Â                                    Â pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-valueÂ hash        Â Â  Â Â 
Â                                    Â pos         Â Â  Â Â 
Â                                    Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-key+valueÂ hashÂ Â  Â Â 
Â                                        Â pos)Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-key+valueÂ hash        Â 
Â                                        Â pos         Â 
Â                                        Â bad-index-v)Â 
Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-pairÂ hashÂ Â  Â Â 
Â                                   Â pos)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
procedure
(unsafe-immutable-hash-iterate-pairÂ hash        Â Â  Â Â 
Â                                   Â pos         Â Â  Â Â 
Â                                   Â bad-index-v)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â immutable?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-firstÂ hash)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
procedure
(unsafe-weak-hash-iterate-nextÂ hashÂ pos)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-keyÂ hashÂ pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-keyÂ hash        Â Â  Â Â 
Â                             Â pos         Â Â  Â Â 
Â                             Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-valueÂ hashÂ pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-valueÂ hash        Â Â  Â Â 
Â                               Â pos         Â Â  Â Â 
Â                               Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-key+valueÂ hashÂ Â  Â Â 
Â                                   Â pos)Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-key+valueÂ hash        Â Â  Â Â 
Â                                   Â pos         Â Â  Â Â 
Â                                   Â bad-index-v)Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-pairÂ hashÂ pos)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
procedure
(unsafe-weak-hash-iterate-pairÂ hash        Â Â  Â Â 
Â                              Â pos         Â Â  Â Â 
Â                              Â bad-index-v)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â hash-weak?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-firstÂ hash)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
procedure
(unsafe-ephemeron-hash-iterate-nextÂ hashÂ Â  Â Â 
Â                                   Â pos)Â ->Â (or/cÂ #fÂ any/c)
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-keyÂ hashÂ Â  Â Â 
Â                                  Â pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-keyÂ hash        Â Â  Â Â 
Â                                  Â pos         Â Â  Â Â 
Â                                  Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-valueÂ hashÂ Â  Â Â 
Â                                    Â pos)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-valueÂ hash        Â Â  Â Â 
Â                                    Â pos         Â Â  Â Â 
Â                                    Â bad-index-v)Â ->Â any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-key+valueÂ hashÂ Â  Â Â 
Â                                        Â pos)Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-key+valueÂ hash        Â 
Â                                        Â pos         Â 
Â                                        Â bad-index-v)Â 
Â ->Â any/cÂ any/c
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-pairÂ hashÂ Â  Â Â 
Â                                   Â pos)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
procedure
(unsafe-ephemeron-hash-iterate-pairÂ hash        Â Â  Â Â 
Â                                   Â pos         Â Â  Â Â 
Â                                   Â bad-index-v)Â ->Â pair?
Â Â hashÂ :Â (and/cÂ hash?Â hash-ephemeron?)
Â Â posÂ :Â any/c
Â Â bad-index-vÂ :Â any/c
procedure
(unsafe-make-srclocÂ source  Â Â  Â Â 
Â                   Â line    Â Â  Â Â 
Â                   Â column  Â Â  Â Â 
Â                   Â positionÂ Â  Â Â 
Â                   Â span)   Â ->Â srcloc?
Â Â sourceÂ :Â any/c
Â Â lineÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â columnÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
Â Â positionÂ :Â (or/cÂ exact-positive-integer?Â #f)
Â Â spanÂ :Â (or/cÂ exact-nonnegative-integer?Â #f)
procedure
(unsafe-extfl+Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl-Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl*Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl/Â aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extflabsÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extfl=Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl<Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl>Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl<=Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extfl>=Â aÂ b)Â ->Â boolean?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extflminÂ aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extflmaxÂ aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-extflroundÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflfloorÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflceilingÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extfltruncateÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflsinÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflcosÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extfltanÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflasinÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflacosÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflatanÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extfllogÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflexpÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflsqrtÂ a)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflexptÂ aÂ b)Â ->Â extflonum?
Â Â aÂ :Â extflonum?
Â Â bÂ :Â extflonum?
procedure
(unsafe-fx->extflÂ a)Â ->Â extflonum?
Â Â aÂ :Â fixnum?
procedure
(unsafe-extfl->fxÂ a)Â ->Â fixnum?
Â Â aÂ :Â extflonum?
procedure
(unsafe-extflvector-lengthÂ v)Â ->Â fixnum?
Â Â vÂ :Â extflvector?
procedure
(unsafe-extflvector-refÂ vÂ k)Â ->Â extflonum?
Â Â vÂ :Â extflvector?
Â Â kÂ :Â fixnum?
procedure
(unsafe-extflvector-set!Â vÂ kÂ x)Â ->Â void?
Â Â vÂ :Â extflvector?
Â Â kÂ :Â fixnum?
Â Â xÂ :Â extflonum?
procedure
(unsafe-impersonate-procedureÂ proc            Â 
Â                             Â replacement-procÂ 
Â                             Â prop            Â 
Â                             Â prop-valÂ ...    Â 
Â                             Â ...)            Â 
Â ->Â (and/cÂ procedure?Â impersonator?)
Â Â procÂ :Â procedure?
Â Â replacement-procÂ :Â procedure?
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any
procedure
(unsafe-chaperone-procedureÂ proc        Â 
Â                           Â wrapper-procÂ 
Â                           Â prop        Â 
Â                           Â prop-valÂ ...Â 
Â                           Â ...)        Â 
Â ->Â (and/cÂ procedure?Â chaperone?)
Â Â procÂ :Â procedure?
Â Â wrapper-procÂ :Â procedure?
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any
procedure
(unsafe-impersonate-vectorÂ vec            Â 
Â                          Â replacement-vecÂ 
Â                          Â prop           Â 
Â                          Â prop-valÂ ...   Â 
Â                          Â ...)           Â 
Â ->Â (and/cÂ vector?Â impersonator?)
Â Â vecÂ :Â vector?
Â Â replacement-vecÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(unsafe-chaperone-vectorÂ vec            Â 
Â                        Â replacement-vecÂ 
Â                        Â prop           Â 
Â                        Â prop-valÂ ...   Â 
Â                        Â ...)           Â 
Â ->Â (and/cÂ vector?Â chaperone?)
Â Â vecÂ :Â vector?
Â Â replacement-vecÂ :Â (and/cÂ vector?Â (not/cÂ impersonator?))
Â Â propÂ :Â impersonator-property?
Â Â prop-valÂ :Â any/c
procedure
(unsafe-assert-unreachable)Â ->Â none/c
value
unsafe-undefinedÂ :Â any/c
procedure
(check-not-unsafe-undefinedÂ vÂ sym)
Â ->Â (and/cÂ any/cÂ (not/cÂ (one-of/cÂ unsafe-undefined)))
Â Â vÂ :Â any/c
Â Â symÂ :Â symbol?
procedure
(check-not-unsafe-undefined/assignÂ vÂ sym)
Â ->Â (and/cÂ any/cÂ (not/cÂ (one-of/cÂ unsafe-undefined)))
Â Â vÂ :Â any/c
Â Â symÂ :Â symbol?
procedure
(chaperone-struct-unsafe-undefinedÂ v)Â ->Â any/c
Â Â vÂ :Â any/c
value
prop:chaperone-unsafe-undefinedÂ :Â struct-type-property?
procedure
(find-library-collection-pathsÂ [pre-extras Â Â  Â Â 
Â                              Â  post-extrasÂ Â  Â Â 
Â                              Â  config]    Â Â  Â Â 
Â                              Â  name)      Â ->Â (listofÂ path?)
Â Â pre-extrasÂ :Â (listofÂ path-string?)Â =Â null
Â Â post-extrasÂ :Â (listofÂ path-string?)Â =Â null
Â Â configÂ :Â hash?Â =Â (read-installation-configuration-table)
Â Â nameÂ :Â (get-installation-nameÂ config)
procedure
(find-library-collection-linksÂ [config]Â name)
Â ->Â (listofÂ (or/cÂ #fÂ (and/cÂ path?Â complete-path?)))
Â Â configÂ :Â hash?Â =Â (read-installation-configuration-table)
Â Â nameÂ :Â (get-installation-nameÂ config)
procedure
(collection-file-pathÂ  file                               Â 
Â                     Â  collectionÂ ...+                    Â 
Â                     Â [#:check-compiled?Â check-compiled?])Â 
Â ->Â path?
Â Â fileÂ :Â path-string?
Â Â collectionÂ :Â path-string?
Â Â check-compiled?Â :Â any/cÂ =Â (regexp-match?Â #rx"[.]rkt$"Â file)
(collection-file-pathÂ  file                               Â Â  Â Â 
Â                     Â  collectionÂ ...+                    Â Â  Â Â 
Â                     Â  #:failÂ fail-proc                   Â Â  Â Â 
Â                     Â [#:check-compiled?Â check-compiled?])Â ->Â any
Â Â fileÂ :Â path-string?
Â Â collectionÂ :Â path-string?
Â Â fail-procÂ :Â (string?Â . -> .Â any)
Â Â check-compiled?Â :Â any/cÂ =Â (regexp-match?Â #rx"[.]rkt$"Â file)
procedure
(collection-pathÂ collectionÂ ...+)Â ->Â path?
Â Â collectionÂ :Â path-string?
(collection-pathÂ collection       Â Â  Â Â 
Â                Â ...+             Â Â  Â Â 
Â                Â #:failÂ fail-proc)Â ->Â any
Â Â collectionÂ :Â path-string?
Â Â fail-procÂ :Â (string?Â . -> .Â any)
parameter
(current-library-collection-paths)
Â ->Â (listofÂ (and/cÂ path?Â complete-path?))
(current-library-collection-pathsÂ paths)Â ->Â void?
Â Â pathsÂ :Â (listofÂ (and/cÂ path-string?Â complete-path?))
parameter
(current-library-collection-links)
Â ->Â (listofÂ (or/cÂ #f
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path?Â complete-path?)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â (hash/cÂ (or/cÂ (and/cÂ symbol?Â module-path?)Â #f)
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (and/cÂ path?Â complete-path?)))))
(current-library-collection-linksÂ paths)Â ->Â void?
Â Â pathsÂ :Â (listofÂ (or/cÂ #f
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â (and/cÂ path-string?Â complete-path?)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â (hash/cÂ (or/cÂ (and/cÂ symbol?Â module-path?)Â #f)
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (listofÂ (and/cÂ path-string?Â complete-path?)))))
parameter
(use-user-specific-search-paths)Â ->Â boolean?
(use-user-specific-search-pathsÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
parameter
(use-collection-link-paths)Â ->Â boolean?
(use-collection-link-pathsÂ on?)Â ->Â void?
Â Â on?Â :Â any/c
procedure
(read-installation-configuration-table)
Â ->Â (and/cÂ hash?Â immutable?)
syntax
help
(helpÂ stringÂ ...)
(helpÂ id)
(helpÂ idÂ #:fromÂ module-path)
(helpÂ #:searchÂ datumÂ ...)
parameter
(current-interaction-info)
Â ->Â (or/cÂ #fÂ (vector/cÂ module-path?Â symbol?Â any/c))
(current-interaction-infoÂ info)Â ->Â void?
Â Â infoÂ :Â (or/cÂ #fÂ (vector/cÂ module-path?Â symbol?Â any/c))
syntax
(enter!Â module-path)
(enter!Â #f)
(enter!Â module-pathÂ flagÂ ...+)
Â 
flagÂ =Â #:quiet
   Â Â |Â #:verbose-reload
   Â Â |Â #:verbose
   Â Â |Â #:dont-re-require-enter
procedure
(dynamic-enter!Â  mod                                    Â Â  Â Â 
Â               Â [#:verbosityÂ verbosity                  Â Â  Â Â 
Â               Â  #:re-require-enter?Â re-require-enter?])Â ->Â void?
Â Â modÂ :Â (or/cÂ module-path?Â #f)
Â Â verbosityÂ :Â (or/cÂ 'allÂ 'reloadÂ 'none)Â =Â 'reload
Â Â re-require-enter?Â :Â any/cÂ =Â #t
procedure
(dynamic-rerequireÂ  module-path            Â Â  Â Â 
Â                  Â [#:verbosityÂ verbosity])Â ->Â (listofÂ path?)
Â Â module-pathÂ :Â module-path?
Â Â verbosityÂ :Â (or/cÂ 'allÂ 'reloadÂ 'none)Â =Â 'reload
syntax
(traceÂ idÂ ...)
syntax
(trace-defineÂ idÂ expr)
(trace-defineÂ (headÂ args)Â bodyÂ ...+)
syntax
(trace-define-syntaxÂ idÂ expr)
(trace-define-syntaxÂ (headÂ args)Â bodyÂ ...+)
syntax
(trace-lambdaÂ [#:nameÂ id]Â argsÂ expr)
syntax
(trace-letÂ idÂ ([argÂ expr]Â ...+)Â bodyÂ ...+)
syntax
(untraceÂ idÂ ...)
parameter
(current-trace-notify)Â ->Â (string?Â . -> .Â any)
(current-trace-notifyÂ proc)Â ->Â void?
Â Â procÂ :Â (string?Â . -> .Â any)
procedure
(trace-callÂ idÂ procÂ #:<kw>Â kw-argÂ ...)Â ->Â any/c
Â Â idÂ :Â symbol?
Â Â procÂ :Â procedure?
Â Â kw-argÂ :Â any/c
parameter
(current-trace-print-args)Â ->Â (->Â symbol?
                              Â Â Â Â list?
                              Â Â Â Â (listofÂ keyword?)
                              Â Â Â Â list?
                              Â Â Â Â number?
                              Â Â Â Â void?)
(current-trace-print-argsÂ trace-print-args)Â ->Â void?
Â Â trace-print-argsÂ :Â (->Â symbol?
                     Â Â Â Â list?
                     Â Â Â Â (listofÂ keyword?)
                     Â Â Â Â list?
                     Â Â Â Â number?
                     Â Â Â Â void?)
parameter
(current-trace-print-results)Â ->Â (->Â symbol?
                                 Â Â Â Â list?
                                 Â Â Â Â number?
                                 Â Â Â Â any)
(current-trace-print-resultsÂ trace-print-results)Â ->Â void?
Â Â trace-print-resultsÂ :Â (->Â symbol?
                        Â Â Â Â list?
                        Â Â Â Â number?
                        Â Â Â Â any)
parameter
(current-prefix-in)Â ->Â string?
(current-prefix-inÂ prefix)Â ->Â void?
Â Â prefixÂ :Â string?
parameter
(current-prefix-out)Â ->Â string?
(current-prefix-outÂ prefix)Â ->Â void?
Â Â prefixÂ :Â string?
